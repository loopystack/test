{"version":3,"file":"static/js/965.17591c6f.chunk.js","mappings":"+XAIA,SAAeA,EAAAA,EAAAA,GAAc,EAAcC,EAAAA,EAAAA,KAAK,OAAQ,CACtDC,EAAG,iJACF,MAAmBD,EAAAA,EAAAA,KAAK,OAAQ,CACjCC,EAAG,4CACF,MAAO,Y,kCCJV,SAAeF,EAAAA,EAAAA,IAA4BC,EAAAA,EAAAA,KAAK,OAAQ,CACtDC,EAAG,0CACD,QC+MJ,EA3L6BC,IAAkC,IAAjC,QAAEC,EAAO,eAAEC,GAAgBF,EACvD,MAAOG,EAAkBC,IAAuBC,EAAAA,EAAAA,WAAS,IAClDC,EAAcC,IAAmBF,EAAAA,EAAAA,UAAS,KAC1CG,EAASC,IAAcJ,EAAAA,EAAAA,WAAS,IAChCK,EAAOC,IAAYN,EAAAA,EAAAA,UAAS,IAyE7BO,EAAwC,UAAnBX,EAAQY,QAAyC,aAAnBZ,EAAQY,OAEjE,OACEC,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CAACC,GAAI,CAAEC,GAAI,GAAIC,SAAA,EAClBJ,EAAAA,EAAAA,MAACK,EAAAA,EAAW,CAAAD,SAAA,EACVpB,EAAAA,EAAAA,KAACsB,EAAAA,EAAU,CAACC,QAAQ,KAAKC,cAAY,EAACN,GAAI,CAAEO,MAAO,SAAUL,SAAC,oBAI9DJ,EAAAA,EAAAA,MAACU,EAAAA,EAAG,CAACR,GAAI,CAAES,QAAS,OAAQC,WAAY,SAAUC,IAAK,EAAGV,GAAI,GAAIC,SAAA,CAhFjDL,KACrB,OAAQA,GACN,IAAK,WACH,OAAOf,EAAAA,EAAAA,KAAC8B,EAAAA,EAAY,CAACZ,GAAI,CAAEO,MAAO,WACpC,IAAK,UACH,OAAOzB,EAAAA,EAAAA,KAAC+B,EAAW,CAACb,GAAI,CAAEO,MAAO,YACnC,IAAK,WACH,OAAOzB,EAAAA,EAAAA,KAACgC,EAAAA,EAAY,CAACd,GAAI,CAAEO,MAAO,SACpC,IAAK,QACH,OAAOzB,EAAAA,EAAAA,KAACiC,EAAAA,EAAS,CAACf,GAAI,CAAEO,MAAO,UACjC,QACE,OAAOzB,EAAAA,EAAAA,KAACkC,EAAAA,EAAQ,CAAChB,GAAI,CAAEO,MAAO,WAClC,EAqEOU,CAAchC,EAAQY,SACvBf,EAAAA,EAAAA,KAACoC,EAAAA,EAAI,CACHC,MAAOlC,EAAQY,OAAOuB,OAAO,GAAGC,cAAgBpC,EAAQY,OAAOyB,MAAM,GACrEf,MArEcV,KACtB,OAAQA,GACN,IAAK,WACH,MAAO,UACT,IAAK,UACH,MAAO,UACT,IAAK,WACH,MAAO,QAGT,QACE,MAAO,UACX,EAyDe0B,CAAetC,EAAQY,QAC9BQ,QAAQ,iBAIZvB,EAAAA,EAAAA,KAACsB,EAAAA,EAAU,CAACC,QAAQ,QAAQL,GAAI,CAAEC,GAAI,EAAGM,MAAO,SAAUL,SA3DlCL,KAC5B,OAAQA,GACN,IAAK,WACH,MAAO,gEACT,IAAK,UACH,MAAO,sDACT,IAAK,WACH,MAAO,0EACT,IAAK,QACH,MAAO,kEACT,QACE,MAAO,kBACX,EAgDO2B,CAAqBvC,EAAQY,UAGZ,YAAnBZ,EAAQY,SACPf,EAAAA,EAAAA,KAAC2C,EAAAA,EAAK,CAACC,SAAS,OAAO1B,GAAI,CAAEC,GAAI,EAAGM,MAAO,SAAUL,SAAC,8FAKpC,aAAnBjB,EAAQY,QAAyBZ,EAAQ0C,mBACxC7C,EAAAA,EAAAA,KAAC2C,EAAAA,EAAK,CAACC,SAAS,QAAQ1B,GAAI,CAAEC,GAAI,EAAGM,MAAO,SAAUL,UACpDJ,EAAAA,EAAAA,MAACM,EAAAA,EAAU,CAACC,QAAQ,QAAQL,GAAI,CAAEO,MAAO,SAAUL,SAAA,EACjDpB,EAAAA,EAAAA,KAAA,UAAAoB,SAAQ,sBAA0B,IAAEjB,EAAQ0C,sBAKjD/B,IACCd,EAAAA,EAAAA,KAAC8C,EAAAA,EAAM,CACLvB,QAAQ,YACRwB,WAAW/C,EAAAA,EAAAA,KAACgD,EAAU,IACtBC,QAASA,IAAM3C,GAAoB,GACnCY,GAAI,CAAEgC,gBAAiB,QAASzB,MAAO,SAAUL,SAClD,sBAKiB,aAAnBjB,EAAQY,SAA0BZ,EAAQgD,YACzCnD,EAAAA,EAAAA,KAAC2C,EAAAA,EAAK,CAACC,SAAS,UAAU1B,GAAI,CAAEkC,GAAI,EAAG3B,MAAO,SAAUL,SAAC,sFAO7DJ,EAAAA,EAAAA,MAACqC,EAAAA,EAAM,CACLC,KAAMjD,EACNkD,QAASA,IAAMjD,GAAoB,GACnCkD,SAAS,KACTC,WAAS,EAAArC,SAAA,EAETpB,EAAAA,EAAAA,KAAC0D,EAAAA,EAAW,CAACxC,GAAI,CAAEO,MAAO,SAAUL,SAAC,+BAGrCJ,EAAAA,EAAAA,MAAC2C,EAAAA,EAAa,CAAAvC,SAAA,EACZpB,EAAAA,EAAAA,KAACsB,EAAAA,EAAU,CAACC,QAAQ,QAAQL,GAAI,CAAEC,GAAI,EAAGM,MAAO,SAAUL,SAAC,uFAG3DpB,EAAAA,EAAAA,KAAC4D,EAAAA,EAAS,CACRH,WAAS,EACTI,WAAS,EACTC,KAAM,EACNzB,MAAM,oBACN0B,MAAOvD,EACPwD,SAAWC,GAAMxD,EAAgBwD,EAAEC,OAAOH,OAC1CI,YAAY,0DACZvD,QAASA,EACTwD,WAAYxD,EACZM,GAAI,CACF,uBAAwB,CACtBO,MAAO,QACP,aAAc,CAAE4C,YAAa,UAE/B,wBAAyB,CACvB5C,MAAO,gBAKfT,EAAAA,EAAAA,MAACsD,EAAAA,EAAa,CAAAlD,SAAA,EACZpB,EAAAA,EAAAA,KAAC8C,EAAAA,EAAM,CACLG,QAASA,IAAM3C,GAAoB,GACnCY,GAAI,CAAEO,MAAO,SAAUL,SACxB,YAGDpB,EAAAA,EAAAA,KAAC8C,EAAAA,EAAM,CACLG,QA3HoBsB,UAC5B,GAAK/D,EAAagE,OAKlB,IACE7D,GAAW,GACXE,EAAS,UAEH4D,EAAAA,EAAeC,gBAAgBvE,EAAQwE,GAAI,CAC/CC,OAAQpE,EACRO,OAAQ,YAGVT,GAAoB,GACpBG,EAAgB,IAChBL,GAAkBA,GACpB,CAAE,MAAOQ,GAAQ,IAADiE,EAAAC,EACdC,QAAQnE,MAAM,uCAAwCA,GACtDC,GAAuB,QAAdgE,EAAAjE,EAAMoE,gBAAQ,IAAAH,GAAM,QAANC,EAAdD,EAAgBI,YAAI,IAAAH,OAAN,EAAdA,EAAsBlE,QAAS,uCAC1C,CAAC,QACCD,GAAW,EACb,MArBEE,EAAS,0CAqBX,EAqGQU,QAAQ,YACR2D,SAAUxE,EACVQ,GAAI,CAAEgC,gBAAiB,QAASzB,MAAO,SAAUL,SAEhDV,EAAU,gBAAkB,8BAI9B,ECNX,EAvL8ByE,KAC1B,MAAM,UAAEC,IAAcC,EAAAA,EAAAA,KAChBC,GAAWC,EAAAA,EAAAA,OACX,KAAEC,IAASC,EAAAA,EAAAA,OAEVtF,EAASuF,IAAcnF,EAAAA,EAAAA,UAAS,OAChCG,EAASC,IAAcJ,EAAAA,EAAAA,WAAS,IAChCK,EAAOC,IAAYN,EAAAA,EAAAA,UAAS,OAC5BoF,EAAUC,IAAerF,EAAAA,EAAAA,UAAS,CACrC+C,MAAM,EACNuC,QAAS,GACTjD,SAAU,aAGdkD,EAAAA,EAAAA,YAAU,KACNC,GAAa,GACd,CAACX,IAEJ,MAAMW,EAAcxB,UAChB,IACI5D,GAAW,GACXE,EAAS,MAGT,MAAMmF,GAAc,OAAJR,QAAI,IAAJA,OAAI,EAAJA,EAAMS,YAAgB,OAAJT,QAAI,IAAJA,OAAI,EAAJA,EAAMU,cAClClB,EAAWgB,QACLvB,EAAAA,EAAe0B,gBAAgBf,SAC/BX,EAAAA,EAAe2B,WAAWhB,GAEtCM,EAAWV,EAASC,MAGhBe,QACMvB,EAAAA,EAAe4B,sBAAsBjB,SAErCX,EAAAA,EAAe6B,iBAAiBlB,EAE9C,CAAE,MAAOxE,GACLmE,QAAQnE,MAAM,yBAA0BA,GACxCC,EAAS,4CACb,CAAC,QACGF,GAAW,EACf,GAiCJ,GAAID,EACA,OACIV,EAAAA,EAAAA,KAACuG,EAAAA,EAAS,CAAC/C,SAAS,KAAIpC,UACpBJ,EAAAA,EAAAA,MAACU,EAAAA,EAAG,CAACR,GAAI,CAAEkC,GAAI,EAAGoD,UAAW,UAAWpF,SAAA,EACpCpB,EAAAA,EAAAA,KAACyG,EAAAA,EAAc,CAACvF,GAAI,CAAEC,GAAI,MAC1BnB,EAAAA,EAAAA,KAACsB,EAAAA,EAAU,CAACC,QAAQ,KAAKL,GAAI,CAAEO,MAAO,SAAUL,SAAC,4BAQjE,GAAIR,EACA,OACIZ,EAAAA,EAAAA,KAACuG,EAAAA,EAAS,CAAC/C,SAAS,KAAIpC,UACpBJ,EAAAA,EAAAA,MAACU,EAAAA,EAAG,CAACR,GAAI,CAAEkC,GAAI,GAAIhC,SAAA,EACfpB,EAAAA,EAAAA,KAAC2C,EAAAA,EAAK,CAACC,SAAS,QAAQ1B,GAAI,CAAEO,MAAO,SAAUL,SAC1CR,KAELZ,EAAAA,EAAAA,KAAC8C,EAAAA,EAAM,CACHC,WAAW/C,EAAAA,EAAAA,KAAC0G,EAAAA,EAAQ,IACpBzD,QAASA,IAAMqC,EAAS,aACxBpE,GAAI,CAAEkC,GAAI,EAAG3B,MAAO,SAAUL,SACjC,0BAQjB,IAAKjB,EACD,OACIH,EAAAA,EAAAA,KAACuG,EAAAA,EAAS,CAAC/C,SAAS,KAAIpC,UACpBJ,EAAAA,EAAAA,MAACU,EAAAA,EAAG,CAACR,GAAI,CAAEkC,GAAI,GAAIhC,SAAA,EACfpB,EAAAA,EAAAA,KAAC2C,EAAAA,EAAK,CAACC,SAAS,UAAU1B,GAAI,CAAEO,MAAO,SAAUL,SAAC,uBAGlDpB,EAAAA,EAAAA,KAAC8C,EAAAA,EAAM,CACHC,WAAW/C,EAAAA,EAAAA,KAAC0G,EAAAA,EAAQ,IACpBzD,QAASA,IAAMqC,EAAS,aACxBpE,GAAI,CAAEkC,GAAI,EAAG3B,MAAO,SAAUL,SACjC,0BAQjB,MAAMuF,EAAUxG,EAAQyG,MAAMjC,MAAW,OAAJa,QAAI,IAAJA,OAAI,EAAJA,EAAMb,IAE3C,OACI3D,EAAAA,EAAAA,MAAA6F,EAAAA,SAAA,CAAAzF,SAAA,EACIpB,EAAAA,EAAAA,KAAC8G,EAAAA,GAAM,CAAA1F,UACHJ,EAAAA,EAAAA,MAAA,SAAAI,SAAA,CAAQjB,EAAQ4G,MAAM,uBAG1B/F,EAAAA,EAAAA,MAACuF,EAAAA,EAAS,CAAC/C,SAAS,KAAIpC,SAAA,EAEpBpB,EAAAA,EAAAA,KAAC0B,EAAAA,EAAG,CAACR,GAAI,CAAEkC,GAAI,EAAGjC,GAAI,GAAIC,UACtBpB,EAAAA,EAAAA,KAAC8C,EAAAA,EAAM,CACHC,WAAW/C,EAAAA,EAAAA,KAAC0G,EAAAA,EAAQ,IACpBzD,QAASA,IAAMqC,EAAS,aACxBpE,GAAI,CAAEO,MAAO,SAAUL,SAC1B,uBAMJuF,IACG3G,EAAAA,EAAAA,KAACgH,EAAoB,CACjB7G,QAASA,EACTC,eAAgB2F,KAKxB/F,EAAAA,EAAAA,KAACiH,EAAAA,EAAc,CACX9G,QAASA,EACToD,QAASA,IAAM+B,EAAS,aACxB4B,MAjHSC,KACrB7B,EAAS,YAAYF,QAAgB,EAiHzBgC,aA5GSC,KACjBlH,EAAQgD,UACRmC,EAAS,mBAAmBF,KAE5BQ,EAAY,CACRtC,MAAM,EACNuC,QAAS,6BACTjD,SAAU,WAElB,EAoGY0E,gBAjGYC,KACxBjC,EAAS,aAAaF,kBAA0B,EAiGpCuB,QAASA,KAIb3G,EAAAA,EAAAA,KAACwH,EAAAA,EAAQ,CACLlE,KAAMqC,EAASrC,KACfmE,iBAAkB,IAClBlE,QAASA,IAAMqC,EAAY,IAAKD,EAAUrC,MAAM,IAASlC,UAEzDpB,EAAAA,EAAAA,KAAC2C,EAAAA,EAAK,CACFY,QAASA,IAAMqC,EAAY,IAAKD,EAAUrC,MAAM,IAChDV,SAAU+C,EAAS/C,SACnB1B,GAAI,CAAEwG,MAAO,QAAStG,SAErBuE,EAASE,iBAIvB,C,yDCnMX,SAAe9F,EAAAA,EAAAA,IAA4BC,EAAAA,EAAAA,KAAK,OAAQ,CACtDC,EAAG,0KACD,S,0DCHJ,MAAM0H,EAAeC,0BA2BfC,EAAMC,EAAAA,EAAMC,OAAO,CACvBC,QAAS,GAAGL,QACZM,QAAS,CACP,eAAgB,oBAElBC,iBAAiB,IAInBL,EAAIM,aAAaC,QAAQC,KACvB9D,eAlCqBA,WACrB,IAEE,GAAK+D,EAAAA,EAAQC,IAAI,aAYfxD,QAAQyD,IAAI,6BAA8BF,EAAAA,EAAQC,IAAI,aAAe,eAAiB,sBAZzD,CAC7BxD,QAAQyD,IAAI,8CACZ,MAAMxD,QAAiB8C,EAAAA,EAAMS,IAAI,GAAGZ,wBAAoC,CACtEO,iBAAiB,IAEnB,GAAwB,MAApBlD,EAASjE,OAAgB,CAC3B,MAAM0H,EAAQH,EAAAA,EAAQC,IAAI,aAC1BxD,QAAQyD,IAAI,mCAAoCC,EAAQ,iBAAmB,eAC7E,MACE1D,QAAQ2D,KAAK,8BAA+B1D,EAASjE,OAEzD,CAGF,CAAE,MAAOH,GACPmE,QAAQnE,MAAM,6BAA8BA,EAE9C,GAgBQ+H,GAEN,MAAMF,EAAQG,aAAaC,QAAQ,eAC/BJ,IACFK,EAAOb,QAAQc,cAAgB,UAAUN,KAI3C,MAAMO,EAAYV,EAAAA,EAAQC,IAAI,aAK9B,OAJIS,IACFF,EAAOb,QAAQ,eAAiBe,GAG3BF,CAAM,IAEdlI,GACQqI,QAAQC,OAAOtI,KAK1BiH,EAAIM,aAAanD,SAASqD,KACvBrD,GAAaA,IACbpE,IAAW,IAADiE,EAMT,OAL+B,OAAb,QAAdA,EAAAjE,EAAMoE,gBAAQ,IAAAH,OAAA,EAAdA,EAAgB9D,UAElB6H,aAAaO,WAAW,eACxBC,OAAOC,SAASC,KAAO,UAElBL,QAAQC,OAAOtI,EAAM,IAIzB,MAAM6D,EAAiB,CAE5B8E,eAAgBhF,iBAAwB,IAAjBiF,EAAMC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAE/B,aADuB5B,EAAIU,IAAI,aAAc,CAAEiB,UAEjD,EAGAI,cAAerF,iBAAwB,IAAjBiF,EAAMC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAE9B,aADuB5B,EAAIU,IAAI,yBAA0B,CAAEiB,UAE7D,EAGAK,eAAgBtF,eAAOuF,GAAwB,IAAjBN,EAAMC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAItC,aAHuB5B,EAAIU,IAAI,oBAAqB,CAClDiB,OAAQ,CAAEO,EAAGD,KAAUN,IAG3B,EAGApD,WAAY7B,eACasD,EAAIU,IAAI,aAAanD,MAK9C4E,cAAezF,eACUsD,EAAIoC,KAAK,aAAcC,GAKhDC,cAAe5F,MAAOa,EAAW8E,UACRrC,EAAIuC,IAAI,aAAahF,KAAc8E,GAK5DG,cAAe9F,eACUsD,EAAIyC,OAAO,aAAalF,MAKjDmF,WAAYhG,eAAOa,GAA+B,IAApBoF,EAASf,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAEzC,aADuB5B,EAAIoC,KAAK,aAAa7E,SAAkBoF,EAEjE,EAGAlE,iBAAkB/B,eACOsD,EAAIoC,KAAK,aAAa7E,WAK/CqF,oBAAqBlG,eACIsD,EAAIU,IAAI,aAAanD,gBAK9CsF,iBAAkBnG,eACOsD,EAAIU,IAAI,aAAanD,oBAK9CuF,gBAAiBpG,MAAOa,EAAWwF,UACV/C,EAAIoC,KAAK,aAAa7E,sBAA+BwF,GAK9EC,mBAAoBtG,MAAOa,EAAW0F,UACbjD,EAAIoC,KAAK,aAAa7E,yBAAkC,CAAE2F,QAASD,IAK5FE,uBAAwBzG,MAAOa,EAAW6F,UACjBpD,EAAIoC,KAAK,aAAa7E,+BAAwC6F,GAKvFC,mBAAoB3G,eACKsD,EAAIU,IAAI,aAAanD,uBAK9C+F,uBAAwB5G,MAAOa,EAAWgG,UACjBvD,EAAIoC,KAAK,aAAa7E,cAAsBgG,wBAKrEC,mBAAoB9G,eACKsD,EAAIU,IAAI,aAAanD,eAK9CkG,qBAAsB/G,MAAOa,EAAW6F,UACfpD,EAAIoC,KAAK,aAAa7E,cAAuB6F,GAKtEM,qBAAsBhH,MAAOa,EAAWgG,EAAWH,UAC1BpD,EAAIuC,IAAI,aAAahF,cAAsBgG,KAAcH,GAKlFO,qBAAsBjH,MAAOa,EAAWgG,UACfvD,EAAIyC,OAAO,aAAalF,cAAsBgG,MAKvEK,sBAAuBlH,MAAOa,EAAWgG,UAChBvD,EAAIoC,KAAK,aAAa7E,cAAsBgG,cAKrEM,qBAAsBnH,eAAOa,EAAWgG,GAA4B,IAAjBxG,EAAM6E,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAE1D,aADuB5B,EAAIoC,KAAK,aAAa7E,cAAsBgG,YAAqB,CAAExG,UAE5F,EAGA+G,0BAA2BpH,MAAOa,EAAWwG,UACpB/D,EAAIoC,KAAK,aAAa7E,yBAAkC,CAAEwG,SAKnFC,sBAAuBtH,eACEsD,EAAIU,IAAI,aAAanD,0BAK9C0G,yBAA0BvH,MAAOa,EAAW2G,EAAYC,UAC/BnE,EAAIuC,IAAI,aAAahF,yBAAiC2G,KAAeC,GAM9FC,oBAAqB1H,iBAAwB,IAAjBiF,EAAMC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAEpC,aADuB5B,EAAIU,IAAI,4BAA6B,CAAEiB,UAEhE,EAGA0C,mBAAoB3H,eACKsD,EAAIyC,OAAO,4BAA4BlF,MAKhEe,gBAAiB5B,eACQsD,EAAIU,IAAI,4BAA4BnD,MAK7D+G,kBAAmB5H,eACMsD,EAAIU,IAAI,uCAKjC6D,eAAgB7H,eACSsD,EAAIoC,KAAK,4BAA4B7E,cAK9DiH,cAAe9H,eAAOa,GAA4B,IAAjBR,EAAM6E,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAExC,aADuB5B,EAAIoC,KAAK,4BAA4B7E,YAAqB,CAAER,UAErF,EAGA0H,mBAAoB/H,MAAOa,EAAW8E,UACbrC,EAAIuC,IAAI,4BAA4BhF,KAAc8E,GAK3EqC,gBAAiBhI,eAAOa,GAA+B,IAApBoF,EAASf,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAE9C,aADuB5B,EAAIoC,KAAK,4BAA4B7E,iBAA0BoF,EAExF,EAGAnE,sBAAuB9B,eACEsD,EAAIoC,KAAK,4BAA4B7E,iBAK9DoH,qBAAsBjI,MAAOa,EAAWwF,UACf/C,EAAIoC,KAAK,4BAA4B7E,4BAAqCwF,GAKnG6B,wBAAyBlI,MAAOa,EAAW0F,UAClBjD,EAAIyC,OAAO,4BAA4BlF,+BAAwC,CAAEH,KAAM,CAAE8F,QAASD,KAK3H4B,oBAAqBnI,MAAOa,EAAWgG,UACdvD,EAAIoC,KAAK,4BAA4B7E,qBAA8B,CAAEuH,WAAYvB,IAK1GwB,mBAAoBrI,eAAOa,EAAWgG,GAA4B,IAAjBxG,EAAM6E,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAExD,aADuB5B,EAAIoC,KAAK,4BAA4B7E,oBAA6B,CAAEuH,WAAYvB,EAAWxG,UAEpH,EAGAiI,gBAAiBtI,eACQsD,EAAIU,IAAI,aAAanD,YAK9C0H,oBAAqBvI,eACIsD,EAAIU,IAAI,aAAanD,iBAK9C2H,aAAcxI,eACWsD,EAAIU,IAAI,aAAanD,iBAK9C4H,kBAAmBzI,eACMsD,EAAIU,IAAI,4BAA4BnD,iBAK7D8F,mBAAoB3G,eACKsD,EAAIU,IAAI,aAAanD,uBAK9C6H,eAAgB1I,MAAOa,EAAWgG,UACTvD,EAAIoC,KAAK,aAAa7E,cAAsBgG,cAKrE8B,cAAe3I,MAAOa,EAAWgG,EAAWxG,UACnBiD,EAAIoC,KAAK,aAAa7E,cAAsBgG,YAAqB,CAAExG,WAK5FoG,uBAAwBzG,MAAOa,EAAW6F,UACjBpD,EAAIoC,KAAK,aAAa7E,+BAAwC6F,GAKvFvG,gBAAiBH,MAAOa,EAAW+H,UACVtF,EAAIoC,KAAK,aAAa7E,uBAAgC+H,GAK/EC,iBAAkB7I,eACOsD,EAAIU,IAAI,oBAAoBnD,MAKrDiI,kBAAmB9I,eACMsD,EAAIU,IAAI,qBAAqB+E,MAKtDC,YAAahJ,MAAOqH,EAAM4B,UACD3F,EAAIoC,KAAK,0BAA2B,CACzD2B,KAAMA,EACN4B,SAAUA,IAMdC,eAAgBlJ,iBAAyB,IAAlBmJ,EAAOjE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAChC,MAAM,MACJK,EAAQ,GAAE,YACV6D,EAAc,GAAE,SAChBH,EAAW,GAAE,OACbI,EAAS,aAAY,UACrBC,EAAY,QACVH,EAEElE,EAAS,CACbO,EAAGD,EACHgE,KAAMH,EACNH,SAAUA,EACVO,QAASH,EACTI,WAAYH,GAId,aADuBhG,EAAIU,IAAI,oBAAqB,CAAEiB,UAExD,E,yDC9YF,SAAezJ,EAAAA,EAAAA,IAA4BC,EAAAA,EAAAA,KAAK,OAAQ,CACtDC,EAAG,8DACD,Y","sources":["../node_modules/@mui/icons-material/esm/Schedule.js","../node_modules/@mui/icons-material/esm/Send.js","content/applications/Projects/components/ProjectStatusManager.js","content/applications/Projects/IndividualProjectPage.js","../node_modules/@mui/icons-material/esm/Cancel.js","services/projectService.js","../node_modules/@mui/icons-material/esm/ArrowBack.js"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon([/*#__PURE__*/_jsx(\"path\", {\n  d: \"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2M12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8\"\n}, \"0\"), /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z\"\n}, \"1\")], 'Schedule');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M2.01 21 23 12 2.01 3 2 10l15 2-15 2z\"\n}), 'Send');","import React, { useState } from 'react';\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Button,\r\n  Chip,\r\n  Alert,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  LinearProgress\r\n} from '@mui/material';\r\nimport {\r\n  CheckCircle as ApprovedIcon,\r\n  Schedule as PendingIcon,\r\n  Cancel as RejectedIcon,\r\n  Edit as DraftIcon,\r\n  Send as SubmitIcon,\r\n  Info as InfoIcon\r\n} from '@mui/icons-material';\r\nimport { projectService } from 'src/services/projectService';\r\n\r\nconst ProjectStatusManager = ({ project, onStatusUpdate }) => {\r\n  const [openSubmitDialog, setOpenSubmitDialog] = useState(false);\r\n  const [submitReason, setSubmitReason] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n\r\n  const getStatusIcon = (status) => {\r\n    switch (status) {\r\n      case 'approved':\r\n        return <ApprovedIcon sx={{ color: 'green' }} />;\r\n      case 'pending':\r\n        return <PendingIcon sx={{ color: 'orange' }} />;\r\n      case 'rejected':\r\n        return <RejectedIcon sx={{ color: 'red' }} />;\r\n      case 'draft':\r\n        return <DraftIcon sx={{ color: 'gray' }} />;\r\n      default:\r\n        return <InfoIcon sx={{ color: 'black' }} />;\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status) => {\r\n    switch (status) {\r\n      case 'approved':\r\n        return 'success';\r\n      case 'pending':\r\n        return 'warning';\r\n      case 'rejected':\r\n        return 'error';\r\n      case 'draft':\r\n        return 'default';\r\n      default:\r\n        return 'default';\r\n    }\r\n  };\r\n\r\n  const getStatusDescription = (status) => {\r\n    switch (status) {\r\n      case 'approved':\r\n        return 'Your project has been approved and is now publicly available.';\r\n      case 'pending':\r\n        return 'Your project is currently under review by our team.';\r\n      case 'rejected':\r\n        return 'Your project was not approved. Please review the feedback and resubmit.';\r\n      case 'draft':\r\n        return 'Your project is in draft mode. Submit it for review when ready.';\r\n      default:\r\n        return 'Unknown status.';\r\n    }\r\n  };\r\n\r\n  const handleSubmitForReview = async () => {\r\n    if (!submitReason.trim()) {\r\n      setError('Please provide a reason for submission.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      setError('');\r\n      \r\n      await projectService.submitForReview(project.id, {\r\n        reason: submitReason,\r\n        status: 'pending'\r\n      });\r\n      \r\n      setOpenSubmitDialog(false);\r\n      setSubmitReason('');\r\n      onStatusUpdate && onStatusUpdate();\r\n    } catch (error) {\r\n      console.error('Error submitting project for review:', error);\r\n      setError(error.response?.data?.error || 'Failed to submit project for review.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const canSubmitForReview = project.status === 'draft' || project.status === 'rejected';\r\n\r\n  return (\r\n    <Card sx={{ mb: 3 }}>\r\n      <CardContent>\r\n        <Typography variant=\"h6\" gutterBottom sx={{ color: 'black' }}>\r\n          Project Status\r\n        </Typography>\r\n        \r\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 2 }}>\r\n          {getStatusIcon(project.status)}\r\n          <Chip\r\n            label={project.status.charAt(0).toUpperCase() + project.status.slice(1)}\r\n            color={getStatusColor(project.status)}\r\n            variant=\"outlined\"\r\n          />\r\n        </Box>\r\n        \r\n        <Typography variant=\"body2\" sx={{ mb: 3, color: 'black' }}>\r\n          {getStatusDescription(project.status)}\r\n        </Typography>\r\n\r\n        {project.status === 'pending' && (\r\n          <Alert severity=\"info\" sx={{ mb: 2, color: 'black' }}>\r\n            Review typically takes 1-3 business days. You'll be notified once the review is complete.\r\n          </Alert>\r\n        )}\r\n\r\n        {project.status === 'rejected' && project.rejection_reason && (\r\n          <Alert severity=\"error\" sx={{ mb: 2, color: 'black' }}>\r\n            <Typography variant=\"body2\" sx={{ color: 'black' }}>\r\n              <strong>Rejection Reason:</strong> {project.rejection_reason}\r\n            </Typography>\r\n          </Alert>\r\n        )}\r\n\r\n        {canSubmitForReview && (\r\n          <Button\r\n            variant=\"contained\"\r\n            startIcon={<SubmitIcon />}\r\n            onClick={() => setOpenSubmitDialog(true)}\r\n            sx={{ backgroundColor: 'black', color: 'white' }}\r\n          >\r\n            Submit for Review\r\n          </Button>\r\n        )}\r\n\r\n        {project.status === 'approved' && !project.is_public && (\r\n          <Alert severity=\"success\" sx={{ mt: 2, color: 'black' }}>\r\n            Your project is approved! You can now make it public in the project settings.\r\n          </Alert>\r\n        )}\r\n      </CardContent>\r\n\r\n      {/* Submit for Review Dialog */}\r\n      <Dialog\r\n        open={openSubmitDialog}\r\n        onClose={() => setOpenSubmitDialog(false)}\r\n        maxWidth=\"sm\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle sx={{ color: 'black' }}>\r\n          Submit Project for Review\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Typography variant=\"body2\" sx={{ mb: 2, color: 'black' }}>\r\n            Please provide a brief description of your project and why it should be approved:\r\n          </Typography>\r\n          <TextField\r\n            fullWidth\r\n            multiline\r\n            rows={4}\r\n            label=\"Submission Reason\"\r\n            value={submitReason}\r\n            onChange={(e) => setSubmitReason(e.target.value)}\r\n            placeholder=\"Describe your project and its value to the community...\"\r\n            error={!!error}\r\n            helperText={error}\r\n            sx={{\r\n              '& .MuiInputBase-root': {\r\n                color: 'black',\r\n                '& fieldset': { borderColor: 'black' }\r\n              },\r\n              '& .MuiInputLabel-root': {\r\n                color: 'black'\r\n              }\r\n            }}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button \r\n            onClick={() => setOpenSubmitDialog(false)}\r\n            sx={{ color: 'black' }}\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            onClick={handleSubmitForReview}\r\n            variant=\"contained\"\r\n            disabled={loading}\r\n            sx={{ backgroundColor: 'black', color: 'white' }}\r\n          >\r\n            {loading ? 'Submitting...' : 'Submit for Review'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ProjectStatusManager; ","import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { Helmet } from 'react-helmet-async';\nimport {\n    Alert,\n    Box,\n    Button,\n    Container,\n    LinearProgress,\n    Snackbar,\n    Typography\n} from '@mui/material';\nimport {\n    ArrowBack as BackIcon,\n} from '@mui/icons-material';\nimport { useAuth } from 'src/contexts/AuthContext';\nimport { projectService } from 'src/services/projectService';\nimport ProjectDetails from './components/ProjectDetails';\nimport ProjectStatusManager from './components/ProjectStatusManager';\n\nconst IndividualProjectPage = () => {\n    const { projectId } = useParams();\n    const navigate = useNavigate();\n    const { user } = useAuth();\n    \n    const [project, setProject] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [snackbar, setSnackbar] = useState({\n        open: false,\n        message: '',\n        severity: 'success'\n    });\n\n    useEffect(() => {\n        loadProject();\n    }, [projectId]);\n\n    const loadProject = async () => {\n        try {\n            setLoading(true);\n            setError(null);\n            \n            // Check if user is admin and use appropriate endpoint\n            const isAdmin = user?.is_staff || user?.is_superuser;\n            const response = isAdmin \n                ? await projectService.getProjectAdmin(projectId)\n                : await projectService.getProject(projectId);\n                \n            setProject(response.data);\n            \n            // Track view - use admin endpoint for admin users\n            if (isAdmin) {\n                await projectService.trackProjectViewAdmin(projectId);\n            } else {\n                await projectService.trackProjectView(projectId);\n            }\n        } catch (error) {\n            console.error('Error loading project:', error);\n            setError('Failed to load project. Please try again.');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleRunProject = () => {\n        navigate(`/project/${projectId}/run`);\n    };\n\n    // Removed handleBuyProject and related buy logic\n\n    const handleViewPublic = () => {\n        if (project.is_public) {\n            navigate(`/project/public/${projectId}`);\n        } else {\n            setSnackbar({\n                open: true,\n                message: 'This project is not public',\n                severity: 'warning'\n            });\n        }\n    };\n\n    const handleCollaboration = () => {\n        navigate(`/projects/${projectId}/collaboration`);\n    };\n\n    const showSnackbar = (message, severity = 'success') => {\n        setSnackbar({\n            open: true,\n            message,\n            severity\n        });\n    };\n\n    if (loading) {\n        return (\n            <Container maxWidth=\"lg\">\n                <Box sx={{ mt: 4, textAlign: 'center' }}>\n                    <LinearProgress sx={{ mb: 2 }} />\n                    <Typography variant=\"h6\" sx={{ color: 'black' }}>\n                        Loading project...\n                    </Typography>\n                </Box>\n            </Container>\n        );\n    }\n\n    if (error) {\n        return (\n            <Container maxWidth=\"lg\">\n                <Box sx={{ mt: 4 }}>\n                    <Alert severity=\"error\" sx={{ color: 'black' }}>\n                        {error}\n                    </Alert>\n                    <Button\n                        startIcon={<BackIcon />}\n                        onClick={() => navigate('/projects')}\n                        sx={{ mt: 2, color: 'black' }}\n                    >\n                        Back to Projects\n                    </Button>\n                </Box>\n            </Container>\n        );\n    }\n\n    if (!project) {\n        return (\n            <Container maxWidth=\"lg\">\n                <Box sx={{ mt: 4 }}>\n                    <Alert severity=\"warning\" sx={{ color: 'black' }}>\n                        Project not found\n                    </Alert>\n                    <Button\n                        startIcon={<BackIcon />}\n                        onClick={() => navigate('/projects')}\n                        sx={{ mt: 2, color: 'black' }}\n                    >\n                        Back to Projects\n                    </Button>\n                </Box>\n            </Container>\n        );\n    }\n\n    const isOwner = project.owner.id === user?.id;\n\n    return (\n        <>\n            <Helmet>\n                <title>{project.title} - OneDollarAI</title>\n            </Helmet>\n\n            <Container maxWidth=\"lg\">\n                {/* Back Button */}\n                <Box sx={{ mt: 3, mb: 2 }}>\n                    <Button\n                        startIcon={<BackIcon />}\n                        onClick={() => navigate('/projects')}\n                        sx={{ color: 'black' }}\n                    >\n                        Back to Projects\n                    </Button>\n                </Box>\n\n                {/* Project Status Manager (for owners) */}\n                {isOwner && (\n                    <ProjectStatusManager\n                        project={project}\n                        onStatusUpdate={loadProject}\n                    />\n                )}\n\n                {/* Project Details */}\n                <ProjectDetails\n                    project={project}\n                    onClose={() => navigate('/projects')}\n                    onRun={handleRunProject}\n                    onViewPublic={handleViewPublic}\n                    onCollaboration={handleCollaboration}\n                    isOwner={isOwner}\n                />\n\n                {/* Snackbar for notifications */}\n                <Snackbar\n                    open={snackbar.open}\n                    autoHideDuration={6000}\n                    onClose={() => setSnackbar({ ...snackbar, open: false })}\n                >\n                    <Alert\n                        onClose={() => setSnackbar({ ...snackbar, open: false })}\n                        severity={snackbar.severity}\n                        sx={{ width: '100%' }}\n                    >\n                        {snackbar.message}\n                    </Alert>\n                </Snackbar>\n            </Container>\n        </>\n    );\n};\n\nexport default IndividualProjectPage; ","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2m5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12z\"\n}), 'Cancel');","import axios from 'axios';\r\nimport Cookies from 'js-cookie';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\r\n\r\n// Function to fetch CSRF token if needed\r\nconst fetchCSRFToken = async () => {\r\n  try {\r\n    // Check if CSRF token already exists\r\n    if (!Cookies.get('csrftoken')) {\r\n      console.log('No CSRF token found, fetching a new one...');\r\n      const response = await axios.get(`${API_BASE_URL}/api/get_csrf_token/`, {\r\n        withCredentials: true\r\n      });\r\n      if (response.status === 200) {\r\n        const token = Cookies.get('csrftoken');\r\n        console.log('CSRF token fetched successfully:', token ? 'Token received' : 'No token set');\r\n      } else {\r\n        console.warn('Failed to fetch CSRF token:', response.status);\r\n      }\r\n    } else {\r\n      console.log('CSRF token already exists:', Cookies.get('csrftoken') ? 'Token exists' : 'No token found');\r\n    }\r\n  } catch (error) {\r\n    console.error('Error fetching CSRF token:', error);\r\n    // Continue without CSRF token - backend will handle exempt views\r\n  }\r\n};\r\n\r\n// Create axios instance with default config\r\nconst api = axios.create({\r\n  baseURL: `${API_BASE_URL}/api`,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n  withCredentials: true, // Enable sending cookies with requests\r\n});\r\n\r\n// Add request interceptor to include auth token and CSRF token\r\napi.interceptors.request.use(\r\n  async (config) => {\r\n    // Fetch CSRF token if needed\r\n    await fetchCSRFToken();\r\n    \r\n    const token = localStorage.getItem('accessToken');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    \r\n    // Add CSRF token to headers\r\n    const csrfToken = Cookies.get('csrftoken');\r\n    if (csrfToken) {\r\n      config.headers['X-CSRFToken'] = csrfToken;\r\n    }\r\n    \r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add response interceptor to handle errors\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      // Handle unauthorized access\r\n      localStorage.removeItem('accessToken');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const projectService = {\r\n  // Get all projects\r\n  getAllProjects: async (params = {}) => {\r\n    const response = await api.get('/projects/', { params });\r\n    return response;\r\n  },\r\n\r\n  // Get user's projects\r\n  getMyProjects: async (params = {}) => {\r\n    const response = await api.get('/projects/my_projects/', { params });\r\n    return response;\r\n  },\r\n\r\n  // Enhanced search projects\r\n  searchProjects: async (query, params = {}) => {\r\n    const response = await api.get('/projects/search/', {\r\n      params: { q: query, ...params }\r\n    });\r\n    return response;\r\n  },\r\n\r\n  // Get single project\r\n  getProject: async (projectId) => {\r\n    const response = await api.get(`/projects/${projectId}/`);\r\n    return response;\r\n  },\r\n\r\n  // Create new project\r\n  createProject: async (projectData) => {\r\n    const response = await api.post('/projects/', projectData);\r\n    return response;\r\n  },\r\n\r\n  // Update project\r\n  updateProject: async (projectId, projectData) => {\r\n    const response = await api.put(`/projects/${projectId}/`, projectData);\r\n    return response;\r\n  },\r\n\r\n  // Delete project\r\n  deleteProject: async (projectId) => {\r\n    const response = await api.delete(`/projects/${projectId}/`);\r\n    return response;\r\n  },\r\n\r\n  // Run project\r\n  runProject: async (projectId, inputData = {}) => {\r\n    const response = await api.post(`/projects/${projectId}/run/`, inputData);\r\n    return response;\r\n  },\r\n\r\n  // Track project view\r\n  trackProjectView: async (projectId) => {\r\n    const response = await api.post(`/projects/${projectId}/view/`);\r\n    return response;\r\n  },\r\n\r\n  // Get project analytics\r\n  getProjectAnalytics: async (projectId) => {\r\n    const response = await api.get(`/projects/${projectId}/analytics/`);\r\n    return response;\r\n  },\r\n\r\n  // Get collaborators\r\n  getCollaborators: async (projectId) => {\r\n    const response = await api.get(`/projects/${projectId}/collaborators/`);\r\n    return response;\r\n  },\r\n\r\n  // Add collaborator\r\n  addCollaborator: async (projectId, collaboratorData) => {\r\n    const response = await api.post(`/projects/${projectId}/add_collaborator/`, collaboratorData);\r\n    return response;\r\n  },\r\n\r\n  // Remove collaborator\r\n  removeCollaborator: async (projectId, userId) => {\r\n    const response = await api.post(`/projects/${projectId}/remove_collaborator/`, { user_id: userId });\r\n    return response;\r\n  },\r\n\r\n  // Submit version for review (for collaborators)\r\n  submitVersionForReview: async (projectId, versionData) => {\r\n    const response = await api.post(`/projects/${projectId}/submit_version_for_review/`, versionData);\r\n    return response;\r\n  },\r\n\r\n  // Get pending versions for review\r\n  getPendingVersions: async (projectId) => {\r\n    const response = await api.get(`/projects/${projectId}/pending_versions/`);\r\n    return response;\r\n  },\r\n\r\n  // Promote version to public\r\n  promoteVersionToPublic: async (projectId, versionId) => {\r\n    const response = await api.post(`/projects/${projectId}/versions/${versionId}/promote_to_public/`);\r\n    return response;\r\n  },\r\n\r\n  // Get project versions\r\n  getProjectVersions: async (projectId) => {\r\n    const response = await api.get(`/projects/${projectId}/versions/`);\r\n    return response;\r\n  },\r\n\r\n  // Create project version\r\n  createProjectVersion: async (projectId, versionData) => {\r\n    const response = await api.post(`/projects/${projectId}/versions/`, versionData);\r\n    return response;\r\n  },\r\n\r\n  // Update project version\r\n  updateProjectVersion: async (projectId, versionId, versionData) => {\r\n    const response = await api.put(`/projects/${projectId}/versions/${versionId}/`, versionData);\r\n    return response;\r\n  },\r\n\r\n  // Delete project version\r\n  deleteProjectVersion: async (projectId, versionId) => {\r\n    const response = await api.delete(`/projects/${projectId}/versions/${versionId}/`);\r\n    return response;\r\n  },\r\n\r\n  // Approve project version\r\n  approveProjectVersion: async (projectId, versionId) => {\r\n    const response = await api.post(`/projects/${projectId}/versions/${versionId}/approve/`);\r\n    return response;\r\n  },\r\n\r\n  // Reject project version\r\n  rejectProjectVersion: async (projectId, versionId, reason = '') => {\r\n    const response = await api.post(`/projects/${projectId}/versions/${versionId}/reject/`, { reason });\r\n    return response;\r\n  },\r\n\r\n  // Analyze computing resources\r\n  analyzeComputingResources: async (projectId, code) => {\r\n    const response = await api.post(`/projects/${projectId}/computing-resources/`, { code });\r\n    return response;\r\n  },\r\n\r\n  // Get computing resources\r\n  getComputingResources: async (projectId) => {\r\n    const response = await api.get(`/projects/${projectId}/computing-resources/`);\r\n    return response;\r\n  },\r\n\r\n  // Update computing resources\r\n  updateComputingResources: async (projectId, resourceId, resourceData) => {\r\n    const response = await api.put(`/projects/${projectId}/computing-resources/${resourceId}/`, resourceData);\r\n    return response;\r\n  },\r\n\r\n  // Admin functions\r\n  // Get all projects for admin\r\n  getAllProjectsAdmin: async (params = {}) => {\r\n    const response = await api.get('/projects/admin/projects/', { params });\r\n    return response;\r\n  },\r\n\r\n  // Delete project as admin\r\n  deleteProjectAdmin: async (projectId) => {\r\n    const response = await api.delete(`/projects/admin/projects/${projectId}/`);\r\n    return response;\r\n  },\r\n\r\n  // Get project as admin\r\n  getProjectAdmin: async (projectId) => {\r\n    const response = await api.get(`/projects/admin/projects/${projectId}/`);\r\n    return response;\r\n  },\r\n\r\n  // Get admin analytics\r\n  getAdminAnalytics: async () => {\r\n    const response = await api.get('/projects/admin/projects/analytics/');\r\n    return response;\r\n  },\r\n\r\n  // Approve project\r\n  approveProject: async (projectId) => {\r\n    const response = await api.post(`/projects/admin/projects/${projectId}/approve/`);\r\n    return response;\r\n  },\r\n\r\n  // Reject project\r\n  rejectProject: async (projectId, reason = '') => {\r\n    const response = await api.post(`/projects/admin/projects/${projectId}/reject/`, { reason });\r\n    return response;\r\n  },\r\n\r\n  // Update project as admin\r\n  updateProjectAdmin: async (projectId, projectData) => {\r\n    const response = await api.put(`/projects/admin/projects/${projectId}/`, projectData);\r\n    return response;\r\n  },\r\n\r\n  // Run project as admin\r\n  runProjectAdmin: async (projectId, inputData = {}) => {\r\n    const response = await api.post(`/projects/admin/projects/${projectId}/run_project/`, inputData);\r\n    return response;\r\n  },\r\n\r\n  // Track project view as admin\r\n  trackProjectViewAdmin: async (projectId) => {\r\n    const response = await api.post(`/projects/admin/projects/${projectId}/track_view/`);\r\n    return response;\r\n  },\r\n\r\n  // Add collaborator as admin\r\n  addCollaboratorAdmin: async (projectId, collaboratorData) => {\r\n    const response = await api.post(`/projects/admin/projects/${projectId}/add_collaborator_admin/`, collaboratorData);\r\n    return response;\r\n  },\r\n\r\n  // Remove collaborator as admin\r\n  removeCollaboratorAdmin: async (projectId, userId) => {\r\n    const response = await api.delete(`/projects/admin/projects/${projectId}/remove_collaborator_admin/`, { data: { user_id: userId } });\r\n    return response;\r\n  },\r\n\r\n  // Approve version as admin\r\n  approveVersionAdmin: async (projectId, versionId) => {\r\n    const response = await api.post(`/projects/admin/projects/${projectId}/approve_version/`, { version_id: versionId });\r\n    return response;\r\n  },\r\n\r\n  // Reject version as admin\r\n  rejectVersionAdmin: async (projectId, versionId, reason = '') => {\r\n    const response = await api.post(`/projects/admin/projects/${projectId}/reject_version/`, { version_id: versionId, reason });\r\n    return response;\r\n  },\r\n\r\n  // Get project usage statistics\r\n  getProjectUsage: async (projectId) => {\r\n    const response = await api.get(`/projects/${projectId}/usage/`);\r\n    return response;\r\n  },\r\n\r\n  // Get user's project usage\r\n  getUserProjectUsage: async (projectId) => {\r\n    const response = await api.get(`/projects/${projectId}/user_usage/`);\r\n    return response;\r\n  },\r\n\r\n  // Get user usage for a specific project\r\n  getUserUsage: async (projectId) => {\r\n    const response = await api.get(`/projects/${projectId}/user_usage/`);\r\n    return response;\r\n  },\r\n\r\n  // Get user usage for a specific project (admin version)\r\n  getUserUsageAdmin: async (projectId) => {\r\n    const response = await api.get(`/projects/admin/projects/${projectId}/user_usage/`);\r\n    return response;\r\n  },\r\n\r\n  // Get pending versions for review\r\n  getPendingVersions: async (projectId) => {\r\n    const response = await api.get(`/projects/${projectId}/pending_versions/`);\r\n    return response;\r\n  },\r\n\r\n  // Approve a version\r\n  approveVersion: async (projectId, versionId) => {\r\n    const response = await api.post(`/projects/${projectId}/versions/${versionId}/approve/`);\r\n    return response;\r\n  },\r\n\r\n  // Reject a version\r\n  rejectVersion: async (projectId, versionId, reason) => {\r\n    const response = await api.post(`/projects/${projectId}/versions/${versionId}/reject/`, { reason });\r\n    return response;\r\n  },\r\n\r\n  // Submit a new version for review\r\n  submitVersionForReview: async (projectId, versionData) => {\r\n    const response = await api.post(`/projects/${projectId}/submit_version_for_review/`, versionData);\r\n    return response;\r\n  },\r\n\r\n  // Submit project for review\r\n  submitForReview: async (projectId, reviewData) => {\r\n    const response = await api.post(`/projects/${projectId}/submit_for_review/`, reviewData);\r\n    return response;\r\n  },\r\n\r\n  // Get public project by ID\r\n  getPublicProject: async (projectId) => {\r\n    const response = await api.get(`/projects/public/${projectId}/`);\r\n    return response;\r\n  },\r\n\r\n  // Get private project by URL\r\n  getPrivateProject: async (privateUrl) => {\r\n    const response = await api.get(`/projects/private/${privateUrl}/`);\r\n    return response;\r\n  },\r\n\r\n  // Execute code using backend endpoint\r\n  executeCode: async (code, language) => {\r\n    const response = await api.post('/projects/execute-code/', {\r\n      code: code,\r\n      language: language\r\n    });\r\n    return response;\r\n  },\r\n\r\n  // Enhanced search with filters\r\n  advancedSearch: async (filters = {}) => {\r\n    const {\r\n      query = '',\r\n      projectType = '',\r\n      language = '',\r\n      sortBy = 'created_at',\r\n      sortOrder = 'desc'\r\n    } = filters;\r\n\r\n    const params = {\r\n      q: query,\r\n      type: projectType,\r\n      language: language,\r\n      sort_by: sortBy,\r\n      sort_order: sortOrder\r\n    };\r\n\r\n    const response = await api.get('/projects/search/', { params });\r\n    return response;\r\n  }\r\n};\r\n\r\nexport default projectService;","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20z\"\n}), 'ArrowBack');"],"names":["createSvgIcon","_jsx","d","_ref","project","onStatusUpdate","openSubmitDialog","setOpenSubmitDialog","useState","submitReason","setSubmitReason","loading","setLoading","error","setError","canSubmitForReview","status","_jsxs","Card","sx","mb","children","CardContent","Typography","variant","gutterBottom","color","Box","display","alignItems","gap","ApprovedIcon","PendingIcon","RejectedIcon","DraftIcon","InfoIcon","getStatusIcon","Chip","label","charAt","toUpperCase","slice","getStatusColor","getStatusDescription","Alert","severity","rejection_reason","Button","startIcon","SubmitIcon","onClick","backgroundColor","is_public","mt","Dialog","open","onClose","maxWidth","fullWidth","DialogTitle","DialogContent","TextField","multiline","rows","value","onChange","e","target","placeholder","helperText","borderColor","DialogActions","async","trim","projectService","submitForReview","id","reason","_error$response","_error$response$data","console","response","data","disabled","IndividualProjectPage","projectId","useParams","navigate","useNavigate","user","useAuth","setProject","snackbar","setSnackbar","message","useEffect","loadProject","isAdmin","is_staff","is_superuser","getProjectAdmin","getProject","trackProjectViewAdmin","trackProjectView","Container","textAlign","LinearProgress","BackIcon","isOwner","owner","_Fragment","Helmet","title","ProjectStatusManager","ProjectDetails","onRun","handleRunProject","onViewPublic","handleViewPublic","onCollaboration","handleCollaboration","Snackbar","autoHideDuration","width","API_BASE_URL","process","api","axios","create","baseURL","headers","withCredentials","interceptors","request","use","Cookies","get","log","token","warn","fetchCSRFToken","localStorage","getItem","config","Authorization","csrfToken","Promise","reject","removeItem","window","location","href","getAllProjects","params","arguments","length","undefined","getMyProjects","searchProjects","query","q","createProject","post","projectData","updateProject","put","deleteProject","delete","runProject","inputData","getProjectAnalytics","getCollaborators","addCollaborator","collaboratorData","removeCollaborator","userId","user_id","submitVersionForReview","versionData","getPendingVersions","promoteVersionToPublic","versionId","getProjectVersions","createProjectVersion","updateProjectVersion","deleteProjectVersion","approveProjectVersion","rejectProjectVersion","analyzeComputingResources","code","getComputingResources","updateComputingResources","resourceId","resourceData","getAllProjectsAdmin","deleteProjectAdmin","getAdminAnalytics","approveProject","rejectProject","updateProjectAdmin","runProjectAdmin","addCollaboratorAdmin","removeCollaboratorAdmin","approveVersionAdmin","version_id","rejectVersionAdmin","getProjectUsage","getUserProjectUsage","getUserUsage","getUserUsageAdmin","approveVersion","rejectVersion","reviewData","getPublicProject","getPrivateProject","privateUrl","executeCode","language","advancedSearch","filters","projectType","sortBy","sortOrder","type","sort_by","sort_order"],"sourceRoot":""}