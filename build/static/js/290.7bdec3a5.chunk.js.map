{"version":3,"file":"static/js/290.7bdec3a5.chunk.js","mappings":"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","sources":["content/applications/Projects/ProjectEdit.js","content/applications/Projects/components/ProjectForm.js","components/CodeEditor.js","services/projectService.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { Helmet } from 'react-helmet-async';\r\nimport {\r\n    Alert,\r\n    Box,\r\n    Breadcrumbs,\r\n    Card,\r\n    CardContent,\r\n    Container,\r\n    Link,\r\n    Typography,\r\n    styled,\r\n    Snackbar\r\n} from '@mui/material';\r\nimport { useAuth } from 'src/contexts/AuthContext';\r\nimport { projectService } from 'src/services/projectService';\r\nimport ProjectForm from './components/ProjectForm';\r\n\r\nconst RootWrapper = styled(Box)(({ theme }) => ({\r\n    display: \"flex\",\r\n    width: '100%',\r\n    flexDirection: 'column',\r\n    height: `calc(100dvh - ${theme.header.mobileHeight})`,\r\n    [theme.breakpoints.up(\"md\")]: {\r\n        height: `calc(100dvh - ${theme.header.height})`\r\n    }\r\n}));\r\n\r\n\r\nconst ProjectEdit = () => {\r\n    const { projectId } = useParams();\r\n    const navigate = useNavigate();\r\n    const { user } = useAuth();\r\n\r\n    const [project, setProject] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [snackbar, setSnackbar] = useState({\r\n        open: false,\r\n        message: '',\r\n        severity: 'success'\r\n    });\r\n\r\n    useEffect(() => {\r\n        loadProject();\r\n    }, [projectId]);\r\n\r\n    const loadProject = async () => {\r\n        try {\r\n            setLoading(true);\r\n            const response = await projectService.getProject(projectId);\r\n            setProject(response.data);\r\n        } catch (error) {\r\n            console.error('Error loading project:', error);\r\n            setError('Failed to load project. Please try again.');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleUpdateProject = async (projectData) => {\r\n        try {\r\n            const response = await projectService.updateProject(\r\n                projectId,\r\n                projectData\r\n            );\r\n            setProject(response.data);\r\n            setSnackbar({\r\n                open: true,\r\n                message: 'Project updated successfully!',\r\n                severity: 'success'\r\n            });\r\n\r\n            // Navigate back to projects list after a short delay\r\n            setTimeout(() => {\r\n                navigate('/projects');\r\n            }, 1500);\r\n        } catch (error) {\r\n            console.error('Error updating project:', error);\r\n            setSnackbar({\r\n                open: true,\r\n                message: 'Failed to update project',\r\n                severity: 'error'\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        navigate('/projects');\r\n    };\r\n\r\n    const handleSnackbarClose = () => {\r\n        setSnackbar({ ...snackbar, open: false });\r\n    };\r\n\r\n    if (loading) {\r\n        return (\r\n            <RootWrapper>\r\n                <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100%' }}>\r\n                    <Typography sx={{ color: 'black' }}>Loading project...</Typography>\r\n                </Box>\r\n            </RootWrapper>\r\n        );\r\n    }\r\n\r\n    if (!project) {\r\n        return (\r\n            <RootWrapper>\r\n                <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100%' }}>\r\n                    <Typography sx={{ color: 'black' }}>Project not found</Typography>\r\n                </Box>\r\n            </RootWrapper>\r\n        );\r\n    }\r\n\r\n    const isOwner = project.owner.id === user?.id;\r\n    const isCollaborator = project.collaborators?.some(\r\n        (collab) => collab.user.id === user?.id && collab.can_edit\r\n    );\r\n\r\n    if (!isOwner && !isCollaborator) {\r\n        return (\r\n            <RootWrapper>\r\n                <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100%' }}>\r\n                    <Typography sx={{ color: 'black' }}>You don't have permission to edit this project.</Typography>\r\n                </Box>\r\n            </RootWrapper>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>Edit Project | OneDollarAI</title>\r\n            </Helmet>\r\n\r\n            <RootWrapper sx={{ overflowY: 'auto', pb: 2, scrollbarColor: '#888 #e3e3e3' }}>\r\n                <Container maxWidth=\"lg\">\r\n                    <Box sx={{ mt: 3, mb: 4 }}>\r\n                        {/* Breadcrumbs */}\r\n                        <Breadcrumbs sx={{ mb: 2 }}>\r\n                            <Link\r\n                                color=\"inherit\"\r\n                                href=\"/projects\"\r\n                                onClick={(e) => {\r\n                                    e.preventDefault();\r\n                                    navigate('/projects');\r\n                                }}\r\n                                sx={{ cursor: 'pointer', color: 'black' }}\r\n                            >\r\n                                Projects\r\n                            </Link>\r\n                            <Typography color=\"black\">\r\n                                Edit Project\r\n                            </Typography>\r\n                        </Breadcrumbs>\r\n\r\n                        <Typography variant=\"h2\" component=\"h1\" gutterBottom color=\"black\">\r\n                            Edit Project\r\n                        </Typography>\r\n                        <Typography variant=\"body1\" color=\"black\">\r\n                            Update your project information, content, and settings.\r\n                        </Typography>\r\n                    </Box>\r\n\r\n                    <Card>\r\n                        <CardContent>\r\n                            <ProjectForm\r\n                                project={project}\r\n                                onSubmit={handleUpdateProject}\r\n                                onCancel={handleCancel}\r\n                            />\r\n                        </CardContent>\r\n                    </Card>\r\n\r\n                </Container>\r\n            </RootWrapper>\r\n\r\n            <Snackbar\r\n                open={snackbar.open}\r\n                autoHideDuration={6000}\r\n                onClose={handleSnackbarClose}\r\n            >\r\n                <Alert\r\n                    onClose={handleSnackbarClose}\r\n                    severity={snackbar.severity}\r\n                    sx={{ width: '100%' }}\r\n                >\r\n                    {snackbar.message}\r\n                </Alert>\r\n            </Snackbar>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ProjectEdit; ","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport {\n    Box,\n    TextField,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n    FormControlLabel,\n    Switch,\n    Button,\n    Grid,\n    Typography,\n} from '@mui/material';\nimport {\n    Code as CodeIcon,\n    Description as DescriptionIcon\n} from '@mui/icons-material';\nimport CodeEditor from '../../../../components/CodeEditor';\n\nconst validationSchema = Yup.object({\n    title: Yup.string()\n        .min(3, 'Title must be at least 3 characters')\n        .max(200, 'Title must be less than 200 characters')\n        .required('Title is required'),\n    description: Yup.string()\n        .min(10, 'Description must be at least 10 characters')\n        .max(1000, 'Description must be less than 1000 characters')\n        .required('Description is required'),\n    project_type: Yup.string()\n        .oneOf(['code', 'text'], 'Invalid project type')\n        .required('Project type is required'),\n    language: Yup.string()\n        .when('project_type', {\n            is: 'code',\n            then: (schema) => schema.required('Language is required for code projects'),\n            otherwise: (schema) => schema.nullable()\n        }),\n    price: Yup.number()\n        .min(0, 'Price must be non-negative')\n        .max(9999.99, 'Price must be less than $10,000'),\n    price_per_use: Yup.number()\n        .min(0, 'Price per use must be non-negative')\n        .max(999.99, 'Price per use must be less than $1,000'),\n    is_public: Yup.boolean(),\n    content: Yup.string()\n        .min(1, 'Content is required')\n        .required('Content is required')\n});\n\n// Common styling for form components\nconst formFieldStyles = {\n    '& .MuiInputBase-root': {\n        color: 'black',\n        '& fieldset': {\n            borderColor: 'black'\n        },\n        '&:hover fieldset': {\n            borderColor: 'black'\n        },\n        '&.Mui-focused fieldset': {\n            borderColor: 'black'\n        }\n    },\n    '& .MuiInputLabel-root': {\n        color: 'black',\n        '&.Mui-focused': {\n            color: 'black'\n        }\n    },\n    '& .MuiFormHelperText-root': {\n        color: 'black'\n    }\n};\n\nconst ProjectForm = ({ project, onSubmit, onCancel }) => {\n\n    const formik = useFormik({\n        initialValues: {\n            title: project?.title || '',\n            description: project?.description || '',\n            project_type: project?.project_type || 'code',\n            language: project?.language || 'javascript',\n            price: project?.price || 0,\n            price_per_use: project?.price_per_use || 0.10,\n            is_public: project?.is_public || false,\n            content: project?.content || '',\n            usage_instructions: project?.usage_instructions || ''\n        },\n        validationSchema,\n        onSubmit: (values) => {\n            onSubmit(values);\n        }\n    });\n\n\n\n    const getProjectTypeIcon = (type) => {\n        switch (type) {\n            case 'code':\n                return <CodeIcon />;\n            case 'text':\n                return <DescriptionIcon />;\n            default:\n                return <CodeIcon />;\n        }\n    };\n\n    // Available programming languages\n    const programmingLanguages = [\n        { value: 'javascript', label: 'JavaScript' },\n        { value: 'python', label: 'Python' },\n        { value: 'java', label: 'Java' },\n        { value: 'php', label: 'PHP' },\n        { value: 'go', label: 'Go' },\n        { value: 'rust', label: 'Rust' },\n        { value: 'sql', label: 'SQL' }\n    ];\n\n    return (\n        <Box component=\"form\" onSubmit={formik.handleSubmit} sx={{ mt: 2 }}>\n            <Grid container spacing={3}>\n                {/* Basic Information */}\n                <Grid item xs={12}>\n                    <Typography variant=\"h6\" gutterBottom color=\"black\">\n                        Basic Information\n                    </Typography>\n                </Grid>\n\n                <Grid item xs={12} md={8}>\n                    <TextField\n                        fullWidth\n                        name=\"title\"\n                        label=\"Project Title\"\n                        value={formik.values.title}\n                        onChange={formik.handleChange}\n                        onBlur={formik.handleBlur}\n                        error={\n                            formik.touched.title && \n                            Boolean(formik.errors.title)\n                        }\n                        helperText={\n                            formik.touched.title && \n                            formik.errors.title\n                        }\n                        sx={formFieldStyles}\n                    />\n                </Grid>\n\n                <Grid item xs={12} md={4}>\n                    <FormControl fullWidth sx={formFieldStyles}>\n                        <InputLabel>Project Type</InputLabel>\n                        <Select\n                            name=\"project_type\"\n                            value={formik.values.project_type}\n                            onChange={formik.handleChange}\n                            onBlur={formik.handleBlur}\n                            error={\n                                formik.touched.project_type && \n                                Boolean(formik.errors.project_type)\n                            }\n                            label=\"Project Type\"\n                        >\n                            <MenuItem value=\"code\">\n                                <Box \n                                    sx={{ \n                                        display: 'flex', \n                                        alignItems: 'center', \n                                        gap: 1,\n                                        color: 'black'\n                                    }}\n                                >\n                                    <CodeIcon fontSize=\"small\" />\n                                    Code Project\n                                </Box>\n                            </MenuItem>\n                            <MenuItem value=\"text\">\n                                <Box \n                                    sx={{ \n                                        display: 'flex', \n                                        alignItems: 'center', \n                                        gap: 1,\n                                        color: 'black'\n                                    }}\n                                >\n                                    <DescriptionIcon fontSize=\"small\" />\n                                    Text Project\n                                </Box>\n                            </MenuItem>\n                        </Select>\n                    </FormControl>\n                </Grid>\n\n                {/* Language Selector for Code Projects */}\n                {formik.values.project_type === 'code' && (\n                    <Grid item xs={12} md={6}>\n                        <FormControl fullWidth sx={formFieldStyles}>\n                            <InputLabel>Programming Language</InputLabel>\n                            <Select\n                                name=\"language\"\n                                value={formik.values.language}\n                                onChange={formik.handleChange}\n                                onBlur={formik.handleBlur}\n                                error={\n                                    formik.touched.language && \n                                    Boolean(formik.errors.language)\n                                }\n                                label=\"Programming Language\"\n                            >\n                                {programmingLanguages.map((lang) => (\n                                    <MenuItem\n                                        key={lang.value}\n                                        value={lang.value}\n                                        sx={{ color: 'black !important',\n                                            '&:hover, &:active, &.active, &.Mui-selected': {\n                                                color: 'black !important'\n                                            }\n                                        }}\n                                    >\n                                        {lang.label}\n                                    </MenuItem>\n                                ))}\n                            </Select>\n                        </FormControl>\n                    </Grid>\n                )}\n\n                <Grid item xs={12}>\n                    <TextField\n                        fullWidth\n                        multiline\n                        rows={3}\n                        name=\"description\"\n                        label=\"Description\"\n                        value={formik.values.description}\n                        onChange={formik.handleChange}\n                        onBlur={formik.handleBlur}\n                        error={\n                            formik.touched.description && \n                            Boolean(formik.errors.description)\n                        }\n                        helperText={\n                            formik.touched.description && \n                            formik.errors.description\n                        }\n                        sx={formFieldStyles}\n                    />\n                </Grid>\n\n                {/* Pricing */}\n                <Grid item xs={12}>\n                    <Typography variant=\"h6\" gutterBottom color=\"black\">\n                        Pricing\n                    </Typography>\n                </Grid>\n\n                <Grid item xs={12} md={6}>\n                    <TextField\n                        fullWidth\n                        type=\"number\"\n                        name=\"price\"\n                        label=\"One-time Purchase Price ($)\"\n                        value={formik.values.price}\n                        onChange={formik.handleChange}\n                        onBlur={formik.handleBlur}\n                        error={\n                            formik.touched.price && \n                            Boolean(formik.errors.price)\n                        }\n                        helperText={\n                            formik.touched.price && \n                            formik.errors.price\n                        }\n                        inputProps={{ min: 0, step: 0.01 }}\n                        sx={formFieldStyles}\n                    />\n                </Grid>\n\n                <Grid item xs={12} md={6}>\n                    <TextField\n                        fullWidth\n                        type=\"number\"\n                        name=\"price_per_use\"\n                        label=\"Price per Use ($)\"\n                        value={formik.values.price_per_use}\n                        onChange={formik.handleChange}\n                        onBlur={formik.handleBlur}\n                        error={\n                            formik.touched.price_per_use && \n                            Boolean(formik.errors.price_per_use)\n                        }\n                        helperText={\n                            formik.touched.price_per_use && \n                            formik.errors.price_per_use\n                        }\n                        inputProps={{ min: 0, step: 0.01 }}\n                        sx={formFieldStyles}\n                    />\n                </Grid>\n\n                <Grid item xs={12}>\n                    <FormControlLabel\n                        control={\n                            <Switch\n                                name=\"is_public\"\n                                checked={formik.values.is_public}\n                                onChange={formik.handleChange}\n                                sx={{\n                                    '& .MuiSwitch-switchBase.Mui-checked': {\n                                        color: 'black',\n                                        '&:hover': {\n                                            backgroundColor: 'rgba(0, 0, 0, 0.08)'\n                                        }\n                                    },\n                                    '& .MuiSwitch-switchBase.Mui-checked + .MuiSwitch-track': {\n                                        backgroundColor: 'black'\n                                    }\n                                }}\n                            />\n                        }\n                        label=\"Make this project public\"\n                        sx={{ color: 'black' }}\n                    />\n                </Grid>\n\n\n\n                {/* Content */}\n                <Grid item xs={12}>\n                    <Typography variant=\"h6\" gutterBottom color=\"black\">\n                        Project Content\n                    </Typography>\n                </Grid>\n\n                <Grid item xs={12}>\n                    <Box sx={{ height: '300px', width: '100%' }}>\n                        <CodeEditor\n                            value={formik.values.content}\n                            onChange={(content) => formik.setFieldValue('content', content)}\n                            language={formik.values.project_type === 'code' ? formik.values.language : 'javascript'}\n                        />\n                        {formik.touched.content && Boolean(formik.errors.content) && (\n                            <Typography variant=\"body2\" color=\"error\">\n                                {formik.errors.content}\n                            </Typography>\n                        )}\n                    </Box>\n                </Grid>\n\n                <Grid item xs={12}>\n                    <TextField\n                        fullWidth\n                        multiline\n                        rows={3}\n                        name=\"usage_instructions\"\n                        label=\"Usage Instructions\"\n                        value={formik.values.usage_instructions}\n                        onChange={formik.handleChange}\n                        onBlur={formik.handleBlur}\n                        placeholder=\"Explain how to use this project...\"\n                        sx={formFieldStyles}\n                    />\n                </Grid>\n\n\n\n                {/* Action Buttons */}\n                <Grid item xs={12}>\n                    <Box \n                        sx={{ \n                            display: 'flex', \n                            gap: 2, \n                            justifyContent: 'flex-end' \n                        }}\n                    >\n                        {onCancel && (\n                            <Button \n                                variant=\"outlined\" \n                                onClick={onCancel}\n                                sx={{ \n                                    color: 'black', \n                                    borderColor: 'black',\n                                    '&:hover': {\n                                        borderColor: 'black',\n                                        backgroundColor: 'rgba(0, 0, 0, 0.04)'\n                                    }\n                                }}\n                            >\n                                Cancel\n                            </Button>\n                        )}\n                        <Button\n                            type=\"submit\"\n                            variant=\"contained\"\n                            disabled={formik.isSubmitting}\n                            sx={{ \n                                backgroundColor: 'black',\n                                color: 'white',\n                                '&:hover': {\n                                    backgroundColor: 'rgba(0, 0, 0, 0.8)'\n                                }\n                            }}\n                        >\n                            {project ? 'Update Project' : 'Create Project'}\n                        </Button>\n                    </Box>\n                </Grid>\n            </Grid>\n        </Box>\n    );\n};\n\nProjectForm.propTypes = {\n    project: PropTypes.shape({\n        title: PropTypes.string,\n        description: PropTypes.string,\n        project_type: PropTypes.oneOf(['code', 'text']),\n        language: PropTypes.string,\n        price: PropTypes.number,\n        price_per_use: PropTypes.number,\n        is_public: PropTypes.bool,\n        content: PropTypes.string,\n        usage_instructions: PropTypes.string\n    }),\n    onSubmit: PropTypes.func.isRequired,\n    onCancel: PropTypes.func\n};\n\nexport default ProjectForm; ","import React, { useEffect, useRef, useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { EditorView, basicSetup } from \"codemirror\";\nimport { EditorState } from \"@codemirror/state\";\nimport { oneDark } from \"@codemirror/theme-one-dark\";\nimport {\n    autocompletion,\n    completionKeymap,\n    closeBrackets,\n    closeBracketsKeymap\n} from \"@codemirror/autocomplete\";\nimport { defaultKeymap, history, historyKeymap } from \"@codemirror/commands\";\nimport {\n    defaultHighlightStyle,\n    syntaxHighlighting,\n    indentOnInput,\n    bracketMatching,\n    foldGutter,\n    foldKeymap\n} from \"@codemirror/language\";\nimport { lintKeymap } from \"@codemirror/lint\";\nimport { searchKeymap, highlightSelectionMatches } from \"@codemirror/search\";\nimport { go } from \"@codemirror/legacy-modes/mode/go\";\nimport { StreamLanguage } from \"@codemirror/stream-parser\";\nimport {\n    keymap,\n    highlightSpecialChars,\n    drawSelection,\n    highlightActiveLine,\n    dropCursor,\n    rectangularSelection,\n    crosshairCursor,\n    lineNumbers,\n    highlightActiveLineGutter\n} from \"@codemirror/view\";\nimport { java } from \"@codemirror/lang-java\";\nimport { javascript } from \"@codemirror/lang-javascript\";\nimport { php } from \"@codemirror/lang-php\";\nimport { python } from \"@codemirror/lang-python\";\nimport { rust } from \"@codemirror/lang-rust\";\nimport { sql } from \"@codemirror/lang-sql\";\n\nconst CodeEditor = ({ value, onChange, language = 'javascript', readOnly = false }) => {\n    const editor = useRef(null);\n    const editorView = useRef(null);\n\n    const getLanguageExtension = useCallback((lang) => {\n        switch (lang) {\n            case 'python':\n                return python();\n            case 'java':\n                return java();\n            case 'php':\n                return php();\n            case 'go':\n                return StreamLanguage.define(go);\n            case 'rust':\n                return rust();\n            case 'sql':\n                return sql();\n            default:\n                return javascript({ typescript: true });\n        }\n    }, []);\n\n    useEffect(() => {\n        if (!editor.current) return;\n\n        const updateListener = EditorView.updateListener.of((update) => {\n            if (update.docChanged) {\n                const doc = update.state.doc;\n                const content = doc.toString();\n                onChange?.(content);\n            }\n        });\n\n        const startState = EditorState.create({\n            doc: value,\n            extensions: [\n                basicSetup,\n                getLanguageExtension(language),\n                oneDark,\n                lineNumbers(),\n                foldGutter(),\n                highlightSpecialChars(),\n                history(),\n                drawSelection(),\n                dropCursor(),\n                EditorState.allowMultipleSelections.of(true),\n                indentOnInput(),\n                syntaxHighlighting(defaultHighlightStyle),\n                bracketMatching(),\n                closeBrackets(),\n                autocompletion(),\n                rectangularSelection(),\n                crosshairCursor(),\n                highlightActiveLine(),\n                highlightActiveLineGutter(),\n                highlightSelectionMatches(),\n                updateListener,\n                EditorView.lineWrapping,\n                keymap.of([\n                    ...closeBracketsKeymap,\n                    ...defaultKeymap,\n                    ...searchKeymap,\n                    ...historyKeymap,\n                    ...foldKeymap,\n                    ...completionKeymap,\n                    ...lintKeymap\n                ])\n            ],\n        });\n\n        editorView.current = new EditorView({\n            state: startState,\n            parent: editor.current,\n        });\n\n        const cmEditor = editor.current?.querySelector('.cm-editor');\n        if (cmEditor) {\n            cmEditor.style.height = '100%';\n        }\n\n        return () => {\n            editorView.current?.destroy();\n        };\n    }, [getLanguageExtension, language]);\n\n    return (\n        <div\n            ref={editor}\n            style={{\n                border: \"1px solid #ccc\",\n                flexGrow: 1,\n                height: '100%',\n                maxHeight: '100%',\n                overflow: 'auto'\n            }}\n        />\n    );\n};\n\nCodeEditor.propTypes = {\n    value: PropTypes.string,\n    onChange: PropTypes.func,\n    language: PropTypes.string,\n    readOnly: PropTypes.bool\n};\n\nCodeEditor.defaultProps = {\n    value: '',\n    language: 'javascript',\n    readOnly: false\n};\n\nexport default CodeEditor;","import axios from 'axios';\r\nimport Cookies from 'js-cookie';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\r\n\r\n// Function to fetch CSRF token if needed\r\nconst fetchCSRFToken = async () => {\r\n  try {\r\n    // Check if CSRF token already exists\r\n    if (!Cookies.get('csrftoken')) {\r\n      console.log('No CSRF token found, fetching a new one...');\r\n      const response = await axios.get(`${API_BASE_URL}/api/get_csrf_token/`, {\r\n        withCredentials: true\r\n      });\r\n      if (response.status === 200) {\r\n        const token = Cookies.get('csrftoken');\r\n        console.log('CSRF token fetched successfully:', token ? 'Token received' : 'No token set');\r\n      } else {\r\n        console.warn('Failed to fetch CSRF token:', response.status);\r\n      }\r\n    } else {\r\n      console.log('CSRF token already exists:', Cookies.get('csrftoken') ? 'Token exists' : 'No token found');\r\n    }\r\n  } catch (error) {\r\n    console.error('Error fetching CSRF token:', error);\r\n    // Continue without CSRF token - backend will handle exempt views\r\n  }\r\n};\r\n\r\n// Create axios instance with default config\r\nconst api = axios.create({\r\n  baseURL: `${API_BASE_URL}/api`,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n  withCredentials: true, // Enable sending cookies with requests\r\n});\r\n\r\n// Add request interceptor to include auth token and CSRF token\r\napi.interceptors.request.use(\r\n  async (config) => {\r\n    // Fetch CSRF token if needed\r\n    await fetchCSRFToken();\r\n    \r\n    const token = localStorage.getItem('accessToken');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    \r\n    // Add CSRF token to headers\r\n    const csrfToken = Cookies.get('csrftoken');\r\n    if (csrfToken) {\r\n      config.headers['X-CSRFToken'] = csrfToken;\r\n    }\r\n    \r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add response interceptor to handle errors\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      // Handle unauthorized access\r\n      localStorage.removeItem('accessToken');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const projectService = {\r\n  // Get all projects\r\n  getAllProjects: async (params = {}) => {\r\n    const response = await api.get('/projects/', { params });\r\n    return response;\r\n  },\r\n\r\n  // Get user's projects\r\n  getMyProjects: async (params = {}) => {\r\n    const response = await api.get('/projects/my_projects/', { params });\r\n    return response;\r\n  },\r\n\r\n  // Enhanced search projects\r\n  searchProjects: async (query, params = {}) => {\r\n    const response = await api.get('/projects/search/', {\r\n      params: { q: query, ...params }\r\n    });\r\n    return response;\r\n  },\r\n\r\n  // Get single project\r\n  getProject: async (projectId) => {\r\n    const response = await api.get(`/projects/${projectId}/`);\r\n    return response;\r\n  },\r\n\r\n  // Create new project\r\n  createProject: async (projectData) => {\r\n    const response = await api.post('/projects/', projectData);\r\n    return response;\r\n  },\r\n\r\n  // Update project\r\n  updateProject: async (projectId, projectData) => {\r\n    const response = await api.put(`/projects/${projectId}/`, projectData);\r\n    return response;\r\n  },\r\n\r\n  // Delete project\r\n  deleteProject: async (projectId) => {\r\n    const response = await api.delete(`/projects/${projectId}/`);\r\n    return response;\r\n  },\r\n\r\n  // Run project\r\n  runProject: async (projectId, inputData = {}) => {\r\n    const response = await api.post(`/projects/${projectId}/run/`, inputData);\r\n    return response;\r\n  },\r\n\r\n  // Buy project\r\n  buyProject: async (projectId, purchaseData = {}) => {\r\n    const response = await api.post(`/projects/${projectId}/buy/`, purchaseData);\r\n    return response;\r\n  },\r\n\r\n  // Track project view\r\n  trackProjectView: async (projectId) => {\r\n    const response = await api.post(`/projects/${projectId}/view/`);\r\n    return response;\r\n  },\r\n\r\n  // Get project analytics\r\n  getProjectAnalytics: async (projectId) => {\r\n    const response = await api.get(`/projects/${projectId}/analytics/`);\r\n    return response;\r\n  },\r\n\r\n  // Get collaborators\r\n  getCollaborators: async (projectId) => {\r\n    const response = await api.get(`/projects/${projectId}/collaborators/`);\r\n    return response;\r\n  },\r\n\r\n  // Add collaborator\r\n  addCollaborator: async (projectId, collaboratorData) => {\r\n    const response = await api.post(`/projects/${projectId}/add_collaborator/`, collaboratorData);\r\n    return response;\r\n  },\r\n\r\n  // Remove collaborator\r\n  removeCollaborator: async (projectId, userId) => {\r\n    const response = await api.post(`/projects/${projectId}/remove_collaborator/`, { user_id: userId });\r\n    return response;\r\n  },\r\n\r\n  // Submit version for review (for collaborators)\r\n  submitVersionForReview: async (projectId, versionData) => {\r\n    const response = await api.post(`/projects/${projectId}/submit_version_for_review/`, versionData);\r\n    return response;\r\n  },\r\n\r\n  // Get pending versions for review\r\n  getPendingVersions: async (projectId) => {\r\n    const response = await api.get(`/projects/${projectId}/pending_versions/`);\r\n    return response;\r\n  },\r\n\r\n  // Promote version to public\r\n  promoteVersionToPublic: async (projectId, versionId) => {\r\n    const response = await api.post(`/projects/${projectId}/versions/${versionId}/promote_to_public/`);\r\n    return response;\r\n  },\r\n\r\n  // Get project versions\r\n  getProjectVersions: async (projectId) => {\r\n    const response = await api.get(`/projects/${projectId}/versions/`);\r\n    return response;\r\n  },\r\n\r\n  // Create project version\r\n  createProjectVersion: async (projectId, versionData) => {\r\n    const response = await api.post(`/projects/${projectId}/versions/`, versionData);\r\n    return response;\r\n  },\r\n\r\n  // Update project version\r\n  updateProjectVersion: async (projectId, versionId, versionData) => {\r\n    const response = await api.put(`/projects/${projectId}/versions/${versionId}/`, versionData);\r\n    return response;\r\n  },\r\n\r\n  // Delete project version\r\n  deleteProjectVersion: async (projectId, versionId) => {\r\n    const response = await api.delete(`/projects/${projectId}/versions/${versionId}/`);\r\n    return response;\r\n  },\r\n\r\n  // Approve project version\r\n  approveProjectVersion: async (projectId, versionId) => {\r\n    const response = await api.post(`/projects/${projectId}/versions/${versionId}/approve/`);\r\n    return response;\r\n  },\r\n\r\n  // Reject project version\r\n  rejectProjectVersion: async (projectId, versionId, reason = '') => {\r\n    const response = await api.post(`/projects/${projectId}/versions/${versionId}/reject/`, { reason });\r\n    return response;\r\n  },\r\n\r\n  // Analyze computing resources\r\n  analyzeComputingResources: async (projectId, code) => {\r\n    const response = await api.post(`/projects/${projectId}/computing-resources/`, { code });\r\n    return response;\r\n  },\r\n\r\n  // Get computing resources\r\n  getComputingResources: async (projectId) => {\r\n    const response = await api.get(`/projects/${projectId}/computing-resources/`);\r\n    return response;\r\n  },\r\n\r\n  // Update computing resources\r\n  updateComputingResources: async (projectId, resourceId, resourceData) => {\r\n    const response = await api.put(`/projects/${projectId}/computing-resources/${resourceId}/`, resourceData);\r\n    return response;\r\n  },\r\n\r\n  // Admin functions\r\n  // Get all projects for admin\r\n  getAllProjectsAdmin: async (params = {}) => {\r\n    const response = await api.get('/projects/admin/projects/', { params });\r\n    return response;\r\n  },\r\n\r\n  // Get admin analytics\r\n  getAdminAnalytics: async () => {\r\n    const response = await api.get('/projects/admin/projects/analytics/');\r\n    return response;\r\n  },\r\n\r\n  // Approve project\r\n  approveProject: async (projectId) => {\r\n    const response = await api.post(`/projects/admin/projects/${projectId}/approve/`);\r\n    return response;\r\n  },\r\n\r\n  // Reject project\r\n  rejectProject: async (projectId, reason = '') => {\r\n    const response = await api.post(`/projects/admin/projects/${projectId}/reject/`, { reason });\r\n    return response;\r\n  },\r\n\r\n  // Get project usage statistics\r\n  getProjectUsage: async (projectId) => {\r\n    const response = await api.get(`/projects/${projectId}/usage/`);\r\n    return response;\r\n  },\r\n\r\n  // Get user's project usage\r\n  getUserProjectUsage: async (projectId) => {\r\n    const response = await api.get(`/projects/${projectId}/user_usage/`);\r\n    return response;\r\n  },\r\n\r\n  // Get user usage for a specific project\r\n  getUserUsage: async (projectId) => {\r\n    const response = await api.get(`/projects/${projectId}/user_usage/`);\r\n    return response;\r\n  },\r\n\r\n  // Get pending versions for review\r\n  getPendingVersions: async (projectId) => {\r\n    const response = await api.get(`/projects/${projectId}/pending_versions/`);\r\n    return response;\r\n  },\r\n\r\n  // Approve a version\r\n  approveVersion: async (projectId, versionId) => {\r\n    const response = await api.post(`/projects/${projectId}/versions/${versionId}/approve/`);\r\n    return response;\r\n  },\r\n\r\n  // Reject a version\r\n  rejectVersion: async (projectId, versionId, reason) => {\r\n    const response = await api.post(`/projects/${projectId}/versions/${versionId}/reject/`, { reason });\r\n    return response;\r\n  },\r\n\r\n  // Submit a new version for review\r\n  submitVersionForReview: async (projectId, versionData) => {\r\n    const response = await api.post(`/projects/${projectId}/submit_version_for_review/`, versionData);\r\n    return response;\r\n  },\r\n\r\n  // Submit project for review\r\n  submitForReview: async (projectId, reviewData) => {\r\n    const response = await api.post(`/projects/${projectId}/submit_for_review/`, reviewData);\r\n    return response;\r\n  },\r\n\r\n  // Get public project by ID\r\n  getPublicProject: async (projectId) => {\r\n    const response = await api.get(`/projects/public/${projectId}/`);\r\n    return response;\r\n  },\r\n\r\n  // Get private project by URL\r\n  getPrivateProject: async (privateUrl) => {\r\n    const response = await api.get(`/projects/private/${privateUrl}/`);\r\n    return response;\r\n  },\r\n\r\n  // Execute code using backend endpoint\r\n  executeCode: async (code, language) => {\r\n    const response = await api.post('/projects/execute-code/', {\r\n      code: code,\r\n      language: language\r\n    });\r\n    return response;\r\n  },\r\n\r\n  // Enhanced search with filters\r\n  advancedSearch: async (filters = {}) => {\r\n    const {\r\n      query = '',\r\n      projectType = '',\r\n      language = '',\r\n      minPrice = '',\r\n      maxPrice = '',\r\n      sortBy = 'created_at',\r\n      sortOrder = 'desc'\r\n    } = filters;\r\n\r\n    const params = {\r\n      q: query,\r\n      type: projectType,\r\n      language: language,\r\n      min_price: minPrice,\r\n      max_price: maxPrice,\r\n      sort_by: sortBy,\r\n      sort_order: sortOrder\r\n    };\r\n\r\n    const response = await api.get('/projects/search/', { params });\r\n    return response;\r\n  }\r\n};\r\n\r\nexport default projectService;"],"names":["RootWrapper","styled","Box","_ref","theme","display","width","flexDirection","height","header","mobileHeight","breakpoints","up","ProjectEdit","_project$collaborator","projectId","useParams","navigate","useNavigate","user","useAuth","project","setProject","useState","loading","setLoading","error","setError","snackbar","setSnackbar","open","message","severity","useEffect","loadProject","async","response","projectService","getProject","data","console","handleSnackbarClose","_jsx","children","sx","justifyContent","alignItems","Typography","color","isOwner","owner","id","isCollaborator","collaborators","some","collab","can_edit","_jsxs","_Fragment","Helmet","overflowY","pb","scrollbarColor","Container","maxWidth","mt","mb","Breadcrumbs","Link","href","onClick","e","preventDefault","cursor","variant","component","gutterBottom","Card","CardContent","ProjectForm","onSubmit","updateProject","projectData","setTimeout","onCancel","handleCancel","Snackbar","autoHideDuration","onClose","Alert","validationSchema","Yup","title","min","max","required","description","project_type","oneOf","language","when","is","then","schema","otherwise","nullable","price","price_per_use","is_public","content","formFieldStyles","borderColor","formik","useFormik","initialValues","usage_instructions","values","handleSubmit","Grid","container","spacing","item","xs","md","TextField","fullWidth","name","label","value","onChange","handleChange","onBlur","handleBlur","touched","Boolean","errors","helperText","FormControl","InputLabel","Select","MenuItem","gap","CodeIcon","fontSize","DescriptionIcon","map","lang","multiline","rows","type","inputProps","step","FormControlLabel","control","Switch","checked","backgroundColor","CodeEditor","setFieldValue","placeholder","Button","disabled","isSubmitting","readOnly","editor","useRef","editorView","getLanguageExtension","useCallback","python","java","php","StreamLanguage","define","go","rust","sql","javascript","typescript","_editor$current","current","updateListener","EditorView","of","update","docChanged","state","doc","toString","startState","EditorState","create","extensions","basicSetup","oneDark","lineNumbers","foldGutter","highlightSpecialChars","history","drawSelection","dropCursor","allowMultipleSelections","indentOnInput","syntaxHighlighting","defaultHighlightStyle","bracketMatching","closeBrackets","autocompletion","rectangularSelection","crosshairCursor","highlightActiveLine","highlightActiveLineGutter","highlightSelectionMatches","lineWrapping","keymap","closeBracketsKeymap","defaultKeymap","searchKeymap","historyKeymap","foldKeymap","completionKeymap","lintKeymap","parent","cmEditor","querySelector","style","_editorView$current","destroy","ref","border","flexGrow","maxHeight","overflow","defaultProps","API_BASE_URL","process","api","axios","baseURL","headers","withCredentials","interceptors","request","use","Cookies","get","log","status","token","warn","fetchCSRFToken","localStorage","getItem","config","Authorization","csrfToken","Promise","reject","_error$response","removeItem","window","location","getAllProjects","params","arguments","length","undefined","getMyProjects","searchProjects","query","q","createProject","post","put","deleteProject","delete","runProject","inputData","buyProject","purchaseData","trackProjectView","getProjectAnalytics","getCollaborators","addCollaborator","collaboratorData","removeCollaborator","userId","user_id","submitVersionForReview","versionData","getPendingVersions","promoteVersionToPublic","versionId","getProjectVersions","createProjectVersion","updateProjectVersion","deleteProjectVersion","approveProjectVersion","rejectProjectVersion","reason","analyzeComputingResources","code","getComputingResources","updateComputingResources","resourceId","resourceData","getAllProjectsAdmin","getAdminAnalytics","approveProject","rejectProject","getProjectUsage","getUserProjectUsage","getUserUsage","approveVersion","rejectVersion","submitForReview","reviewData","getPublicProject","getPrivateProject","privateUrl","executeCode","advancedSearch","filters","projectType","minPrice","maxPrice","sortBy","sortOrder","min_price","max_price","sort_by","sort_order"],"sourceRoot":""}