{"version":3,"file":"static/js/845.14f548ac.chunk.js","mappings":"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","sources":["content/applications/Projects/components/ProjectForm.js","components/CodeEditor.js","content/applications/Projects/components/ProjectCard.js","content/applications/Projects/index.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport {\n    Box,\n    TextField,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n    FormControlLabel,\n    Switch,\n    Button,\n    Grid,\n    Typography,\n} from '@mui/material';\nimport {\n    Code as CodeIcon,\n    Description as DescriptionIcon\n} from '@mui/icons-material';\nimport CodeEditor from '../../../../components/CodeEditor';\n\nconst validationSchema = Yup.object({\n    title: Yup.string()\n        .min(3, 'Title must be at least 3 characters')\n        .max(200, 'Title must be less than 200 characters')\n        .required('Title is required'),\n    description: Yup.string()\n        .min(10, 'Description must be at least 10 characters')\n        .max(1000, 'Description must be less than 1000 characters')\n        .required('Description is required'),\n    project_type: Yup.string()\n        .oneOf(['code', 'text'], 'Invalid project type')\n        .required('Project type is required'),\n    language: Yup.string()\n        .when('project_type', {\n            is: 'code',\n            then: (schema) => schema.required('Language is required for code projects'),\n            otherwise: (schema) => schema.nullable()\n        }),\n    price: Yup.number()\n        .min(0, 'Price must be non-negative')\n        .max(9999.99, 'Price must be less than $10,000'),\n    price_per_use: Yup.number()\n        .min(0, 'Price per use must be non-negative')\n        .max(999.99, 'Price per use must be less than $1,000'),\n    is_public: Yup.boolean(),\n    content: Yup.string()\n        .min(1, 'Content is required')\n        .required('Content is required')\n});\n\n// Common styling for form components\nconst formFieldStyles = {\n    '& .MuiInputBase-root': {\n        color: 'black',\n        '& fieldset': {\n            borderColor: 'black'\n        },\n        '&:hover fieldset': {\n            borderColor: 'black'\n        },\n        '&.Mui-focused fieldset': {\n            borderColor: 'black'\n        }\n    },\n    '& .MuiInputLabel-root': {\n        color: 'black',\n        '&.Mui-focused': {\n            color: 'black'\n        }\n    },\n    '& .MuiFormHelperText-root': {\n        color: 'black'\n    }\n};\n\nconst ProjectForm = ({ project, onSubmit, onCancel }) => {\n\n    const formik = useFormik({\n        initialValues: {\n            title: project?.title || '',\n            description: project?.description || '',\n            project_type: project?.project_type || 'code',\n            language: project?.language || 'javascript',\n            price: project?.price || 0,\n            price_per_use: project?.price_per_use || 0.10,\n            is_public: project?.is_public || false,\n            content: project?.content || '',\n            usage_instructions: project?.usage_instructions || ''\n        },\n        validationSchema,\n        onSubmit: (values) => {\n            onSubmit(values);\n        }\n    });\n\n\n\n    const getProjectTypeIcon = (type) => {\n        switch (type) {\n            case 'code':\n                return <CodeIcon />;\n            case 'text':\n                return <DescriptionIcon />;\n            default:\n                return <CodeIcon />;\n        }\n    };\n\n    // Available programming languages\n    const programmingLanguages = [\n        { value: 'javascript', label: 'JavaScript' },\n        { value: 'python', label: 'Python' },\n        { value: 'java', label: 'Java' },\n        { value: 'php', label: 'PHP' },\n        { value: 'go', label: 'Go' },\n        { value: 'rust', label: 'Rust' },\n        { value: 'sql', label: 'SQL' }\n    ];\n\n    return (\n        <Box component=\"form\" onSubmit={formik.handleSubmit} sx={{ mt: 2 }}>\n            <Grid container spacing={3}>\n                {/* Basic Information */}\n                <Grid item xs={12}>\n                    <Typography variant=\"h6\" gutterBottom color=\"black\">\n                        Basic Information\n                    </Typography>\n                </Grid>\n\n                <Grid item xs={12} md={8}>\n                    <TextField\n                        fullWidth\n                        name=\"title\"\n                        label=\"Project Title\"\n                        value={formik.values.title}\n                        onChange={formik.handleChange}\n                        onBlur={formik.handleBlur}\n                        error={\n                            formik.touched.title && \n                            Boolean(formik.errors.title)\n                        }\n                        helperText={\n                            formik.touched.title && \n                            formik.errors.title\n                        }\n                        sx={formFieldStyles}\n                    />\n                </Grid>\n\n                <Grid item xs={12} md={4}>\n                    <FormControl fullWidth sx={formFieldStyles}>\n                        <InputLabel>Project Type</InputLabel>\n                        <Select\n                            name=\"project_type\"\n                            value={formik.values.project_type}\n                            onChange={formik.handleChange}\n                            onBlur={formik.handleBlur}\n                            error={\n                                formik.touched.project_type && \n                                Boolean(formik.errors.project_type)\n                            }\n                            label=\"Project Type\"\n                        >\n                            <MenuItem value=\"code\">\n                                <Box \n                                    sx={{ \n                                        display: 'flex', \n                                        alignItems: 'center', \n                                        gap: 1,\n                                        color: 'black'\n                                    }}\n                                >\n                                    <CodeIcon fontSize=\"small\" />\n                                    Code Project\n                                </Box>\n                            </MenuItem>\n                            <MenuItem value=\"text\">\n                                <Box \n                                    sx={{ \n                                        display: 'flex', \n                                        alignItems: 'center', \n                                        gap: 1,\n                                        color: 'black'\n                                    }}\n                                >\n                                    <DescriptionIcon fontSize=\"small\" />\n                                    Text Project\n                                </Box>\n                            </MenuItem>\n                        </Select>\n                    </FormControl>\n                </Grid>\n\n                {/* Language Selector for Code Projects */}\n                {formik.values.project_type === 'code' && (\n                    <Grid item xs={12} md={6}>\n                        <FormControl fullWidth sx={formFieldStyles}>\n                            <InputLabel>Programming Language</InputLabel>\n                            <Select\n                                name=\"language\"\n                                value={formik.values.language}\n                                onChange={formik.handleChange}\n                                onBlur={formik.handleBlur}\n                                error={\n                                    formik.touched.language && \n                                    Boolean(formik.errors.language)\n                                }\n                                label=\"Programming Language\"\n                            >\n                                {programmingLanguages.map((lang) => (\n                                    <MenuItem\n                                        key={lang.value}\n                                        value={lang.value}\n                                        sx={{ color: 'black !important',\n                                            '&:hover, &:active, &.active, &.Mui-selected': {\n                                                color: 'black !important'\n                                            }\n                                        }}\n                                    >\n                                        {lang.label}\n                                    </MenuItem>\n                                ))}\n                            </Select>\n                        </FormControl>\n                    </Grid>\n                )}\n\n                <Grid item xs={12}>\n                    <TextField\n                        fullWidth\n                        multiline\n                        rows={3}\n                        name=\"description\"\n                        label=\"Description\"\n                        value={formik.values.description}\n                        onChange={formik.handleChange}\n                        onBlur={formik.handleBlur}\n                        error={\n                            formik.touched.description && \n                            Boolean(formik.errors.description)\n                        }\n                        helperText={\n                            formik.touched.description && \n                            formik.errors.description\n                        }\n                        sx={formFieldStyles}\n                    />\n                </Grid>\n\n                {/* Pricing */}\n                <Grid item xs={12}>\n                    <Typography variant=\"h6\" gutterBottom color=\"black\">\n                        Pricing\n                    </Typography>\n                </Grid>\n\n                <Grid item xs={12} md={6}>\n                    <TextField\n                        fullWidth\n                        type=\"number\"\n                        name=\"price\"\n                        label=\"One-time Purchase Price ($)\"\n                        value={formik.values.price}\n                        onChange={formik.handleChange}\n                        onBlur={formik.handleBlur}\n                        error={\n                            formik.touched.price && \n                            Boolean(formik.errors.price)\n                        }\n                        helperText={\n                            formik.touched.price && \n                            formik.errors.price\n                        }\n                        inputProps={{ min: 0, step: 0.01 }}\n                        sx={formFieldStyles}\n                    />\n                </Grid>\n\n                <Grid item xs={12} md={6}>\n                    <TextField\n                        fullWidth\n                        type=\"number\"\n                        name=\"price_per_use\"\n                        label=\"Price per Use ($)\"\n                        value={formik.values.price_per_use}\n                        onChange={formik.handleChange}\n                        onBlur={formik.handleBlur}\n                        error={\n                            formik.touched.price_per_use && \n                            Boolean(formik.errors.price_per_use)\n                        }\n                        helperText={\n                            formik.touched.price_per_use && \n                            formik.errors.price_per_use\n                        }\n                        inputProps={{ min: 0, step: 0.01 }}\n                        sx={formFieldStyles}\n                    />\n                </Grid>\n\n                <Grid item xs={12}>\n                    <FormControlLabel\n                        control={\n                            <Switch\n                                name=\"is_public\"\n                                checked={formik.values.is_public}\n                                onChange={formik.handleChange}\n                                sx={{\n                                    '& .MuiSwitch-switchBase.Mui-checked': {\n                                        color: 'black',\n                                        '&:hover': {\n                                            backgroundColor: 'rgba(0, 0, 0, 0.08)'\n                                        }\n                                    },\n                                    '& .MuiSwitch-switchBase.Mui-checked + .MuiSwitch-track': {\n                                        backgroundColor: 'black'\n                                    }\n                                }}\n                            />\n                        }\n                        label=\"Make this project public\"\n                        sx={{ color: 'black' }}\n                    />\n                </Grid>\n\n\n\n                {/* Content */}\n                <Grid item xs={12}>\n                    <Typography variant=\"h6\" gutterBottom color=\"black\">\n                        Project Content\n                    </Typography>\n                </Grid>\n\n                <Grid item xs={12}>\n                    <Box sx={{ height: '300px', width: '100%' }}>\n                        <CodeEditor\n                            value={formik.values.content}\n                            onChange={(content) => formik.setFieldValue('content', content)}\n                            language={formik.values.project_type === 'code' ? formik.values.language : 'javascript'}\n                        />\n                        {formik.touched.content && Boolean(formik.errors.content) && (\n                            <Typography variant=\"body2\" color=\"error\">\n                                {formik.errors.content}\n                            </Typography>\n                        )}\n                    </Box>\n                </Grid>\n\n                <Grid item xs={12}>\n                    <TextField\n                        fullWidth\n                        multiline\n                        rows={3}\n                        name=\"usage_instructions\"\n                        label=\"Usage Instructions\"\n                        value={formik.values.usage_instructions}\n                        onChange={formik.handleChange}\n                        onBlur={formik.handleBlur}\n                        placeholder=\"Explain how to use this project...\"\n                        sx={formFieldStyles}\n                    />\n                </Grid>\n\n\n\n                {/* Action Buttons */}\n                <Grid item xs={12}>\n                    <Box \n                        sx={{ \n                            display: 'flex', \n                            gap: 2, \n                            justifyContent: 'flex-end' \n                        }}\n                    >\n                        {onCancel && (\n                            <Button \n                                variant=\"outlined\" \n                                onClick={onCancel}\n                                sx={{ \n                                    color: 'black', \n                                    borderColor: 'black',\n                                    '&:hover': {\n                                        borderColor: 'black',\n                                        backgroundColor: 'rgba(0, 0, 0, 0.04)'\n                                    }\n                                }}\n                            >\n                                Cancel\n                            </Button>\n                        )}\n                        <Button\n                            type=\"submit\"\n                            variant=\"contained\"\n                            disabled={formik.isSubmitting}\n                            sx={{ \n                                backgroundColor: 'black',\n                                color: 'white',\n                                '&:hover': {\n                                    backgroundColor: 'rgba(0, 0, 0, 0.8)'\n                                }\n                            }}\n                        >\n                            {project ? 'Update Project' : 'Create Project'}\n                        </Button>\n                    </Box>\n                </Grid>\n            </Grid>\n        </Box>\n    );\n};\n\nProjectForm.propTypes = {\n    project: PropTypes.shape({\n        title: PropTypes.string,\n        description: PropTypes.string,\n        project_type: PropTypes.oneOf(['code', 'text']),\n        language: PropTypes.string,\n        price: PropTypes.number,\n        price_per_use: PropTypes.number,\n        is_public: PropTypes.bool,\n        content: PropTypes.string,\n        usage_instructions: PropTypes.string\n    }),\n    onSubmit: PropTypes.func.isRequired,\n    onCancel: PropTypes.func\n};\n\nexport default ProjectForm; ","import React, { useEffect, useRef, useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { EditorView, basicSetup } from \"codemirror\";\nimport { EditorState } from \"@codemirror/state\";\nimport { oneDark } from \"@codemirror/theme-one-dark\";\nimport {\n    autocompletion,\n    completionKeymap,\n    closeBrackets,\n    closeBracketsKeymap\n} from \"@codemirror/autocomplete\";\nimport { defaultKeymap, history, historyKeymap } from \"@codemirror/commands\";\nimport {\n    defaultHighlightStyle,\n    syntaxHighlighting,\n    indentOnInput,\n    bracketMatching,\n    foldGutter,\n    foldKeymap\n} from \"@codemirror/language\";\nimport { lintKeymap } from \"@codemirror/lint\";\nimport { searchKeymap, highlightSelectionMatches } from \"@codemirror/search\";\nimport { go } from \"@codemirror/legacy-modes/mode/go\";\nimport { StreamLanguage } from \"@codemirror/stream-parser\";\nimport {\n    keymap,\n    highlightSpecialChars,\n    drawSelection,\n    highlightActiveLine,\n    dropCursor,\n    rectangularSelection,\n    crosshairCursor,\n    lineNumbers,\n    highlightActiveLineGutter\n} from \"@codemirror/view\";\nimport { java } from \"@codemirror/lang-java\";\nimport { javascript } from \"@codemirror/lang-javascript\";\nimport { php } from \"@codemirror/lang-php\";\nimport { python } from \"@codemirror/lang-python\";\nimport { rust } from \"@codemirror/lang-rust\";\nimport { sql } from \"@codemirror/lang-sql\";\n\nconst CodeEditor = ({ value, onChange, language = 'javascript', readOnly = false }) => {\n    const editor = useRef(null);\n    const editorView = useRef(null);\n\n    const getLanguageExtension = useCallback((lang) => {\n        switch (lang) {\n            case 'python':\n                return python();\n            case 'java':\n                return java();\n            case 'php':\n                return php();\n            case 'go':\n                return StreamLanguage.define(go);\n            case 'rust':\n                return rust();\n            case 'sql':\n                return sql();\n            default:\n                return javascript({ typescript: true });\n        }\n    }, []);\n\n    useEffect(() => {\n        if (!editor.current) return;\n\n        const updateListener = EditorView.updateListener.of((update) => {\n            if (update.docChanged) {\n                const doc = update.state.doc;\n                const content = doc.toString();\n                onChange?.(content);\n            }\n        });\n\n        const startState = EditorState.create({\n            doc: value,\n            extensions: [\n                basicSetup,\n                getLanguageExtension(language),\n                oneDark,\n                lineNumbers(),\n                foldGutter(),\n                highlightSpecialChars(),\n                history(),\n                drawSelection(),\n                dropCursor(),\n                EditorState.allowMultipleSelections.of(true),\n                indentOnInput(),\n                syntaxHighlighting(defaultHighlightStyle),\n                bracketMatching(),\n                closeBrackets(),\n                autocompletion(),\n                rectangularSelection(),\n                crosshairCursor(),\n                highlightActiveLine(),\n                highlightActiveLineGutter(),\n                highlightSelectionMatches(),\n                updateListener,\n                EditorView.lineWrapping,\n                keymap.of([\n                    ...closeBracketsKeymap,\n                    ...defaultKeymap,\n                    ...searchKeymap,\n                    ...historyKeymap,\n                    ...foldKeymap,\n                    ...completionKeymap,\n                    ...lintKeymap\n                ])\n            ],\n        });\n\n        editorView.current = new EditorView({\n            state: startState,\n            parent: editor.current,\n        });\n\n        const cmEditor = editor.current?.querySelector('.cm-editor');\n        if (cmEditor) {\n            cmEditor.style.height = '100%';\n        }\n\n        return () => {\n            editorView.current?.destroy();\n        };\n    }, [getLanguageExtension, language]);\n\n    return (\n        <div\n            ref={editor}\n            style={{\n                border: \"1px solid #ccc\",\n                flexGrow: 1,\n                height: '100%',\n                maxHeight: '100%',\n                overflow: 'auto'\n            }}\n        />\n    );\n};\n\nCodeEditor.propTypes = {\n    value: PropTypes.string,\n    onChange: PropTypes.func,\n    language: PropTypes.string,\n    readOnly: PropTypes.bool\n};\n\nCodeEditor.defaultProps = {\n    value: '',\n    language: 'javascript',\n    readOnly: false\n};\n\nexport default CodeEditor;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n    Avatar,\r\n    Box,\r\n    Button,\r\n    Card,\r\n    CardActions,\r\n    CardContent,\r\n    Chip,\r\n    Divider,\r\n    IconButton,\r\n    Tooltip,\r\n    Typography,\r\n    Menu,\r\n    MenuItem,\r\n    ListItemIcon,\r\n    ListItemText\r\n} from '@mui/material';\r\nimport {\r\n    Code as CodeIcon,\r\n    Delete as DeleteIcon,\r\n    Description as DescriptionIcon,\r\n    Edit as EditIcon,\r\n    Lock as LockIcon,\r\n    Person as PersonIcon,\r\n    PlayArrow as PlayIcon,\r\n    Public as PublicIcon,\r\n    ShoppingCart as BuyIcon,\r\n    Star as StarIcon,\r\n    Visibility as ViewIcon,\r\n    TrendingUp as TrendingIcon,\r\n    MonetizationOn as RevenueIcon,\r\n    Group as CollaborationIcon,\r\n    MoreVert as MoreIcon,\r\n    Settings as SettingsIcon,\r\n    Analytics as AnalyticsIcon,\r\n    Share as ShareIcon,\r\n    Download as DownloadIcon,\r\n    Upload as UploadIcon\r\n} from '@mui/icons-material';\r\nimport { formatDistanceToNow } from 'date-fns';\r\nimport { useState } from 'react';\r\n\r\nconst ProjectCard = ({ \r\n    project, \r\n    onView, \r\n    onEdit, \r\n    onDelete, \r\n    onRun, \r\n    onBuy, \r\n    onViewPublic,\r\n    onCollaboration,\r\n    isOwner \r\n}) => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const handleMenuOpen = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleMenuClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const handleMenuAction = (action) => {\r\n        handleMenuClose();\r\n        switch (action) {\r\n            case 'view':\r\n                onView();\r\n                break;\r\n            case 'edit':\r\n                onEdit();\r\n                break;\r\n            case 'run':\r\n                onRun();\r\n                break;\r\n            case 'collaborate':\r\n                onCollaboration();\r\n                break;\r\n            case 'view_public':\r\n                onViewPublic();\r\n                break;\r\n            case 'buy':\r\n                onBuy();\r\n                break;\r\n            case 'delete':\r\n                onDelete();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    const getProjectTypeIcon = (type) => {\r\n        switch (type) {\r\n            case 'code':\r\n                return <CodeIcon fontSize=\"small\" sx={{ color: 'black' }} />;\r\n            case 'text':\r\n                return <DescriptionIcon fontSize=\"small\" sx={{ color: 'black' }} />;\r\n            default:\r\n                return <ViewIcon fontSize=\"small\" sx={{ color: 'black' }} />;\r\n        }\r\n    };\r\n\r\n    const getProjectTypeColor = (type) => {\r\n        switch (type) {\r\n            case 'code':\r\n                return 'primary';\r\n            case 'text':\r\n                return 'secondary';\r\n            default:\r\n                return 'default';\r\n        }\r\n    };\r\n\r\n    const getStatusColor = (status) => {\r\n        switch (status) {\r\n            case 'approved':\r\n                return 'success';\r\n            case 'pending':\r\n                return 'warning';\r\n            case 'rejected':\r\n                return 'error';\r\n            case 'draft':\r\n                return 'default';\r\n            default:\r\n                return 'default';\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Card\r\n            sx={{\r\n                height: '100%',\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                transition: 'transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out',\r\n                '&:hover': {\r\n                    transform: 'translateY(-4px)',\r\n                    boxShadow: 4\r\n                }\r\n            }}\r\n        >\r\n            <CardContent sx={{ flexGrow: 1 }}>\r\n                {/* Header */}\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        justifyContent: 'space-between',\r\n                        alignItems: 'flex-start',\r\n                        mb: 2\r\n                    }}\r\n                >\r\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, flex: 1 }}>\r\n                        {getProjectTypeIcon(project.project_type)}\r\n                        <Typography variant=\"h6\" component=\"h2\" noWrap color=\"black\" sx={{ flex: 1 }}>\r\n                            {project.title}\r\n                        </Typography>\r\n                    </Box>\r\n                    <Box sx={{ display: 'flex', gap: 0.5, alignItems: 'center' }}>\r\n                        {project.is_public ? (\r\n                            <Tooltip title=\"Public Project\"\r\n                                componentsProps={{\r\n                                    tooltip: {\r\n                                        sx: {\r\n                                            bgcolor: 'black',\r\n                                            color: 'white',\r\n                                            '& .MuiTooltip-arrow': {\r\n                                                color: 'black'\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }}\r\n                            >\r\n                                <PublicIcon fontSize=\"small\" sx={{ color: 'black' }} />\r\n                            </Tooltip>\r\n                        ) : (\r\n                            <Tooltip title=\"Private Project\"\r\n                                componentsProps={{\r\n                                    tooltip: {\r\n                                        sx: {\r\n                                            bgcolor: 'black',\r\n                                            color: 'white',\r\n                                            '& .MuiTooltip-arrow': {\r\n                                                color: 'black'\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }}\r\n                            >\r\n                                <LockIcon fontSize=\"small\" sx={{ color: 'black' }} />\r\n                            </Tooltip>\r\n                        )}\r\n                        {project.is_approved && (\r\n                            <Tooltip title=\"Approved\"\r\n                                componentsProps={{\r\n                                    tooltip: {\r\n                                        sx: {\r\n                                            bgcolor: 'black',\r\n                                            color: 'white',\r\n                                            '& .MuiTooltip-arrow': {\r\n                                                color: 'black'\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }}\r\n                            >\r\n                                <StarIcon fontSize=\"small\" sx={{ color: 'black' }} />\r\n                            </Tooltip>\r\n                        )}\r\n                        <IconButton\r\n                            size=\"small\"\r\n                            onClick={handleMenuOpen}\r\n                            sx={{ color: 'black' }}\r\n                        >\r\n                            <MoreIcon fontSize=\"small\" />\r\n                        </IconButton>\r\n                    </Box>\r\n                </Box>\r\n\r\n                {/* Description */}\r\n                <Typography\r\n                    variant=\"body2\"\r\n                    sx={{\r\n                        mb: 2,\r\n                        display: '-webkit-box',\r\n                        WebkitLineClamp: 3,\r\n                        WebkitBoxOrient: 'vertical',\r\n                        overflow: 'hidden',\r\n                        color: 'black'\r\n                    }}\r\n                >\r\n                    {project.description}\r\n                </Typography>\r\n\r\n                {/* Chips */}\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        gap: 1,\r\n                        mb: 2,\r\n                        flexWrap: 'wrap'\r\n                    }}\r\n                >\r\n                    <Chip\r\n                        label={project.project_type}\r\n                        color={getProjectTypeColor(project.project_type)}\r\n                        size=\"small\"\r\n                        variant=\"outlined\"\r\n                    />\r\n                    <Chip\r\n                        label={project.status}\r\n                        color={getStatusColor(project.status)}\r\n                        size=\"small\"\r\n                        variant=\"outlined\"\r\n                    />\r\n                    {project.language && (\r\n                        <Chip\r\n                            label={project.language}\r\n                            size=\"small\"\r\n                            variant=\"outlined\"\r\n                            sx={{ color: 'black' }}\r\n                        />\r\n                    )}\r\n                    {project.price > 0 && (\r\n                        <Chip\r\n                            label={`$${project.price}`}\r\n                            color=\"warning\"\r\n                            size=\"small\"\r\n                            variant=\"outlined\"\r\n                        />\r\n                    )}\r\n                </Box>\r\n\r\n                {/* Analytics */}\r\n                {project.analytics && (\r\n                    <Box\r\n                        sx={{\r\n                            display: 'flex',\r\n                            gap: 1,\r\n                            mb: 2,\r\n                            flexWrap: 'wrap'\r\n                        }}\r\n                    >\r\n                        <Chip\r\n                            icon={<ViewIcon />}\r\n                            label={project.analytics.total_views || 0}\r\n                            size=\"small\"\r\n                            variant=\"outlined\"\r\n                            sx={{ color: 'black' }}\r\n                        />\r\n                        <Chip\r\n                            icon={<PlayIcon />}\r\n                            label={project.analytics.total_runs || 0}\r\n                            size=\"small\"\r\n                            variant=\"outlined\"\r\n                            sx={{ color: 'black' }}\r\n                        />\r\n                        <Chip\r\n                            icon={<BuyIcon />}\r\n                            label={project.analytics.total_purchases || 0}\r\n                            size=\"small\"\r\n                            variant=\"outlined\"\r\n                            sx={{ color: 'black' }}\r\n                        />\r\n                        {project.analytics.total_revenue > 0 && (\r\n                            <Chip\r\n                                icon={<RevenueIcon />}\r\n                                label={`$${project.analytics.total_revenue}`}\r\n                                size=\"small\"\r\n                                variant=\"outlined\"\r\n                                color=\"success\"\r\n                            />\r\n                        )}\r\n                    </Box>\r\n                )}\r\n\r\n                {/* Owner Info */}\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        gap: 1,\r\n                        mb: 2\r\n                    }}\r\n                >\r\n                    <Avatar sx={{ width: 24, height: 24 }}>\r\n                        {project.owner.avatar ? (\r\n                            <img\r\n                                src={project.owner.avatar}\r\n                                alt={project.owner.first_name}\r\n                            />\r\n                        ) : (\r\n                            <PersonIcon fontSize=\"small\" />\r\n                        )}\r\n                    </Avatar>\r\n                    <Typography variant=\"caption\" sx={{ color: 'black' }}>\r\n                        by {project.owner.first_name} {project.owner.last_name}\r\n                    </Typography>\r\n                </Box>\r\n\r\n                {/* Usage Info */}\r\n                {project.usage_count > 0 && (\r\n                    <Box\r\n                        sx={{\r\n                            display: 'flex',\r\n                            alignItems: 'center',\r\n                            gap: 1,\r\n                            mb: 2\r\n                        }}\r\n                    >\r\n                        <PlayIcon fontSize=\"small\" sx={{ color: 'black' }} />\r\n                        <Typography variant=\"caption\" sx={{ color: 'black' }}>\r\n                            Used {project.usage_count} times\r\n                        </Typography>\r\n                    </Box>\r\n                )}\r\n\r\n                {/* Computing Resources */}\r\n                {project.computing_resources &&\r\n                    project.computing_resources.length > 0 && (\r\n                        <Box sx={{ mb: 2 }}>\r\n                            <Typography\r\n                                variant=\"caption\"\r\n                                sx={{ color: 'black' }}\r\n                                display=\"block\"\r\n                            >\r\n                                Cost per run: $\r\n                                {project.computing_resources[0]\r\n                                    .estimated_cost_per_run}\r\n                            </Typography>\r\n                        </Box>\r\n                    )}\r\n\r\n                {/* Timestamp */}\r\n                <Typography variant=\"caption\" sx={{ color: 'black' }}>\r\n                    {formatDistanceToNow(new Date(project.created_at), {\r\n                        addSuffix: true\r\n                    })}\r\n                </Typography>\r\n            </CardContent>\r\n\r\n            <Divider />\r\n\r\n            <CardActions sx={{ flexWrap: 'wrap', justifyContent: 'space-between', p: 2 }}>\r\n                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>\r\n                    <Button\r\n                        size=\"small\"\r\n                        variant=\"outlined\"\r\n                        startIcon={<ViewIcon />}\r\n                        onClick={onView}\r\n                        sx={{ color: 'black', borderColor: 'black' }}\r\n                    >\r\n                        View\r\n                    </Button>\r\n                    \r\n                    <Button\r\n                        size=\"small\"\r\n                        variant=\"outlined\"\r\n                        startIcon={<PlayIcon />}\r\n                        onClick={onRun}\r\n                        sx={{ color: 'black', borderColor: 'black' }}\r\n                    >\r\n                        Run\r\n                    </Button>\r\n\r\n                    <Button\r\n                        size=\"small\"\r\n                        variant=\"outlined\"\r\n                        startIcon={<CollaborationIcon />}\r\n                        onClick={onCollaboration}\r\n                        sx={{ color: 'black', borderColor: 'black' }}\r\n                    >\r\n                        Collaborate\r\n                    </Button>\r\n\r\n                    {project.is_public && (\r\n                        <Button\r\n                            size=\"small\"\r\n                            variant=\"outlined\"\r\n                            onClick={onViewPublic}\r\n                            startIcon={<PublicIcon />}\r\n                            sx={{ color: 'black', borderColor: 'black' }}\r\n                        >\r\n                            Public\r\n                        </Button>\r\n                    )}\r\n\r\n                    {project.price > 0 && (\r\n                        <Button\r\n                            size=\"small\"\r\n                            variant=\"outlined\"\r\n                            color=\"warning\"\r\n                            onClick={onBuy}\r\n                            startIcon={<BuyIcon />}\r\n                        >\r\n                            Buy ${project.price}\r\n                        </Button>\r\n                    )}\r\n\r\n                    {isOwner && (\r\n                        <Box sx={{ display: 'flex', gap: 0.5 }}>\r\n                            <Tooltip title=\"Edit Project\"\r\n                                componentsProps={{\r\n                                    tooltip: {\r\n                                        sx: {\r\n                                            bgcolor: 'black',\r\n                                            color: 'white',\r\n                                            '& .MuiTooltip-arrow': {\r\n                                                color: 'black'\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }}\r\n                            >\r\n                                <IconButton\r\n                                    size=\"small\"\r\n                                    onClick={onEdit}\r\n                                    sx={{ color: 'black' }}\r\n                                >\r\n                                    <EditIcon fontSize=\"small\" />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </Box>\r\n                    )}\r\n                </Box>\r\n\r\n                {isOwner && (\r\n                    <Box sx={{ display: 'flex', gap: 0.5 }}>\r\n                        <Tooltip title=\"Delete Project\"\r\n                            componentsProps={{\r\n                                tooltip: {\r\n                                    sx: {\r\n                                        bgcolor: 'black',\r\n                                        color: 'white',\r\n                                        '& .MuiTooltip-arrow': {\r\n                                            color: 'black'\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }}\r\n                        >\r\n                            <IconButton\r\n                                size=\"small\"\r\n                                color=\"error\"\r\n                                onClick={onDelete}\r\n                            >\r\n                                <DeleteIcon fontSize=\"small\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </Box>\r\n                )}\r\n            </CardActions>\r\n\r\n            {/* Action Menu */}\r\n            <Menu\r\n                anchorEl={anchorEl}\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleMenuClose}\r\n                sx={{\r\n                    '& .MuiMenuItem-root': {\r\n                        color: 'black'\r\n                    }\r\n                }}\r\n            >\r\n                <MenuItem onClick={() => handleMenuAction('view')} sx={{ color: 'black !important',\r\n                                                '&:hover, &:active, &.active, &.Mui-selected': {\r\n                                                    color: 'black !important'\r\n                                                }\r\n                                            }}>\r\n                    <ListItemIcon>\r\n                        <ViewIcon fontSize=\"small\" sx={{ color: 'black' }} />\r\n                    </ListItemIcon>\r\n                    <ListItemText>View Details</ListItemText>\r\n                </MenuItem>\r\n                \r\n                <MenuItem onClick={() => handleMenuAction('run')} sx={{ color: 'black !important',\r\n                                                '&:hover, &:active, &.active, &.Mui-selected': {\r\n                                                    color: 'black !important'\r\n                                                }\r\n                                            }}>\r\n                    <ListItemIcon>\r\n                        <PlayIcon fontSize=\"small\" sx={{ color: 'black' }} />\r\n                    </ListItemIcon>\r\n                    <ListItemText>Run Project</ListItemText>\r\n                </MenuItem>\r\n                \r\n                <MenuItem onClick={() => handleMenuAction('collaborate')} sx={{ color: 'black !important',\r\n                                                '&:hover, &:active, &.active, &.Mui-selected': {\r\n                                                    color: 'black !important'\r\n                                                }\r\n                                            }}>\r\n                    <ListItemIcon>\r\n                        <CollaborationIcon fontSize=\"small\" sx={{ color: 'black' }} />\r\n                    </ListItemIcon>\r\n                    <ListItemText>Collaborate</ListItemText>\r\n                </MenuItem>\r\n                \r\n                {/* {project.is_public && (\r\n                    <MenuItem onClick={() => handleMenuAction('view_public')} sx={{ color: 'black !important',\r\n                                                '&:hover, &:active, &.active, &.Mui-selected': {\r\n                                                    color: 'black !important'\r\n                                                }\r\n                                            }}>\r\n                        <ListItemIcon>\r\n                            <PublicIcon fontSize=\"small\" sx={{ color: 'black' }} />\r\n                        </ListItemIcon>\r\n                        <ListItemText>View Public Page</ListItemText>\r\n                    </MenuItem>\r\n                )} */}\r\n                \r\n                {project.price > 0 && (\r\n                    <MenuItem onClick={() => handleMenuAction('buy')} sx={{ color: 'black !important',\r\n                                                '&:hover, &:active, &.active, &.Mui-selected': {\r\n                                                    color: 'black !important'\r\n                                                }\r\n                                            }}>\r\n                        <ListItemIcon>\r\n                            <BuyIcon fontSize=\"small\" sx={{ color: 'black' }} />\r\n                        </ListItemIcon>\r\n                        <ListItemText>Buy Project</ListItemText>\r\n                    </MenuItem>\r\n                )}\r\n                \r\n                {isOwner && (\r\n                    <>\r\n                        <MenuItem onClick={() => handleMenuAction('edit')} sx={{ color: 'black !important',\r\n                                                '&:hover, &:active, &.active, &.Mui-selected': {\r\n                                                    color: 'black !important'\r\n                                                }\r\n                                            }}>\r\n                            <ListItemIcon>\r\n                                <EditIcon fontSize=\"small\" sx={{ color: 'black' }} />\r\n                            </ListItemIcon>\r\n                            <ListItemText>Edit Project</ListItemText>\r\n                        </MenuItem>\r\n                        \r\n                        <MenuItem onClick={() => handleMenuAction('delete')}>\r\n                            <ListItemIcon>\r\n                                <DeleteIcon fontSize=\"small\" sx={{ color: 'red' }} />\r\n                            </ListItemIcon>\r\n                            <ListItemText sx={{ color: 'red' }}>Delete Project</ListItemText>\r\n                        </MenuItem>\r\n                    </>\r\n                )}\r\n            </Menu>\r\n        </Card>\r\n    );\r\n};\r\n\r\nProjectCard.propTypes = {\r\n    project: PropTypes.shape({\r\n        id: PropTypes.string.isRequired,\r\n        title: PropTypes.string.isRequired,\r\n        description: PropTypes.string.isRequired,\r\n        project_type: PropTypes.string.isRequired,\r\n        status: PropTypes.string.isRequired,\r\n        price: PropTypes.number.isRequired,\r\n        price_per_use: PropTypes.number.isRequired,\r\n        is_public: PropTypes.bool.isRequired,\r\n        is_approved: PropTypes.bool.isRequired,\r\n        usage_count: PropTypes.number.isRequired,\r\n        created_at: PropTypes.string.isRequired,\r\n        language: PropTypes.string,\r\n        owner: PropTypes.shape({\r\n            first_name: PropTypes.string.isRequired,\r\n            last_name: PropTypes.string.isRequired,\r\n            avatar: PropTypes.string\r\n        }).isRequired,\r\n        analytics: PropTypes.shape({\r\n            total_views: PropTypes.number,\r\n            total_runs: PropTypes.number,\r\n            total_purchases: PropTypes.number,\r\n            total_revenue: PropTypes.string\r\n        }),\r\n        computing_resources: PropTypes.arrayOf(\r\n            PropTypes.shape({\r\n                estimated_cost_per_run: PropTypes.number.isRequired\r\n            })\r\n        )\r\n    }).isRequired,\r\n    onView: PropTypes.func.isRequired,\r\n    onEdit: PropTypes.func.isRequired,\r\n    onDelete: PropTypes.func.isRequired,\r\n    onRun: PropTypes.func.isRequired,\r\n    onBuy: PropTypes.func.isRequired,\r\n    onViewPublic: PropTypes.func.isRequired,\r\n    onCollaboration: PropTypes.func.isRequired,\r\n    isOwner: PropTypes.bool.isRequired\r\n};\r\n\r\nexport default ProjectCard; ","import { useState, useEffect } from 'react';\r\nimport { Helmet } from 'react-helmet-async';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {\r\n    Alert,\r\n    Box,\r\n    Button,\r\n    Card,\r\n    CardContent,\r\n    Container,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Fab,\r\n    FormControl,\r\n    Grid,\r\n    InputAdornment,\r\n    InputLabel,\r\n    MenuItem,\r\n    Select,\r\n    Slider,\r\n    Snackbar,\r\n    TextField,\r\n    Typography,\r\n    Chip,\r\n} from '@mui/material';\r\nimport {\r\n    Add as AddIcon,\r\n    Code as CodeIcon,\r\n    Delete as DeleteIcon,\r\n    Description as DescriptionIcon,\r\n    Search as SearchIcon,\r\n    Visibility as VisibilityIcon,\r\n    Warning as WarningIcon,\r\n    FilterList as FilterIcon,\r\n    Sort as SortIcon,\r\n    Language as LanguageIcon,\r\n    AttachMoney as PriceIcon\r\n} from '@mui/icons-material';\r\n\r\nimport { useAuth } from 'src/contexts/AuthContext';\r\nimport { projectService } from 'src/services/projectService';\r\nimport ProjectCard from './components/ProjectCard';\r\nimport ProjectDetails from './components/ProjectDetails';\r\nimport ProjectForm from './components/ProjectForm';\r\n\r\nconst Projects = () => {\r\n    const { user } = useAuth();\r\n    const navigate = useNavigate();\r\n\r\n    // State management\r\n    const [projects, setProjects] = useState([]);\r\n    const [filteredProjects, setFilteredProjects] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [filterType, setFilterType] = useState('all');\r\n    const [filterLanguage, setFilterLanguage] = useState('all');\r\n    const [priceRange, setPriceRange] = useState([0, 100]);\r\n    const [sortBy, setSortBy] = useState('created_at');\r\n    const [sortOrder, setSortOrder] = useState('desc');\r\n    const [showAdvancedFilters, setShowAdvancedFilters] = useState(false);\r\n    const [openCreateDialog, setOpenCreateDialog] = useState(false);\r\n    const [openDetailsDialog, setOpenDetailsDialog] = useState(false);\r\n    const [openDeleteDialog, setOpenDeleteDialog] = useState(false);\r\n    const [selectedProject, setSelectedProject] = useState(null);\r\n    const [projectToDelete, setProjectToDelete] = useState(null);\r\n    const [snackbar, setSnackbar] = useState({\r\n        open: false,\r\n        message: '',\r\n        severity: 'success'\r\n    });\r\n\r\n    // Effects\r\n    useEffect(() => {\r\n        loadProjects();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        filterAndSortProjects();\r\n    }, [projects, searchTerm, filterType, filterLanguage, priceRange, sortBy, sortOrder]);\r\n\r\n    const getFilterIcon = (type) => {\r\n        switch (type) {\r\n            case 'code':\r\n                return <CodeIcon />;\r\n            case 'text':\r\n                return <DescriptionIcon />;\r\n            default:\r\n                return <VisibilityIcon />;\r\n        }\r\n    };\r\n\r\n    const showSnackbar = (message, severity = 'success') => {\r\n        setSnackbar({\r\n            open: true,\r\n            message,\r\n            severity\r\n        });\r\n    };\r\n\r\n    const loadProjects = async () => {\r\n        try {\r\n            setLoading(true);\r\n            const response = await projectService.getAllProjects();\r\n            console.log('response', response);\r\n            setProjects(response.data);\r\n        } catch (error) {\r\n            console.error('Error loading projects:', error);\r\n            showSnackbar('Failed to load projects', 'error');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const filterAndSortProjects = () => {\r\n        let filtered = [...projects];\r\n\r\n        // Filter by search term\r\n        if (searchTerm) {\r\n            filtered = filtered.filter(project =>\r\n                project.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                project.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                project.owner.first_name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                project.owner.last_name.toLowerCase().includes(searchTerm.toLowerCase())\r\n            );\r\n        }\r\n\r\n        // Filter by type\r\n        if (filterType !== 'all') {\r\n            filtered = filtered.filter(project => project.project_type === filterType);\r\n        }\r\n\r\n        // Filter by language\r\n        if (filterLanguage !== 'all') {\r\n            filtered = filtered.filter(project => project.language === filterLanguage);\r\n        }\r\n\r\n        // Filter by price range\r\n        filtered = filtered.filter(project => \r\n            project.price >= priceRange[0] && project.price <= priceRange[1]\r\n        );\r\n\r\n        // Sort projects\r\n        filtered.sort((a, b) => {\r\n            let aValue, bValue;\r\n            \r\n            switch (sortBy) {\r\n                case 'title':\r\n                    aValue = a.title.toLowerCase();\r\n                    bValue = b.title.toLowerCase();\r\n                    break;\r\n                case 'created_at':\r\n                    aValue = new Date(a.created_at);\r\n                    bValue = new Date(b.created_at);\r\n                    break;\r\n                case 'price':\r\n                    aValue = parseFloat(a.price);\r\n                    bValue = parseFloat(b.price);\r\n                    break;\r\n                case 'views':\r\n                    aValue = a.analytics?.total_views || 0;\r\n                    bValue = b.analytics?.total_views || 0;\r\n                    break;\r\n                case 'runs':\r\n                    aValue = a.analytics?.total_runs || 0;\r\n                    bValue = b.analytics?.total_runs || 0;\r\n                    break;\r\n                case 'revenue':\r\n                    aValue = parseFloat(a.analytics?.total_revenue || 0);\r\n                    bValue = parseFloat(b.analytics?.total_revenue || 0);\r\n                    break;\r\n                default:\r\n                    return 0;\r\n            }\r\n\r\n            if (sortOrder === 'desc') {\r\n                return bValue > aValue ? 1 : -1;\r\n            } else {\r\n                return aValue > bValue ? 1 : -1;\r\n            }\r\n        });\r\n\r\n        setFilteredProjects(filtered);\r\n    };\r\n\r\n    const handleCreateProject = async (projectData) => {\r\n        try {\r\n            console.log('projectData', projectData);\r\n            const response = await projectService.createProject(projectData);\r\n            console.log('response', response);\r\n            setProjects([response.data, ...projects]);\r\n            setOpenCreateDialog(false);\r\n            showSnackbar('Project created successfully!');\r\n        } catch (error) {\r\n            console.error('Error creating project:', error);\r\n            showSnackbar('Failed to create project', 'error');\r\n        }\r\n    };\r\n\r\n    const handleCollaboration = (project) => {\r\n        navigate(`/projects/${project.id}/collaboration`);\r\n    };\r\n\r\n    const handleDeleteProject = async (projectId) => {\r\n        try {\r\n            await projectService.deleteProject(projectId);\r\n            setProjects(projects.filter(project => project.id !== projectId));\r\n            showSnackbar('Project deleted successfully!', 'success');\r\n        } catch (error) {\r\n            console.error('Error deleting project:', error);\r\n            showSnackbar('Failed to delete project', 'error');\r\n        }\r\n    };\r\n\r\n    const handleBuyProject = async (project) => {\r\n        try {\r\n            await projectService.buyProject(project.id, {\r\n                purchase_type: 'one_time'\r\n            });\r\n            showSnackbar('Project purchased successfully!', 'success');\r\n            // Reload projects to update purchase status\r\n            loadProjects();\r\n        } catch (error) {\r\n            console.error('Error buying project:', error);\r\n            showSnackbar(error.response?.data?.error || 'Failed to purchase project', 'error');\r\n        }\r\n    };\r\n\r\n    const handleProjectAction = (action, project) => {\r\n        switch (action) {\r\n            case 'view':\r\n                navigate(`/project/${project.id}`);\r\n                break;\r\n            case 'edit':\r\n                navigate(`/project/${project.id}/edit`);\r\n                break;\r\n            case 'delete':\r\n                handleDeleteProject(project.id);\r\n                break;\r\n            case 'run':\r\n                navigate(`/project/${project.id}/run`);\r\n                break;\r\n            case 'buy':\r\n                handleBuyProject(project);\r\n                break;\r\n            case 'view_public':\r\n                handleViewPublic(project);\r\n                break;\r\n            case 'collaboration':\r\n                handleCollaboration(project);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    const handleConfirmDelete = async () => {\r\n        try {\r\n            await projectService.deleteProject(projectToDelete.id);\r\n            setProjects(projects.filter(p => p.id !== projectToDelete.id));\r\n            setOpenDeleteDialog(false);\r\n            setProjectToDelete(null);\r\n            showSnackbar('Project deleted successfully!');\r\n        } catch (error) {\r\n            console.error('Error deleting project:', error);\r\n            showSnackbar('Failed to delete project', 'error');\r\n        }\r\n    };\r\n\r\n    const handleCancelDelete = () => {\r\n        setOpenDeleteDialog(false);\r\n        setProjectToDelete(null);\r\n    };\r\n\r\n    const handleViewProject = (project) => {\r\n        setSelectedProject(project);\r\n        setOpenDetailsDialog(true);\r\n    };\r\n\r\n    const handleEditProject = (project) => {\r\n        navigate(`/project/${project.id}/edit`);\r\n    };\r\n\r\n    const handleViewPublic = (project) => {\r\n        if (project.is_public) {\r\n            navigate(`/project/public/${project.id}`);\r\n        } else {\r\n            showSnackbar('This project is not public', 'warning');\r\n        }\r\n    };\r\n\r\n    const programmingLanguages = [\r\n        { value: 'javascript', label: 'JavaScript' },\r\n        { value: 'python', label: 'Python' },\r\n        { value: 'java', label: 'Java' },\r\n        { value: 'php', label: 'PHP' },\r\n        { value: 'go', label: 'Go' },\r\n        { value: 'rust', label: 'Rust' },\r\n        { value: 'sql', label: 'SQL' }\r\n    ];\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>Projects - OneDollarAI</title>\r\n            </Helmet>\r\n\r\n            <Container maxWidth=\"lg\">\r\n                <Box sx={{ mt: 3, mb: 4 }}>\r\n                    <Typography variant=\"h2\" component=\"h1\" gutterBottom sx={{ color: 'black' }}>\r\n                        Code Projects\r\n                    </Typography>\r\n                    <Typography variant=\"body1\" sx={{ color: 'black' }}>\r\n                        Discover, create, and manage code projects. Run them instantly or purchase for unlimited access.\r\n                    </Typography>\r\n                </Box>\r\n\r\n                {/* Search and Filter Bar */}\r\n                <Card sx={{ mb: 3 }}>\r\n                    <CardContent>\r\n                        <Grid container spacing={2} alignItems=\"center\">\r\n                            <Grid item xs={12} md={4}>\r\n                                <TextField\r\n                                    fullWidth\r\n                                    placeholder=\"Search projects by title, description, or owner...\"\r\n                                    value={searchTerm}\r\n                                    onChange={(e) => setSearchTerm(e.target.value)}\r\n                                    InputProps={{\r\n                                        startAdornment: (\r\n                                            <InputAdornment position=\"start\">\r\n                                                <SearchIcon sx={{ color: 'black' }} />\r\n                                            </InputAdornment>\r\n                                        ),\r\n                                    }}\r\n                                    sx={{\r\n                                        '& .MuiInputBase-root': {\r\n                                            color: 'black',\r\n                                            '& fieldset': {\r\n                                                borderColor: 'black'\r\n                                            },\r\n                                            '&:hover fieldset': {\r\n                                                borderColor: 'black'\r\n                                            },\r\n                                            '&.Mui-focused fieldset': {\r\n                                                borderColor: 'black'\r\n                                            }\r\n                                        },\r\n                                        '& .MuiInputLabel-root': {\r\n                                            color: 'black',\r\n                                            '&.Mui-focused': {\r\n                                                color: 'black'\r\n                                            }\r\n                                        },\r\n                                        '& .MuiFormHelperText-root': {\r\n                                            color: 'black'\r\n                                        }\r\n                                    }}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} md={2}>\r\n                                <FormControl fullWidth sx={{\r\n                                    '& .MuiInputBase-root': {\r\n                                        color: 'black',\r\n                                        '& fieldset': {\r\n                                            borderColor: 'black'\r\n                                        },\r\n                                        '&:hover fieldset': {\r\n                                            borderColor: 'black'\r\n                                        },\r\n                                        '&.Mui-focused fieldset': {\r\n                                            borderColor: 'black'\r\n                                        }\r\n                                    },\r\n                                    '& .MuiInputLabel-root': {\r\n                                        color: 'black',\r\n                                        '&.Mui-focused': {\r\n                                            color: 'black'\r\n                                        }\r\n                                    },\r\n                                    '& .MuiSelect-icon': {\r\n                                        color: 'black'\r\n                                    }\r\n                                }}>\r\n                                    <InputLabel>Type</InputLabel>\r\n                                    <Select\r\n                                        value={filterType}\r\n                                        onChange={(e) => setFilterType(e.target.value)}\r\n                                        label=\"Type\"\r\n                                    >\r\n                                        <MenuItem value=\"all\"\r\n                                            sx={{ color: 'black !important',\r\n                                                '&:hover, &:active, &.active, &.Mui-selected': {\r\n                                                    color: 'black !important'\r\n                                                }\r\n                                            }}\r\n                                        >\r\n                                            All Types\r\n                                        </MenuItem>\r\n                                        <MenuItem value=\"code\"\r\n                                            sx={{ color: 'black !important',\r\n                                                '&:hover, &:active, &.active, &.Mui-selected': {\r\n                                                    color: 'black !important'\r\n                                                }\r\n                                            }}\r\n                                        >\r\n                                            Code Projects\r\n                                        </MenuItem>\r\n                                        <MenuItem value=\"text\"\r\n                                            sx={{ color: 'black !important',\r\n                                                '&:hover, &:active, &.active, &.Mui-selected': {\r\n                                                    color: 'black !important'\r\n                                                }\r\n                                            }}\r\n                                        >\r\n                                            Text Projects\r\n                                        </MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Grid>\r\n                            <Grid item xs={12} md={2}>\r\n                                <FormControl fullWidth sx={{\r\n                                    '& .MuiInputBase-root': {\r\n                                        color: 'black',\r\n                                        '& fieldset': {\r\n                                            borderColor: 'black'\r\n                                        },\r\n                                        '&:hover fieldset': {\r\n                                            borderColor: 'black'\r\n                                        },\r\n                                        '&.Mui-focused fieldset': {\r\n                                            borderColor: 'black'\r\n                                        }\r\n                                    },\r\n                                    '& .MuiInputLabel-root': {\r\n                                        color: 'black',\r\n                                        '&.Mui-focused': {\r\n                                            color: 'black'\r\n                                        }\r\n                                    },\r\n                                    '& .MuiSelect-icon': {\r\n                                        color: 'black'\r\n                                    }\r\n                                }}>\r\n                                    <InputLabel>Language</InputLabel>\r\n                                    <Select\r\n                                        value={filterLanguage}\r\n                                        onChange={(e) => setFilterLanguage(e.target.value)}\r\n                                        label=\"Language\"\r\n                                    >\r\n                                        <MenuItem value=\"all\" sx={{ color: 'black !important',\r\n                                                '&:hover, &:active, &.active, &.Mui-selected': {\r\n                                                    color: 'black !important'\r\n                                                }\r\n                                            }}>All Languages</MenuItem>\r\n                                        {programmingLanguages.map((lang) => (\r\n                                            <MenuItem key={lang.value} value={lang.value} sx={{ color: 'black !important',\r\n                                                '&:hover, &:active, &.active, &.Mui-selected': {\r\n                                                    color: 'black !important'\r\n                                                }\r\n                                            }}>\r\n                                                {lang.label}\r\n                                            </MenuItem>\r\n                                        ))}\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Grid>\r\n                            <Grid item xs={12} md={2}>\r\n                                <FormControl fullWidth sx={{\r\n                                    '& .MuiInputBase-root': {\r\n                                        color: 'black',\r\n                                        '& fieldset': {\r\n                                            borderColor: 'black'\r\n                                        },\r\n                                        '&:hover fieldset': {\r\n                                            borderColor: 'black'\r\n                                        },\r\n                                        '&.Mui-focused fieldset': {\r\n                                            borderColor: 'black'\r\n                                        }\r\n                                    },\r\n                                    '& .MuiInputLabel-root': {\r\n                                        color: 'black',\r\n                                        '&.Mui-focused': {\r\n                                            color: 'black'\r\n                                        }\r\n                                    },\r\n                                    '& .MuiSelect-icon': {\r\n                                        color: 'black'\r\n                                    }\r\n                                }}>\r\n                                    <InputLabel>Sort By</InputLabel>\r\n                                    <Select\r\n                                        value={sortBy}\r\n                                        onChange={(e) => setSortBy(e.target.value)}\r\n                                        label=\"Sort By\"\r\n                                    >\r\n                                        <MenuItem value=\"created_at\" sx={{ color: 'black !important',\r\n                                                '&:hover, &:active, &.active, &.Mui-selected': {\r\n                                                    color: 'black !important'\r\n                                                }\r\n                                            }}>Newest First</MenuItem>\r\n                                        <MenuItem value=\"title\" sx={{ color: 'black !important',\r\n                                                '&:hover, &:active, &.active, &.Mui-selected': {\r\n                                                    color: 'black !important'\r\n                                                }\r\n                                            }}>Title</MenuItem>\r\n                                        <MenuItem value=\"price\" sx={{ color: 'black !important',\r\n                                                '&:hover, &:active, &.active, &.Mui-selected': {\r\n                                                    color: 'black !important'\r\n                                                }\r\n                                            }}>Price</MenuItem>\r\n                                        <MenuItem value=\"views\" sx={{ color: 'black !important',\r\n                                                '&:hover, &:active, &.active, &.Mui-selected': {\r\n                                                    color: 'black !important'\r\n                                                }\r\n                                            }}>Most Viewed</MenuItem>\r\n                                        <MenuItem value=\"runs\" sx={{ color: 'black !important',\r\n                                                '&:hover, &:active, &.active, &.Mui-selected': {\r\n                                                    color: 'black !important'\r\n                                                }\r\n                                            }}>Most Used</MenuItem>\r\n                                        <MenuItem value=\"revenue\" sx={{ color: 'black !important',\r\n                                                '&:hover, &:active, &.active, &.Mui-selected': {\r\n                                                    color: 'black !important'\r\n                                                }\r\n                                            }}>Highest Revenue</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Grid>\r\n                            <Grid item xs={12} md={2}>\r\n                                <Button\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    startIcon={<AddIcon />}\r\n                                    onClick={() => setOpenCreateDialog(true)}\r\n                                    sx={{\r\n                                        backgroundColor: 'black',\r\n                                        color: 'white',\r\n                                        '&:hover': {\r\n                                            backgroundColor: 'rgba(0, 0, 0, 0.8)'\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    Create Project\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        {/* Advanced Filters */}\r\n                        <Box sx={{ mt: 2 }}>\r\n                            <Button\r\n                                startIcon={<FilterIcon />}\r\n                                onClick={() => setShowAdvancedFilters(!showAdvancedFilters)}\r\n                                sx={{ color: 'black' }}\r\n                            >\r\n                                {showAdvancedFilters ? 'Hide' : 'Show'} Advanced Filters\r\n                            </Button>\r\n                            \r\n                            {showAdvancedFilters && (\r\n                                <Box sx={{ mt: 2 }}>\r\n                                    <Typography variant=\"subtitle2\" sx={{ color: 'black', mb: 1 }}>\r\n                                        Price Range: ${priceRange[0]} - ${priceRange[1]}\r\n                                    </Typography>\r\n                                    <Slider\r\n                                        value={priceRange}\r\n                                        onChange={(event, newValue) => setPriceRange(newValue)}\r\n                                        valueLabelDisplay=\"auto\"\r\n                                        min={0}\r\n                                        max={100}\r\n                                        sx={{\r\n                                            '& .MuiSlider-thumb': {\r\n                                                backgroundColor: 'black'\r\n                                            },\r\n                                            '& .MuiSlider-track': {\r\n                                                backgroundColor: 'black'\r\n                                            },\r\n                                            '& .MuiSlider-rail': {\r\n                                                backgroundColor: 'rgba(0, 0, 0, 0.3)'\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                </Box>\r\n                            )}\r\n                        </Box>\r\n                    </CardContent>\r\n                </Card>\r\n\r\n                <Grid container spacing={3}>\r\n                    {filteredProjects.map((project) => (\r\n                        <Grid item xs={12} sm={6} md={4} key={project.id}>\r\n                            <ProjectCard\r\n                                project={project}\r\n                                onView={() => handleViewProject(project)}\r\n                                onEdit={() => handleEditProject(project)}\r\n                                onDelete={() => handleProjectAction('delete', project)}\r\n                                onRun={() => handleProjectAction('run', project)}\r\n                                onBuy={() => handleProjectAction('buy', project)}\r\n                                onViewPublic={() => handleViewPublic(project)}\r\n                                onCollaboration={() => handleCollaboration(project)}\r\n                                isOwner={project.owner.id === user?.id}\r\n                            />\r\n                        </Grid>\r\n                    ))}\r\n                </Grid>\r\n\r\n                {filteredProjects.length === 0 && !loading && (\r\n                    <Box sx={{ textAlign: 'center', mt: 4 }}>\r\n                        <Typography variant=\"h6\" sx={{ color: 'black' }} gutterBottom>\r\n                            No projects found\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" sx={{ color: 'black' }}>\r\n                            {searchTerm || filterType !== 'all' || filterLanguage !== 'all'\r\n                                ? 'Try adjusting your search or filters'\r\n                                : 'Be the first to create a project!'\r\n                            }\r\n                        </Typography>\r\n                    </Box>\r\n                )}\r\n\r\n                {/* Create Project Dialog */}\r\n                <Dialog\r\n                    open={openCreateDialog}\r\n                    onClose={() => setOpenCreateDialog(false)}\r\n                    maxWidth=\"md\"\r\n                    fullWidth\r\n                >\r\n                    <DialogTitle sx={{ color: 'black', backgroundColor: '#E8E8E8' }}>Create New Project</DialogTitle>\r\n                    <DialogContent sx={{ backgroundColor: '#E8E8E8', scrollbarColor: '#888 #E8E8E8' }}>\r\n                        <ProjectForm onSubmit={handleCreateProject} />\r\n                    </DialogContent>\r\n                </Dialog>\r\n\r\n                {/* Project Details Dialog */}\r\n                <Dialog\r\n                    open={openDetailsDialog}\r\n                    onClose={() => setOpenDetailsDialog(false)}\r\n                    maxWidth=\"lg\"\r\n                    fullWidth\r\n                >\r\n                    <DialogContent>\r\n                        {selectedProject && (\r\n                            <ProjectDetails\r\n                                project={selectedProject}\r\n                                onClose={() => setOpenDetailsDialog(false)}\r\n                                onRun={() => handleProjectAction('run', selectedProject)}\r\n                                onBuy={() => handleProjectAction('buy', selectedProject)}\r\n                                onViewPublic={() => handleViewPublic(selectedProject)}\r\n                                onCollaboration={() => handleCollaboration(selectedProject)}\r\n                                isOwner={selectedProject.owner.id === user?.id}\r\n                            />\r\n                        )}\r\n                    </DialogContent>\r\n                </Dialog>\r\n\r\n                {/* Delete Confirmation Dialog */}\r\n                <Dialog\r\n                    open={openDeleteDialog}\r\n                    onClose={handleCancelDelete}\r\n                    maxWidth=\"sm\"\r\n                    fullWidth\r\n                >\r\n                    <DialogTitle sx={{ \r\n                        color: 'black', \r\n                        backgroundColor: '#fff3cd',\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        gap: 1\r\n                    }}>\r\n                        <WarningIcon sx={{ color: '#856404' }} />\r\n                        Confirm Delete\r\n                    </DialogTitle>\r\n                    <DialogContent sx={{ backgroundColor: '#fff3cd', pt: 2 }}>\r\n                        <Typography variant=\"body1\" sx={{ color: 'black', mb: 2 }}>\r\n                            Are you sure you want to delete the project \"{projectToDelete?.title}\"?\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" sx={{ color: '#856404' }}>\r\n                            This action cannot be undone. The project and all its data will be permanently removed.\r\n                        </Typography>\r\n                    </DialogContent>\r\n                    <DialogActions sx={{ backgroundColor: '#fff3cd', px: 3, pb: 2 }}>\r\n                        <Button \r\n                            onClick={handleCancelDelete}\r\n                            sx={{ \r\n                                color: 'black',\r\n                                borderColor: 'black',\r\n                                '&:hover': {\r\n                                    borderColor: 'black',\r\n                                    backgroundColor: 'rgba(0, 0, 0, 0.04)'\r\n                                }\r\n                            }}\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                        <Button \r\n                            onClick={handleConfirmDelete}\r\n                            variant=\"contained\"\r\n                            color=\"error\"\r\n                            startIcon={<DeleteIcon />}\r\n                            sx={{\r\n                                backgroundColor: '#dc3545',\r\n                                '&:hover': {\r\n                                    backgroundColor: '#c82333'\r\n                                }\r\n                            }}\r\n                        >\r\n                            Delete Project\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n\r\n                {/* Snackbar for notifications */}\r\n                <Snackbar\r\n                    open={snackbar.open}\r\n                    autoHideDuration={6000}\r\n                    onClose={() => setSnackbar({ ...snackbar, open: false })}\r\n                >\r\n                    <Alert\r\n                        onClose={() => setSnackbar({ ...snackbar, open: false })}\r\n                        severity={snackbar.severity}\r\n                        sx={{ width: '100%' }}\r\n                    >\r\n                        {snackbar.message}\r\n                    </Alert>\r\n                </Snackbar>\r\n\r\n                {/* Floating Action Button */}\r\n                <Fab\r\n                    color=\"primary\"\r\n                    aria-label=\"add\"\r\n                    sx={{ position: 'fixed', bottom: 16, right: 16 }}\r\n                    onClick={() => setOpenCreateDialog(true)}\r\n                >\r\n                    <AddIcon />\r\n                </Fab>\r\n            </Container>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Projects; "],"names":["validationSchema","Yup","title","min","max","required","description","project_type","oneOf","language","when","is","then","schema","otherwise","nullable","price","price_per_use","is_public","content","formFieldStyles","color","borderColor","_ref","project","onSubmit","onCancel","formik","useFormik","initialValues","usage_instructions","values","_jsx","Box","component","handleSubmit","sx","mt","children","_jsxs","Grid","container","spacing","item","xs","Typography","variant","gutterBottom","md","TextField","fullWidth","name","label","value","onChange","handleChange","onBlur","handleBlur","error","touched","Boolean","errors","helperText","FormControl","InputLabel","Select","MenuItem","display","alignItems","gap","CodeIcon","fontSize","DescriptionIcon","map","lang","multiline","rows","type","inputProps","step","FormControlLabel","control","Switch","checked","backgroundColor","height","width","CodeEditor","setFieldValue","placeholder","justifyContent","Button","onClick","disabled","isSubmitting","readOnly","editor","useRef","editorView","getLanguageExtension","useCallback","python","java","php","StreamLanguage","define","go","rust","sql","javascript","typescript","useEffect","_editor$current","current","updateListener","EditorView","of","update","docChanged","state","doc","toString","startState","EditorState","create","extensions","basicSetup","oneDark","lineNumbers","foldGutter","highlightSpecialChars","history","drawSelection","dropCursor","allowMultipleSelections","indentOnInput","syntaxHighlighting","defaultHighlightStyle","bracketMatching","closeBrackets","autocompletion","rectangularSelection","crosshairCursor","highlightActiveLine","highlightActiveLineGutter","highlightSelectionMatches","lineWrapping","keymap","closeBracketsKeymap","defaultKeymap","searchKeymap","historyKeymap","foldKeymap","completionKeymap","lintKeymap","parent","cmEditor","querySelector","style","_editorView$current","destroy","ref","border","flexGrow","maxHeight","overflow","defaultProps","onView","onEdit","onDelete","onRun","onBuy","onViewPublic","onCollaboration","isOwner","anchorEl","setAnchorEl","useState","handleMenuClose","handleMenuAction","action","Card","flexDirection","transition","transform","boxShadow","CardContent","mb","flex","ViewIcon","getProjectTypeIcon","noWrap","Tooltip","componentsProps","tooltip","bgcolor","PublicIcon","LockIcon","is_approved","StarIcon","IconButton","size","event","currentTarget","MoreIcon","WebkitLineClamp","WebkitBoxOrient","flexWrap","Chip","getProjectTypeColor","status","getStatusColor","analytics","icon","total_views","PlayIcon","total_runs","BuyIcon","total_purchases","total_revenue","RevenueIcon","Avatar","owner","avatar","src","alt","first_name","PersonIcon","last_name","usage_count","computing_resources","length","estimated_cost_per_run","formatDistanceToNow","Date","created_at","addSuffix","Divider","CardActions","p","startIcon","CollaborationIcon","EditIcon","DeleteIcon","Menu","open","onClose","ListItemIcon","ListItemText","_Fragment","Projects","user","useAuth","navigate","useNavigate","projects","setProjects","filteredProjects","setFilteredProjects","loading","setLoading","searchTerm","setSearchTerm","filterType","setFilterType","filterLanguage","setFilterLanguage","priceRange","setPriceRange","sortBy","setSortBy","sortOrder","setSortOrder","showAdvancedFilters","setShowAdvancedFilters","openCreateDialog","setOpenCreateDialog","openDetailsDialog","setOpenDetailsDialog","openDeleteDialog","setOpenDeleteDialog","selectedProject","setSelectedProject","projectToDelete","setProjectToDelete","snackbar","setSnackbar","message","severity","loadProjects","filterAndSortProjects","showSnackbar","arguments","undefined","async","response","projectService","getAllProjects","console","log","data","filtered","filter","toLowerCase","includes","sort","a","b","_a$analytics","_b$analytics","_a$analytics2","_b$analytics2","_a$analytics3","_b$analytics3","aValue","bValue","parseFloat","handleCollaboration","id","handleProjectAction","deleteProject","projectId","handleDeleteProject","buyProject","purchase_type","_error$response","_error$response$data","handleBuyProject","handleViewPublic","handleCancelDelete","Helmet","Container","maxWidth","e","target","InputProps","startAdornment","InputAdornment","position","SearchIcon","AddIcon","FilterIcon","Slider","newValue","valueLabelDisplay","sm","ProjectCard","handleViewProject","handleEditProject","textAlign","Dialog","DialogTitle","DialogContent","scrollbarColor","ProjectForm","projectData","createProject","ProjectDetails","WarningIcon","pt","DialogActions","px","pb","Snackbar","autoHideDuration","Alert","Fab","bottom","right"],"sourceRoot":""}