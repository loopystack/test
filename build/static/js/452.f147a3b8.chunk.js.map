{"version":3,"file":"static/js/452.f147a3b8.chunk.js","mappings":"qqBAmEA,MAAMA,GAAWC,IAAA,IAAC,SAAEC,EAAQ,MAAEC,EAAK,MAAEC,KAAUC,GAAOJ,EAAA,OAClDK,EAAAA,GAAAA,KAAA,OACIC,KAAK,WACLC,OAAQL,IAAUC,EAClBK,GAAI,kBAAkBL,IACtB,kBAAiB,aAAaA,OAC1BC,EAAKH,SAERC,IAAUC,IAASE,EAAAA,GAAAA,KAACI,EAAAA,EAAG,CAACC,GAAI,CAAEC,EAAG,GAAIV,SAAEA,KACtC,EA40BV,GAn0B+BW,KAC3B,MAAM,KAAEC,IAASC,EAAAA,GAAAA,OAEVC,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,IAClCC,GAAUC,KAAeF,EAAAA,EAAAA,UAAS,KAClCG,GAAkBC,KAAuBJ,EAAAA,EAAAA,UAAS,KAClDK,GAASC,KAAcN,EAAAA,EAAAA,WAAS,IAChCO,GAAYC,KAAiBR,EAAAA,EAAAA,UAAS,KACtCS,GAAcC,KAAmBV,EAAAA,EAAAA,UAAS,QAC1CW,GAAYC,KAAiBZ,EAAAA,EAAAA,UAAS,QACtCa,GAAiBC,KAAsBd,EAAAA,EAAAA,UAAS,OAChDe,GAAkBC,KAAuBhB,EAAAA,EAAAA,WAAS,IAClDiB,GAAkBC,KAAuBlB,EAAAA,EAAAA,WAAS,IAClDmB,GAAcC,KAAmBpB,EAAAA,EAAAA,UAAS,KAC1CqB,GAAgBC,KAAqBtB,EAAAA,EAAAA,UAAS,OAC9CuB,GAAUC,KAAexB,EAAAA,EAAAA,UAAS,CACrCyB,MAAM,EACNC,QAAS,GACTC,SAAU,aAGdC,EAAAA,EAAAA,YAAU,KACNC,KACAC,IAAoB,GACrB,KAEHF,EAAAA,EAAAA,YAAU,KACNG,IAAgB,GACjB,CAAC9B,GAAUM,GAAYE,GAAcE,KAExC,MAAMkB,GAAeG,UACjB,IACI1B,IAAW,GACX,MAAM2B,QAAiBC,GAAAA,EAAeC,sBACtCjC,GAAY+B,EAASG,KACzB,CAAE,MAAOC,GACLC,QAAQD,MAAM,0BAA2BA,GACzCb,GAAY,CACRC,MAAM,EACNC,QAAS,0BACTC,SAAU,SAElB,CAAC,QACGrB,IAAW,EACf,GAGEwB,GAAqBE,UACvB,IACI,MAAMC,QAAiBC,GAAAA,EAAeK,oBACtCjB,GAAkBW,EAASG,KAC/B,CAAE,MAAOC,GACLC,QAAQD,MAAM,iCAAkCA,EACpD,GAGEN,GAAiBA,KACnB,IAAIS,EAAW,IAAIvC,IAGfM,KACAiC,EAAWA,EAASC,QAAOC,GACvBA,EAAQC,MAAMC,cAAcC,SAAStC,GAAWqC,gBAChDF,EAAQI,YAAYF,cAAcC,SAAStC,GAAWqC,gBACtDF,EAAQK,MAAMC,MAAMJ,cAAcC,SAAStC,GAAWqC,kBAKzC,QAAjBnC,KACA+B,EAAWA,EAASC,QAAOC,GAAWA,EAAQO,SAAWxC,MAI1C,QAAfE,KACA6B,EAAWA,EAASC,QAAOC,GAAWA,EAAQQ,eAAiBvC,MAGnEP,GAAoBoC,EAAS,EAG3BW,GAAuBnB,UACzB,UACUE,GAAAA,EAAekB,eAAeC,GACpCnD,GAAYD,GAASqD,KAAIZ,GACrBA,EAAQnD,KAAO8D,EACT,IAAKX,EAASO,OAAQ,WAAYM,aAAa,GAC/Cb,KAEVlB,GAAY,CACRC,MAAM,EACNC,QAAS,iCACTC,SAAU,YAEdG,IACJ,CAAE,MAAOO,GACLC,QAAQD,MAAM,2BAA4BA,GAC1Cb,GAAY,CACRC,MAAM,EACNC,QAAS,4BACTC,SAAU,SAElB,GAyDE6B,GAAqBA,KACvBtC,IAAoB,GACpBJ,GAAmB,KAAK,EAGtB2C,GAAkBR,IACpB,OAAQA,GACJ,IAAK,WACD,MAAO,UACX,IAAK,UACD,MAAO,UACX,IAAK,WACD,MAAO,QAGX,QACI,MAAO,UACf,EAGES,GAAsBC,GAEf,SADDA,GAEOvE,EAAAA,GAAAA,KAACwE,EAAAA,EAAQ,CAACC,SAAS,WAInBzE,EAAAA,GAAAA,KAAC0E,EAAAA,EAAe,CAACD,SAAS,UAI7C,OACIE,EAAAA,GAAAA,MAAAC,GAAAA,SAAA,CAAAhF,SAAA,EACII,EAAAA,GAAAA,KAAC6E,EAAAA,GAAM,CAAAjF,UACHI,EAAAA,GAAAA,KAAA,SAAAJ,SAAO,8CAGX+E,EAAAA,GAAAA,MAACG,EAAAA,EAAS,CAACC,SAAS,KAAInF,SAAA,EACpB+E,EAAAA,GAAAA,MAACvE,EAAAA,EAAG,CAACC,GAAI,CAAE2E,GAAI,EAAGC,GAAI,GAAIrF,SAAA,EACtBI,EAAAA,GAAAA,KAACkF,EAAAA,EAAU,CAACC,QAAQ,KAAKC,UAAU,KAAKC,cAAY,EAAChF,GAAI,CAAEiF,MAAO,SAAU1F,SAAC,8BAG7EI,EAAAA,GAAAA,KAACkF,EAAAA,EAAU,CAACC,QAAQ,QAAQ9E,GAAI,CAAEiF,MAAO,SAAU1F,SAAC,qEAMxDI,EAAAA,GAAAA,KAACI,EAAAA,EAAG,CAACC,GAAI,CAAEkF,aAAc,EAAGC,YAAa,UAAWP,GAAI,GAAIrF,UACxD+E,EAAAA,GAAAA,MAACc,EAAAA,EAAI,CACD5F,MAAOa,EACPgF,SAAUA,CAACC,EAAGC,IAAajF,EAAYiF,GACvCvF,GAAI,CACA,iBAAkB,CACdiF,MAAO,QACP,iBAAkB,CACdA,MAAO,WAGjB1F,SAAA,EAEFI,EAAAA,GAAAA,KAAC6F,EAAAA,EAAG,CAACC,MAAM,kBACX9F,EAAAA,GAAAA,KAAC6F,EAAAA,EAAG,CAACC,MAAM,yBACX9F,EAAAA,GAAAA,KAAC6F,EAAAA,EAAG,CAACC,MAAM,qBACX9F,EAAAA,GAAAA,KAAC6F,EAAAA,EAAG,CAACC,MAAM,mCAKnBnB,EAAAA,GAAAA,MAACjF,GAAQ,CAACG,MAAOa,EAAUZ,MAAO,EAAEF,SAAA,EAChCI,EAAAA,GAAAA,KAAC+F,EAAAA,EAAI,CAAC1F,GAAI,CAAE4E,GAAI,GAAIrF,UAChBI,EAAAA,GAAAA,KAACgG,EAAAA,EAAW,CAAApG,UACR+E,EAAAA,GAAAA,MAACsB,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAGC,WAAW,SAAQxG,SAAA,EAC3CI,EAAAA,GAAAA,KAACiG,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAE3G,UACrBI,EAAAA,GAAAA,KAACwG,EAAAA,EAAS,CACNC,WAAS,EACTC,YAAY,qDACZ7G,MAAOsB,GACPuE,SAAWC,GAAMvE,GAAcuE,EAAEgB,OAAO9G,OACxC+G,WAAY,CACRC,gBACI7G,EAAAA,GAAAA,KAAC8G,EAAAA,EAAc,CAACC,SAAS,QAAOnH,UAC5BI,EAAAA,GAAAA,KAACgH,EAAAA,EAAU,CAAC3G,GAAI,CAAEiF,MAAO,cAIrCjF,GAAI,CACA,uBAAwB,CACpBiF,MAAO,QACP,aAAc,CAAEE,YAAa,SAC7B,mBAAoB,CAAEA,YAAa,SACnC,yBAA0B,CAAEA,YAAa,gBAKzDxF,EAAAA,GAAAA,KAACiG,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAE3G,UACrB+E,EAAAA,GAAAA,MAACsC,EAAAA,EAAW,CAACR,WAAS,EAACpG,GAAI,CACvB,uBAAwB,CACpBiF,MAAO,QACP,aAAc,CAAEE,YAAa,WAEnC5F,SAAA,EACEI,EAAAA,GAAAA,KAACkH,EAAAA,EAAU,CAAAtH,SAAC,YACZ+E,EAAAA,GAAAA,MAACwC,EAAAA,EAAM,CACHtH,MAAOwB,GACPqE,SAAWC,GAAMrE,GAAgBqE,EAAEgB,OAAO9G,OAC1CiG,MAAM,SAAQlG,SAAA,EAEdI,EAAAA,GAAAA,KAACoH,EAAAA,EAAQ,CAACvH,MAAM,MAAMQ,GAAI,CAAEiF,MAAO,SAAU1F,SAAC,kBAC9CI,EAAAA,GAAAA,KAACoH,EAAAA,EAAQ,CAACvH,MAAM,QAAQQ,GAAI,CAAEiF,MAAO,SAAU1F,SAAC,WAChDI,EAAAA,GAAAA,KAACoH,EAAAA,EAAQ,CAACvH,MAAM,UAAUQ,GAAI,CAAEiF,MAAO,SAAU1F,SAAC,oBAClDI,EAAAA,GAAAA,KAACoH,EAAAA,EAAQ,CAACvH,MAAM,WAAWQ,GAAI,CAAEiF,MAAO,SAAU1F,SAAC,cACnDI,EAAAA,GAAAA,KAACoH,EAAAA,EAAQ,CAACvH,MAAM,WAAWQ,GAAI,CAAEiF,MAAO,SAAU1F,SAAC,sBAI/DI,EAAAA,GAAAA,KAACiG,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAE3G,UACrB+E,EAAAA,GAAAA,MAACsC,EAAAA,EAAW,CAACR,WAAS,EAACpG,GAAI,CACvB,uBAAwB,CACpBiF,MAAO,QACP,aAAc,CAAEE,YAAa,WAEnC5F,SAAA,EACEI,EAAAA,GAAAA,KAACkH,EAAAA,EAAU,CAAAtH,SAAC,UACZ+E,EAAAA,GAAAA,MAACwC,EAAAA,EAAM,CACHtH,MAAO0B,GACPmE,SAAWC,GAAMnE,GAAcmE,EAAEgB,OAAO9G,OACxCiG,MAAM,OAAMlG,SAAA,EAEZI,EAAAA,GAAAA,KAACoH,EAAAA,EAAQ,CAACvH,MAAM,MAAMQ,GAAI,CAAEiF,MAAO,SAAU1F,SAAC,eAC9CI,EAAAA,GAAAA,KAACoH,EAAAA,EAAQ,CAACvH,MAAM,OAAOQ,GAAI,CAAEiF,MAAO,SAAU1F,SAAC,mBAC/CI,EAAAA,GAAAA,KAACoH,EAAAA,EAAQ,CAACvH,MAAM,OAAOQ,GAAI,CAAEiF,MAAO,SAAU1F,SAAC,2BAI3DI,EAAAA,GAAAA,KAACiG,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAE3G,UACrB+E,EAAAA,GAAAA,MAACO,EAAAA,EAAU,CAACC,QAAQ,QAAQ9E,GAAI,CAAEiF,MAAO,SAAU1F,SAAA,CAAC,UACxCmB,GAAiBsG,OAAO,yBAOpDrH,EAAAA,GAAAA,KAACsH,EAAAA,EAAc,CAAClC,UAAWmC,EAAAA,EAAOlH,GAAI,CAClCmH,gBAAiB,OACjB,0CAA2C,CACvCA,gBAAiB,UACjBlC,MAAO,QACPmC,WAAY,KAEhB,0CAA2C,CACvCnC,MAAO,UAEb1F,UACE+E,EAAAA,GAAAA,MAAC+C,EAAAA,EAAK,CAAA9H,SAAA,EACFI,EAAAA,GAAAA,KAAC2H,EAAAA,EAAS,CAAA/H,UACN+E,EAAAA,GAAAA,MAACiD,EAAAA,EAAQ,CAAAhI,SAAA,EACLI,EAAAA,GAAAA,KAAC6H,EAAAA,EAAS,CAAAjI,SAAC,aACXI,EAAAA,GAAAA,KAAC6H,EAAAA,EAAS,CAAAjI,SAAC,WACXI,EAAAA,GAAAA,KAAC6H,EAAAA,EAAS,CAAAjI,SAAC,UACXI,EAAAA,GAAAA,KAAC6H,EAAAA,EAAS,CAAAjI,SAAC,YACXI,EAAAA,GAAAA,KAAC6H,EAAAA,EAAS,CAAAjI,SAAC,WACXI,EAAAA,GAAAA,KAAC6H,EAAAA,EAAS,CAAAjI,SAAC,eACXI,EAAAA,GAAAA,KAAC6H,EAAAA,EAAS,CAAAjI,SAAC,aACXI,EAAAA,GAAAA,KAAC6H,EAAAA,EAAS,CAAAjI,SAAC,kBAGnBI,EAAAA,GAAAA,KAAC8H,EAAAA,EAAS,CAAAlI,SACLmB,GAAiBmD,KAAKZ,IAAO,IAAAyE,EAAAC,EAAAC,EAAA,OAC1BtD,EAAAA,GAAAA,MAACiD,EAAAA,EAAQ,CAAkBvH,GAAI,CAAE,UAAW,CAAEmH,gBAAiB,YAAc5H,SAAA,EACzEI,EAAAA,GAAAA,KAAC6H,EAAAA,EAAS,CAAAjI,UACN+E,EAAAA,GAAAA,MAACvE,EAAAA,EAAG,CAAAR,SAAA,EACAI,EAAAA,GAAAA,KAACkF,EAAAA,EAAU,CAACC,QAAQ,YAAY+C,QAAM,EAAC7H,GAAI,CAAEiF,MAAO,SAAU1F,SACzD0D,EAAQC,SAEboB,EAAAA,GAAAA,MAACO,EAAAA,EAAU,CACPC,QAAQ,UACR9E,GAAI,CAAEiF,MAAO,SACb4C,QAAM,EAAAtI,SAAA,CAEL0D,EAAQI,YAAYyE,UAAU,EAAG,IAAI,eAIlDnI,EAAAA,GAAAA,KAAC6H,EAAAA,EAAS,CAAAjI,UACN+E,EAAAA,GAAAA,MAACvE,EAAAA,EAAG,CAACC,GAAI,CAAE+H,QAAS,OAAQhC,WAAY,SAAUiC,IAAK,GAAIzI,SAAA,EACvDI,EAAAA,GAAAA,KAACsI,EAAAA,EAAM,CAACjI,GAAI,CAAEkI,MAAO,GAAIC,OAAQ,IAAK5I,SACjC0D,EAAQK,MAAM8E,QACXzI,EAAAA,GAAAA,KAAA,OACI0I,IAAKpF,EAAQK,MAAM8E,OACnBE,IAAKrF,EAAQK,MAAMiF,cAGvB5I,EAAAA,GAAAA,KAAC6I,EAAAA,EAAU,CAACpE,SAAS,QAAQpE,GAAI,CAAEiF,MAAO,cAGlDX,EAAAA,GAAAA,MAACvE,EAAAA,EAAG,CAAAR,SAAA,EACA+E,EAAAA,GAAAA,MAACO,EAAAA,EAAU,CAACC,QAAQ,QAAQ9E,GAAI,CAAEiF,MAAO,SAAU1F,SAAA,CAC9C0D,EAAQK,MAAMiF,WAAW,IAAEtF,EAAQK,MAAMmF,cAE9C9I,EAAAA,GAAAA,KAACkF,EAAAA,EAAU,CAACC,QAAQ,UAAU9E,GAAI,CAAEiF,MAAO,SAAU1F,SAChD0D,EAAQK,MAAMC,iBAK/B5D,EAAAA,GAAAA,KAAC6H,EAAAA,EAAS,CAAAjI,UACNI,EAAAA,GAAAA,KAAC+I,EAAAA,EAAI,CACDjD,MAAOxC,EAAQQ,aACfkF,KAAK,QACLC,KAAM3E,GAAmBhB,EAAQQ,cACjCzD,GAAI,CAAEiF,MAAO,cAGrBtF,EAAAA,GAAAA,KAAC6H,EAAAA,EAAS,CAAAjI,UACNI,EAAAA,GAAAA,KAAC+I,EAAAA,EAAI,CACDjD,MAAOxC,EAAQO,OACfyB,MAAOjB,GAAef,EAAQO,QAC9BmF,KAAK,aAGbrE,EAAAA,GAAAA,MAACkD,EAAAA,EAAS,CAAAjI,SAAA,EACN+E,EAAAA,GAAAA,MAACO,EAAAA,EAAU,CAACC,QAAQ,QAAQ9E,GAAI,CAAEiF,MAAO,SAAU1F,SAAA,CAAC,IAC9C0D,EAAQ4F,UAEdvE,EAAAA,GAAAA,MAACO,EAAAA,EAAU,CAACC,QAAQ,UAAU9E,GAAI,CAAEiF,MAAO,SAAU1F,SAAA,CAAC,IAChD0D,EAAQ6F,cAAc,cAGhCnJ,EAAAA,GAAAA,KAAC6H,EAAAA,EAAS,CAAAjI,UACN+E,EAAAA,GAAAA,MAACvE,EAAAA,EAAG,CAACC,GAAI,CAAE+H,QAAS,OAAQgB,cAAe,SAAUf,IAAK,IAAMzI,SAAA,EAC5DI,EAAAA,GAAAA,KAAC+I,EAAAA,EAAI,CACDE,MAAMjJ,EAAAA,GAAAA,KAACqJ,EAAAA,EAAQ,IACfvD,OAAwB,QAAjBiC,EAAAzE,EAAQgG,iBAAS,IAAAvB,OAAA,EAAjBA,EAAmBwB,cAAe,EACzCP,KAAK,QACL7D,QAAQ,WACR9E,GAAI,CAAEiF,MAAO,YAEjBtF,EAAAA,GAAAA,KAAC+I,EAAAA,EAAI,CACDE,MAAMjJ,EAAAA,GAAAA,KAACwJ,EAAAA,EAAO,IACd1D,OAAwB,QAAjBkC,EAAA1E,EAAQgG,iBAAS,IAAAtB,OAAA,EAAjBA,EAAmByB,aAAc,EACxCT,KAAK,QACL7D,QAAQ,WACR9E,GAAI,CAAEiF,MAAO,YAEjBtF,EAAAA,GAAAA,KAAC+I,EAAAA,EAAI,CACDE,MAAMjJ,EAAAA,GAAAA,KAAC0J,EAAAA,EAAW,IAClB5D,MAAO,KAAqB,QAAjBmC,EAAA3E,EAAQgG,iBAAS,IAAArB,OAAA,EAAjBA,EAAmB0B,gBAAiB,IAC/CX,KAAK,QACL7D,QAAQ,WACRG,MAAM,kBAIlBtF,EAAAA,GAAAA,KAAC6H,EAAAA,EAAS,CAAAjI,UACNI,EAAAA,GAAAA,KAACkF,EAAAA,EAAU,CAACC,QAAQ,QAAQ9E,GAAI,CAAEiF,MAAO,SAAU1F,UAC9CgK,EAAAA,EAAAA,GACG,IAAIC,KAAKvG,EAAQwG,YACjB,CAAEC,WAAW,SAIzB/J,EAAAA,GAAAA,KAAC6H,EAAAA,EAAS,CAAAjI,UACN+E,EAAAA,GAAAA,MAACvE,EAAAA,EAAG,CAACC,GAAI,CAAE+H,QAAS,OAAQC,IAAK,IAAMzI,SAAA,EACnCI,EAAAA,GAAAA,KAACgK,EAAAA,EAAO,CAACzG,MAAM,eAAc3D,UACzBI,EAAAA,GAAAA,KAACiK,EAAAA,EAAU,CACPjB,KAAK,QACLkB,QAASA,IAAMC,OAAO9H,KAAK,YAAYiB,EAAQnD,KAAM,UAAUP,UAE/DI,EAAAA,GAAAA,KAACqJ,EAAAA,EAAQ,CAAC5E,SAAS,QAAQpE,GAAI,CAAEiF,MAAO,eAI5B,YAAnBhC,EAAQO,SACLc,EAAAA,GAAAA,MAAAC,GAAAA,SAAA,CAAAhF,SAAA,EACII,EAAAA,GAAAA,KAACgK,EAAAA,EAAO,CAACzG,MAAM,kBAAiB3D,UAC5BI,EAAAA,GAAAA,KAACiK,EAAAA,EAAU,CACPjB,KAAK,QACL1D,MAAM,UACN4E,QAASA,IAAMnG,GAAqBT,EAAQnD,IAAIP,UAEhDI,EAAAA,GAAAA,KAACoK,EAAAA,EAAW,CAAC3F,SAAS,eAG9BzE,EAAAA,GAAAA,KAACgK,EAAAA,EAAO,CAACzG,MAAM,iBAAgB3D,UAC3BI,EAAAA,GAAAA,KAACiK,EAAAA,EAAU,CACPjB,KAAK,QACL1D,MAAM,QACN4E,QAASA,KACLxI,GAAmB4B,GACnB1B,IAAoB,EAAK,EAC3BhC,UAEFI,EAAAA,GAAAA,KAACqK,EAAAA,EAAU,CAAC5F,SAAS,kBAMrCzE,EAAAA,GAAAA,KAACgK,EAAAA,EAAO,CAACzG,MAAM,iBAAgB3D,UAC3BI,EAAAA,GAAAA,KAACiK,EAAAA,EAAU,CACPjB,KAAK,QACL1D,MAAM,QACN4E,QAASA,KACLxI,GAAmB4B,GACnBxB,IAAoB,EAAK,EAC3BlC,UAEFI,EAAAA,GAAAA,KAACsK,EAAAA,EAAU,CAAC7F,SAAS,qBA3I1BnB,EAAQnD,GAgJZ,eAQ/BH,EAAAA,GAAAA,KAACN,GAAQ,CAACG,MAAOa,EAAUZ,MAAO,EAAEF,SAC/BqC,IACG0C,EAAAA,GAAAA,MAACsB,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAEvG,SAAA,EACvBI,EAAAA,GAAAA,KAACiG,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAE3G,UACrBI,EAAAA,GAAAA,KAAC+F,EAAAA,EAAI,CAAAnG,UACD+E,EAAAA,GAAAA,MAACqB,EAAAA,EAAW,CAAApG,SAAA,EACRI,EAAAA,GAAAA,KAACkF,EAAAA,EAAU,CAACC,QAAQ,KAAK9E,GAAI,CAAEiF,MAAO,QAASL,GAAI,GAAIrF,SAAC,oBAGxDI,EAAAA,GAAAA,KAACkF,EAAAA,EAAU,CAACC,QAAQ,KAAK9E,GAAI,CAAEiF,MAAO,SAAU1F,SAC3CqC,GAAesI,yBAKhCvK,EAAAA,GAAAA,KAACiG,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAE3G,UACrBI,EAAAA,GAAAA,KAAC+F,EAAAA,EAAI,CAAAnG,UACD+E,EAAAA,GAAAA,MAACqB,EAAAA,EAAW,CAAApG,SAAA,EACRI,EAAAA,GAAAA,KAACkF,EAAAA,EAAU,CAACC,QAAQ,KAAK9E,GAAI,CAAEiF,MAAO,QAASL,GAAI,GAAIrF,SAAC,uBAGxDI,EAAAA,GAAAA,KAACkF,EAAAA,EAAU,CAACC,QAAQ,KAAK9E,GAAI,CAAEiF,MAAO,SAAU1F,SAC3CqC,GAAeuI,4BAKhCxK,EAAAA,GAAAA,KAACiG,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAE3G,UACrBI,EAAAA,GAAAA,KAAC+F,EAAAA,EAAI,CAAAnG,UACD+E,EAAAA,GAAAA,MAACqB,EAAAA,EAAW,CAAApG,SAAA,EACRI,EAAAA,GAAAA,KAACkF,EAAAA,EAAU,CAACC,QAAQ,KAAK9E,GAAI,CAAEiF,MAAO,QAASL,GAAI,GAAIrF,SAAC,oBAGxDI,EAAAA,GAAAA,KAACkF,EAAAA,EAAU,CAACC,QAAQ,KAAK9E,GAAI,CAAEiF,MAAO,UAAW1F,SAC5CqC,GAAewI,2BAKhCzK,EAAAA,GAAAA,KAACiG,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAE3G,UACrBI,EAAAA,GAAAA,KAAC+F,EAAAA,EAAI,CAAAnG,UACD+E,EAAAA,GAAAA,MAACqB,EAAAA,EAAW,CAAApG,SAAA,EACRI,EAAAA,GAAAA,KAACkF,EAAAA,EAAU,CAACC,QAAQ,KAAK9E,GAAI,CAAEiF,MAAO,QAASL,GAAI,GAAIrF,SAAC,mBAGxD+E,EAAAA,GAAAA,MAACO,EAAAA,EAAU,CAACC,QAAQ,KAAK9E,GAAI,CAAEiF,MAAO,SAAU1F,SAAA,CAAC,IAC3CqC,GAAe0H,yBAMjC3J,EAAAA,GAAAA,KAACiG,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,GAAG1G,UACdI,EAAAA,GAAAA,KAAC+F,EAAAA,EAAI,CAAAnG,UACD+E,EAAAA,GAAAA,MAACqB,EAAAA,EAAW,CAAApG,SAAA,EACRI,EAAAA,GAAAA,KAACkF,EAAAA,EAAU,CAACC,QAAQ,KAAK9E,GAAI,CAAEiF,MAAO,QAASL,GAAI,GAAIrF,SAAC,6BAGxDI,EAAAA,GAAAA,KAACsH,EAAAA,EAAc,CAAA1H,UACX+E,EAAAA,GAAAA,MAAC+C,EAAAA,EAAK,CAAA9H,SAAA,EACFI,EAAAA,GAAAA,KAAC2H,EAAAA,EAAS,CAAA/H,UACN+E,EAAAA,GAAAA,MAACiD,EAAAA,EAAQ,CAAAhI,SAAA,EACLI,EAAAA,GAAAA,KAAC6H,EAAAA,EAAS,CAAAjI,SAAC,aACXI,EAAAA,GAAAA,KAAC6H,EAAAA,EAAS,CAAAjI,SAAC,WACXI,EAAAA,GAAAA,KAAC6H,EAAAA,EAAS,CAAAjI,SAAC,aACXI,EAAAA,GAAAA,KAAC6H,EAAAA,EAAS,CAAAjI,SAAC,UACXI,EAAAA,GAAAA,KAAC6H,EAAAA,EAAS,CAAAjI,SAAC,gBAGnBI,EAAAA,GAAAA,KAAC8H,EAAAA,EAAS,CAAAlI,SACLqC,GAAeyI,aAAaxG,KAAKZ,IAAO,IAAAqH,EAAAC,EAAAC,EAAA,OACrClG,EAAAA,GAAAA,MAACiD,EAAAA,EAAQ,CAAAhI,SAAA,EACLI,EAAAA,GAAAA,KAAC6H,EAAAA,EAAS,CAAAjI,UACNI,EAAAA,GAAAA,KAACkF,EAAAA,EAAU,CAACC,QAAQ,QAAQ9E,GAAI,CAAEiF,MAAO,SAAU1F,SAC9C0D,EAAQC,WAGjBvD,EAAAA,GAAAA,KAAC6H,EAAAA,EAAS,CAAAjI,UACN+E,EAAAA,GAAAA,MAACO,EAAAA,EAAU,CAACC,QAAQ,QAAQ9E,GAAI,CAAEiF,MAAO,SAAU1F,SAAA,CAC9C0D,EAAQK,MAAMiF,WAAW,IAAEtF,EAAQK,MAAMmF,gBAGlD9I,EAAAA,GAAAA,KAAC6H,EAAAA,EAAS,CAAAjI,UACN+E,EAAAA,GAAAA,MAACO,EAAAA,EAAU,CAACC,QAAQ,QAAQ9E,GAAI,CAAEiF,MAAO,SAAU1F,SAAA,CAAC,KAC7B,QAAjB+K,EAAArH,EAAQgG,iBAAS,IAAAqB,OAAA,EAAjBA,EAAmBhB,gBAAiB,QAG9C3J,EAAAA,GAAAA,KAAC6H,EAAAA,EAAS,CAAAjI,UACNI,EAAAA,GAAAA,KAACkF,EAAAA,EAAU,CAACC,QAAQ,QAAQ9E,GAAI,CAAEiF,MAAO,SAAU1F,UAC7B,QAAjBgL,EAAAtH,EAAQgG,iBAAS,IAAAsB,OAAA,EAAjBA,EAAmBnB,aAAc,OAG1CzJ,EAAAA,GAAAA,KAAC6H,EAAAA,EAAS,CAAAjI,UACNI,EAAAA,GAAAA,KAACkF,EAAAA,EAAU,CAACC,QAAQ,QAAQ9E,GAAI,CAAEiF,MAAO,SAAU1F,UAC7B,QAAjBiL,EAAAvH,EAAQgG,iBAAS,IAAAuB,OAAA,EAAjBA,EAAmBtB,cAAe,QAvBhCjG,EAAQnD,GA0BZ,sBAU3CwE,EAAAA,GAAAA,MAACvE,EAAAA,EAAG,CAACC,GAAI,CAAEyK,UAAW,SAAU9F,GAAI,GAAIpF,SAAA,EACpCI,EAAAA,GAAAA,KAAC+K,EAAAA,EAAc,CAAC1K,GAAI,CAAE4E,GAAI,MAC1BjF,EAAAA,GAAAA,KAACkF,EAAAA,EAAU,CAACC,QAAQ,KAAK9E,GAAI,CAAEiF,MAAO,SAAU1F,SAAC,+BAQ7DI,EAAAA,GAAAA,KAACN,GAAQ,CAACG,MAAOa,EAAUZ,MAAO,EAAEF,UAChCI,EAAAA,GAAAA,KAAC+F,EAAAA,EAAI,CAAAnG,UACD+E,EAAAA,GAAAA,MAACqB,EAAAA,EAAW,CAAApG,SAAA,EACRI,EAAAA,GAAAA,KAACkF,EAAAA,EAAU,CAACC,QAAQ,KAAK9E,GAAI,CAAEiF,MAAO,QAASL,GAAI,GAAIrF,SAAC,4BAGvDmB,GAAiBsC,QAAO/C,GAAkB,YAAbA,EAAEuD,SAAsBwD,OAAS,GAC3DrH,EAAAA,GAAAA,KAACgL,EAAAA,EAAI,CAAApL,SACAmB,GACIsC,QAAOC,GAA8B,YAAnBA,EAAQO,SAC1BK,KAAKZ,IACFqB,EAAAA,GAAAA,MAACsG,EAAAA,GAAQ,CAAkBC,SAAO,EAAAtL,SAAA,EAC9BI,EAAAA,GAAAA,KAACmL,EAAAA,EAAY,CAAAvL,SACR0E,GAAmBhB,EAAQQ,iBAEhC9D,EAAAA,GAAAA,KAACoL,EAAAA,EAAY,CACTC,QAAS/H,EAAQC,MACjB+H,WACI3G,EAAAA,GAAAA,MAACvE,EAAAA,EAAG,CAAAR,SAAA,EACAI,EAAAA,GAAAA,KAACkF,EAAAA,EAAU,CAACC,QAAQ,QAAQ9E,GAAI,CAAEiF,MAAO,SAAU1F,SAC9C0D,EAAQI,eAEbiB,EAAAA,GAAAA,MAACO,EAAAA,EAAU,CAACC,QAAQ,UAAU9E,GAAI,CAAEiF,MAAO,SAAU1F,SAAA,CAAC,MAC9C0D,EAAQK,MAAMiF,WAAW,IAAEtF,EAAQK,MAAMmF,UAAU,oBAC9Cc,EAAAA,EAAAA,GAAoB,IAAIC,KAAKvG,EAAQwG,YAAa,CAAEC,WAAW,UAIpF1J,GAAI,CAAE,6BAA8B,CAAEiF,MAAO,aAEjDX,EAAAA,GAAAA,MAACvE,EAAAA,EAAG,CAACC,GAAI,CAAE+H,QAAS,OAAQC,IAAK,GAAIzI,SAAA,EACjCI,EAAAA,GAAAA,KAACuL,EAAAA,EAAM,CACHvC,KAAK,QACL1D,MAAM,UACNkG,WAAWxL,EAAAA,GAAAA,KAACoK,EAAAA,EAAW,IACvBF,QAASA,IAAMnG,GAAqBT,EAAQnD,IAAIP,SACnD,aAGDI,EAAAA,GAAAA,KAACuL,EAAAA,EAAM,CACHvC,KAAK,QACL1D,MAAM,QACNkG,WAAWxL,EAAAA,GAAAA,KAACqK,EAAAA,EAAU,IACtBH,QAASA,KACLxI,GAAmB4B,GACnB1B,IAAoB,EAAK,EAC3BhC,SACL,gBApCM0D,EAAQnD,SA4CnCH,EAAAA,GAAAA,KAACkF,EAAAA,EAAU,CAACC,QAAQ,QAAQ9E,GAAI,CAAEiF,MAAO,QAASwF,UAAW,UAAWlL,SAAC,uCASzFI,EAAAA,GAAAA,KAACN,GAAQ,CAACG,MAAOa,EAAUZ,MAAO,EAAEF,UAChCI,EAAAA,GAAAA,KAAC+F,EAAAA,EAAI,CAAAnG,UACD+E,EAAAA,GAAAA,MAACqB,EAAAA,EAAW,CAAApG,SAAA,EACRI,EAAAA,GAAAA,KAACkF,EAAAA,EAAU,CAACC,QAAQ,KAAK9E,GAAI,CAAEiF,MAAO,QAASL,GAAI,GAAIrF,SAAC,8BAGxDI,EAAAA,GAAAA,KAACkF,EAAAA,EAAU,CAACC,QAAQ,QAAQ9E,GAAI,CAAEiF,MAAO,QAASL,GAAI,GAAIrF,SAAC,mEAI1DmB,GAAiBsC,QAAO/C,IAAC,IAAAmL,EAAA,OAAmB,QAAfA,EAAAnL,EAAEoL,qBAAa,IAAAD,OAAA,EAAfA,EAAiBpE,QAAS,CAAC,IAAEA,OAAS,GAChErH,EAAAA,GAAAA,KAACgL,EAAAA,EAAI,CAAApL,SACAmB,GACIsC,QAAOC,IAAO,IAAAqI,EAAA,OAAyB,QAArBA,EAAArI,EAAQoI,qBAAa,IAAAC,OAAA,EAArBA,EAAuBtE,QAAS,CAAC,IACnDnD,KAAKZ,IACFqB,EAAAA,GAAAA,MAACsG,EAAAA,GAAQ,CAAkBC,SAAO,EAAAtL,SAAA,EAC9BI,EAAAA,GAAAA,KAACmL,EAAAA,EAAY,CAAAvL,UACTI,EAAAA,GAAAA,KAAC4L,EAAAA,EAAiB,CAACvL,GAAI,CAAEiF,MAAO,cAEpCtF,EAAAA,GAAAA,KAACoL,EAAAA,EAAY,CACTC,QAAS/H,EAAQC,MACjB+H,WACI3G,EAAAA,GAAAA,MAACvE,EAAAA,EAAG,CAAAR,SAAA,EACA+E,EAAAA,GAAAA,MAACO,EAAAA,EAAU,CAACC,QAAQ,QAAQ9E,GAAI,CAAEiF,MAAO,SAAU1F,SAAA,CAC9C0D,EAAQoI,cAAcrE,OAAO,qBAElC1C,EAAAA,GAAAA,MAACO,EAAAA,EAAU,CAACC,QAAQ,UAAU9E,GAAI,CAAEiF,MAAO,SAAU1F,SAAA,CAAC,UAC1C0D,EAAQK,MAAMiF,WAAW,IAAEtF,EAAQK,MAAMmF,gBAI7DzI,GAAI,CAAE,6BAA8B,CAAEiF,MAAO,aAEjDtF,EAAAA,GAAAA,KAACuL,EAAAA,EAAM,CACHvC,KAAK,QACL7D,QAAQ,WACRqG,WAAWxL,EAAAA,GAAAA,KAACqJ,EAAAA,EAAQ,IACpBa,QAASA,IAAMC,OAAO9H,KAAK,YAAYiB,EAAQnD,KAAM,UAAUP,SAClE,mBAvBU0D,EAAQnD,SA8BnCH,EAAAA,GAAAA,KAACkF,EAAAA,EAAU,CAACC,QAAQ,QAAQ9E,GAAI,CAAEiF,MAAO,QAASwF,UAAW,UAAWlL,SAAC,4CASzF+E,EAAAA,GAAAA,MAACkH,EAAAA,EAAM,CACHxJ,KAAMV,GACNmK,QAASA,IAAMlK,IAAoB,GACnCmD,SAAS,KACT0B,WAAS,EAAA7G,SAAA,EAETI,EAAAA,GAAAA,KAAC+L,EAAAA,EAAW,CAAC1L,GAAI,CAAEiF,MAAO,SAAU1F,SAAC,oBACrC+E,EAAAA,GAAAA,MAACqH,EAAAA,EAAa,CAAApM,SAAA,EACV+E,EAAAA,GAAAA,MAACO,EAAAA,EAAU,CAACC,QAAQ,QAAQ9E,GAAI,CAAE4E,GAAI,EAAGK,MAAO,SAAU1F,SAAA,CAAC,oCACN,OAAf6B,SAAe,IAAfA,QAAe,EAAfA,GAAiB8B,MAAM,SAE7DvD,EAAAA,GAAAA,KAACwG,EAAAA,EAAS,CACNC,WAAS,EACTwF,WAAS,EACTC,KAAM,EACNpG,MAAM,kCACNjG,MAAOkC,GACP2D,SAAWC,GAAM3D,GAAgB2D,EAAEgB,OAAO9G,OAC1C6G,YAAY,2CACZrG,GAAI,CACA,uBAAwB,CACpBiF,MAAO,QACP,aAAc,CAAEE,YAAa,UAEjC,wBAAyB,CACrBF,MAAO,gBAKvBX,EAAAA,GAAAA,MAACwH,EAAAA,EAAa,CAAAvM,SAAA,EACVI,EAAAA,GAAAA,KAACuL,EAAAA,EAAM,CAACrB,QAASA,IAAMtI,IAAoB,GAAQvB,GAAI,CAAEiF,MAAO,SAAU1F,SAAC,YAG3EI,EAAAA,GAAAA,KAACuL,EAAAA,EAAM,CACHrB,QAASA,IAvoBLtH,WACxB,UACUE,GAAAA,EAAesJ,cAAcnI,EAAWlC,IAC9CjB,GAAYD,GAASqD,KAAIZ,GACrBA,EAAQnD,KAAO8D,EACT,IAAKX,EAASO,OAAQ,YACtBP,KAEV1B,IAAoB,GACpBI,GAAgB,IAChBI,GAAY,CACRC,MAAM,EACNC,QAAS,iCACTC,SAAU,YAEdG,IACJ,CAAE,MAAOO,GACLC,QAAQD,MAAM,2BAA4BA,GAC1Cb,GAAY,CACRC,MAAM,EACNC,QAAS,2BACTC,SAAU,SAElB,GAgnBmC8J,CAAoB5K,GAAgBtB,IACnDmF,MAAM,QACNH,QAAQ,YAAWvF,SACtB,0BAOT+E,EAAAA,GAAAA,MAACkH,EAAAA,EAAM,CACHxJ,KAAMR,GACNiK,QAAS1H,GACTW,SAAS,KACT0B,WAAS,EAAA7G,SAAA,EAET+E,EAAAA,GAAAA,MAACoH,EAAAA,EAAW,CAAC1L,GAAI,CACbiF,MAAO,QACPkC,gBAAiB,UACjBY,QAAS,OACThC,WAAY,SACZiC,IAAK,GACPzI,SAAA,EACEI,EAAAA,GAAAA,KAACsK,EAAAA,EAAU,CAACjK,GAAI,CAAEiF,MAAO,aAAe,qBAG5CX,EAAAA,GAAAA,MAACqH,EAAAA,EAAa,CAAC3L,GAAI,CAAEmH,gBAAiB,UAAW8E,GAAI,GAAI1M,SAAA,EACrD+E,EAAAA,GAAAA,MAACO,EAAAA,EAAU,CAACC,QAAQ,QAAQ9E,GAAI,CAAEiF,MAAO,QAASL,GAAI,GAAIrF,SAAA,CAAC,gDACM,OAAf6B,SAAe,IAAfA,QAAe,EAAfA,GAAiB8B,MAAM,SAEzEvD,EAAAA,GAAAA,KAACkF,EAAAA,EAAU,CAACC,QAAQ,QAAQ9E,GAAI,CAAEiF,MAAO,WAAY1F,SAAC,gGAI1D+E,EAAAA,GAAAA,MAACwH,EAAAA,EAAa,CAAC9L,GAAI,CAAEmH,gBAAiB,UAAW+E,GAAI,EAAGC,GAAI,GAAI5M,SAAA,EAC5DI,EAAAA,GAAAA,KAACuL,EAAAA,EAAM,CACHrB,QAAS9F,GACT/D,GAAI,CACAiF,MAAO,QACPE,YAAa,QACb,UAAW,CACPA,YAAa,QACbgC,gBAAiB,wBAEvB5H,SACL,YAGDI,EAAAA,GAAAA,KAACuL,EAAAA,EAAM,CACHrB,QAxoBIuC,KACpBhL,IAvBoBmB,WACxB,UACUE,GAAAA,EAAe4J,cAAczI,GACnCnD,GAAYD,GAASwC,QAAOC,GAAWA,EAAQnD,KAAO8D,KACtDnC,IAAoB,GACpBJ,GAAmB,MACnBU,GAAY,CACRC,MAAM,EACNC,QAAS,gCACTC,SAAU,YAEdG,IACJ,CAAE,MAAOO,GACLC,QAAQD,MAAM,0BAA2BA,GACzCb,GAAY,CACRC,MAAM,EACNC,QAAS,2BACTC,SAAU,SAElB,GAKIoK,CAAoBlL,GAAgBtB,GACxC,EAsoBoBgF,QAAQ,YACRG,MAAM,QACNkG,WAAWxL,EAAAA,GAAAA,KAACsK,EAAAA,EAAU,IACtBjK,GAAI,CACAmH,gBAAiB,UACjB,UAAW,CACPA,gBAAiB,YAEvB5H,SACL,0BAMTI,EAAAA,GAAAA,KAAC4M,EAAAA,EAAQ,CACLvK,KAAMF,GAASE,KACfwK,iBAAkB,IAClBf,QAASA,IAAM1J,GAAY,IAAKD,GAAUE,MAAM,IAASzC,UAEzDI,EAAAA,GAAAA,KAAC8M,EAAAA,EAAK,CACFhB,QAASA,IAAM1J,GAAY,IAAKD,GAAUE,MAAM,IAChDE,SAAUJ,GAASI,SACnBlC,GAAI,CAAEkI,MAAO,QAAS3I,SAErBuC,GAASG,iBAIvB,C,0DCj5BX,MAAMyK,EAAeC,0BA2BfC,EAAMC,EAAAA,EAAMC,OAAO,CACvBC,QAAS,GAAGL,QACZM,QAAS,CACP,eAAgB,oBAElBC,iBAAiB,IAInBL,EAAIM,aAAaC,QAAQC,KACvB7K,eAlCqBA,WACrB,IAEE,GAAK8K,EAAAA,EAAQC,IAAI,aAYfzK,QAAQ0K,IAAI,6BAA8BF,EAAAA,EAAQC,IAAI,aAAe,eAAiB,sBAZzD,CAC7BzK,QAAQ0K,IAAI,8CACZ,MAAM/K,QAAiBqK,EAAAA,EAAMS,IAAI,GAAGZ,wBAAoC,CACtEO,iBAAiB,IAEnB,GAAwB,MAApBzK,EAASgB,OAAgB,CAC3B,MAAMgK,EAAQH,EAAAA,EAAQC,IAAI,aAC1BzK,QAAQ0K,IAAI,mCAAoCC,EAAQ,iBAAmB,eAC7E,MACE3K,QAAQ4K,KAAK,8BAA+BjL,EAASgB,OAEzD,CAGF,CAAE,MAAOZ,GACPC,QAAQD,MAAM,6BAA8BA,EAE9C,GAgBQ8K,GAEN,MAAMF,EAAQG,aAAaC,QAAQ,eAC/BJ,IACFK,EAAOb,QAAQc,cAAgB,UAAUN,KAI3C,MAAMO,EAAYV,EAAAA,EAAQC,IAAI,aAK9B,OAJIS,IACFF,EAAOb,QAAQ,eAAiBe,GAG3BF,CAAM,IAEdjL,GACQoL,QAAQC,OAAOrL,KAK1BgK,EAAIM,aAAa1K,SAAS4K,KACvB5K,GAAaA,IACbI,IAAW,IAADsL,EAMT,OAL+B,OAAb,QAAdA,EAAAtL,EAAMJ,gBAAQ,IAAA0L,OAAA,EAAdA,EAAgB1K,UAElBmK,aAAaQ,WAAW,eACxBrE,OAAOsE,SAASC,KAAO,UAElBL,QAAQC,OAAOrL,EAAM,IAIzB,MAAMH,EAAiB,CAE5B6L,eAAgB/L,iBAAwB,IAAjBgM,EAAMC,UAAAxH,OAAA,QAAAyH,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAE/B,aADuB5B,EAAIU,IAAI,aAAc,CAAEiB,UAEjD,EAGAG,cAAenM,iBAAwB,IAAjBgM,EAAMC,UAAAxH,OAAA,QAAAyH,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAE9B,aADuB5B,EAAIU,IAAI,yBAA0B,CAAEiB,UAE7D,EAGAI,eAAgBpM,eAAOqM,GAAwB,IAAjBL,EAAMC,UAAAxH,OAAA,QAAAyH,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAItC,aAHuB5B,EAAIU,IAAI,oBAAqB,CAClDiB,OAAQ,CAAEM,EAAGD,KAAUL,IAG3B,EAGAO,WAAYvM,eACaqK,EAAIU,IAAI,aAAa1J,MAK9CmL,cAAexM,eACUqK,EAAIoC,KAAK,aAAcC,GAKhDC,cAAe3M,MAAOqB,EAAWqL,UACRrC,EAAIuC,IAAI,aAAavL,KAAcqL,GAK5D5C,cAAe9J,eACUqK,EAAIwC,OAAO,aAAaxL,MAKjDyL,WAAY9M,eAAOqB,GAA+B,IAApB0L,EAASd,UAAAxH,OAAA,QAAAyH,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAEzC,aADuB5B,EAAIoC,KAAK,aAAapL,SAAkB0L,EAEjE,EAGAC,WAAYhN,eAAOqB,GAAkC,IAAvB4L,EAAYhB,UAAAxH,OAAA,QAAAyH,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAE5C,aADuB5B,EAAIoC,KAAK,aAAapL,SAAkB4L,EAEjE,EAGAC,iBAAkBlN,eACOqK,EAAIoC,KAAK,aAAapL,WAK/C8L,oBAAqBnN,eACIqK,EAAIU,IAAI,aAAa1J,gBAK9C+L,iBAAkBpN,eACOqK,EAAIU,IAAI,aAAa1J,oBAK9CgM,gBAAiBrN,MAAOqB,EAAWiM,UACVjD,EAAIoC,KAAK,aAAapL,sBAA+BiM,GAK9EC,mBAAoBvN,MAAOqB,EAAWmM,UACbnD,EAAIoC,KAAK,aAAapL,yBAAkC,CAAEoM,QAASD,IAK5FE,uBAAwB1N,MAAOqB,EAAWsM,UACjBtD,EAAIoC,KAAK,aAAapL,+BAAwCsM,GAKvFC,mBAAoB5N,eACKqK,EAAIU,IAAI,aAAa1J,uBAK9CwM,uBAAwB7N,MAAOqB,EAAWyM,UACjBzD,EAAIoC,KAAK,aAAapL,cAAsByM,wBAKrEC,mBAAoB/N,eACKqK,EAAIU,IAAI,aAAa1J,eAK9C2M,qBAAsBhO,MAAOqB,EAAWsM,UACftD,EAAIoC,KAAK,aAAapL,cAAuBsM,GAKtEM,qBAAsBjO,MAAOqB,EAAWyM,EAAWH,UAC1BtD,EAAIuC,IAAI,aAAavL,cAAsByM,KAAcH,GAKlFO,qBAAsBlO,MAAOqB,EAAWyM,UACfzD,EAAIwC,OAAO,aAAaxL,cAAsByM,MAKvEK,sBAAuBnO,MAAOqB,EAAWyM,UAChBzD,EAAIoC,KAAK,aAAapL,cAAsByM,cAKrEM,qBAAsBpO,eAAOqB,EAAWyM,GAA4B,IAAjBO,EAAMpC,UAAAxH,OAAA,QAAAyH,IAAAD,UAAA,GAAAA,UAAA,GAAG,GAE1D,aADuB5B,EAAIoC,KAAK,aAAapL,cAAsByM,YAAqB,CAAEO,UAE5F,EAGAC,0BAA2BtO,MAAOqB,EAAWkN,UACpBlE,EAAIoC,KAAK,aAAapL,yBAAkC,CAAEkN,SAKnFC,sBAAuBxO,eACEqK,EAAIU,IAAI,aAAa1J,0BAK9CoN,yBAA0BzO,MAAOqB,EAAWqN,EAAYC,UAC/BtE,EAAIuC,IAAI,aAAavL,yBAAiCqN,KAAeC,GAM9FxO,oBAAqBH,iBAAwB,IAAjBgM,EAAMC,UAAAxH,OAAA,QAAAyH,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAEpC,aADuB5B,EAAIU,IAAI,4BAA6B,CAAEiB,UAEhE,EAGAzL,kBAAmBP,eACMqK,EAAIU,IAAI,uCAKjC3J,eAAgBpB,eACSqK,EAAIoC,KAAK,4BAA4BpL,cAK9DmI,cAAexJ,eAAOqB,GAA4B,IAAjBgN,EAAMpC,UAAAxH,OAAA,QAAAyH,IAAAD,UAAA,GAAAA,UAAA,GAAG,GAExC,aADuB5B,EAAIoC,KAAK,4BAA4BpL,YAAqB,CAAEgN,UAErF,EAGAO,gBAAiB5O,eACQqK,EAAIU,IAAI,aAAa1J,YAK9CwN,oBAAqB7O,eACIqK,EAAIU,IAAI,aAAa1J,iBAK9CyN,aAAc9O,eACWqK,EAAIU,IAAI,aAAa1J,iBAK9CuM,mBAAoB5N,eACKqK,EAAIU,IAAI,aAAa1J,uBAK9C0N,eAAgB/O,MAAOqB,EAAWyM,UACTzD,EAAIoC,KAAK,aAAapL,cAAsByM,cAKrEkB,cAAehP,MAAOqB,EAAWyM,EAAWO,UACnBhE,EAAIoC,KAAK,aAAapL,cAAsByM,YAAqB,CAAEO,WAK5FX,uBAAwB1N,MAAOqB,EAAWsM,UACjBtD,EAAIoC,KAAK,aAAapL,+BAAwCsM,GAKvFsB,gBAAiBjP,MAAOqB,EAAW6N,UACV7E,EAAIoC,KAAK,aAAapL,uBAAgC6N,GAK/EC,iBAAkBnP,eACOqK,EAAIU,IAAI,oBAAoB1J,MAKrD+N,kBAAmBpP,eACMqK,EAAIU,IAAI,qBAAqBsE,MAKtDC,YAAatP,MAAOuO,EAAMgB,UACDlF,EAAIoC,KAAK,0BAA2B,CACzD8B,KAAMA,EACNgB,SAAUA,IAMdC,eAAgBxP,iBAAyB,IAAlByP,EAAOxD,UAAAxH,OAAA,QAAAyH,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAChC,MAAM,MACJI,EAAQ,GAAE,YACVqD,EAAc,GAAE,SAChBH,EAAW,GAAE,SACbI,EAAW,GAAE,SACbC,EAAW,GAAE,OACbC,EAAS,aAAY,UACrBC,EAAY,QACVL,EAEEzD,EAAS,CACbM,EAAGD,EACH1K,KAAM+N,EACNH,SAAUA,EACVQ,UAAWJ,EACXK,UAAWJ,EACXK,QAASJ,EACTK,WAAYJ,GAId,aADuBzF,EAAIU,IAAI,oBAAqB,CAAEiB,UAExD,E","sources":["content/applications/Projects/AdminProjectManagement.js","services/projectService.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Helmet } from 'react-helmet-async';\r\nimport {\r\n    Alert,\r\n    Avatar,\r\n    Box,\r\n    Button,\r\n    Card,\r\n    CardContent,\r\n    Chip,\r\n    Container,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    FormControl,\r\n    Grid,\r\n    IconButton,\r\n    InputAdornment,\r\n    InputLabel,\r\n    MenuItem,\r\n    Paper,\r\n    Select,\r\n    Snackbar,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    TextField,\r\n    Tooltip,\r\n    Typography,\r\n    Tabs,\r\n    Tab,\r\n    List,\r\n    ListItem,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    Divider,\r\n    LinearProgress\r\n} from '@mui/material';\r\nimport {\r\n    Cancel as RejectIcon,\r\n    CheckCircle as ApproveIcon,\r\n    Delete as DeleteIcon,\r\n    Edit as EditIcon,\r\n    Person as PersonIcon,\r\n    Search as SearchIcon,\r\n    Visibility as ViewIcon,\r\n    Group as CollaborationIcon,\r\n    TrendingUp as AnalyticsIcon,\r\n    Code as CodeIcon,\r\n    Description as DescriptionIcon,\r\n    Star as StarIcon,\r\n    MonetizationOn as RevenueIcon,\r\n    PlayArrow as RunIcon,\r\n    Timer as TimerIcon,\r\n    Memory as MemoryIcon,\r\n    Storage as StorageIcon,\r\n    Speed as SpeedIcon\r\n} from '@mui/icons-material';\r\nimport { formatDistanceToNow } from 'date-fns';\r\nimport { useAuth } from 'src/contexts/AuthContext';\r\nimport { projectService } from 'src/services/projectService';\r\n\r\nconst TabPanel = ({ children, value, index, ...other }) => (\r\n    <div\r\n        role=\"tabpanel\"\r\n        hidden={value !== index}\r\n        id={`admin-tabpanel-${index}`}\r\n        aria-labelledby={`admin-tab-${index}`}\r\n        {...other}\r\n    >\r\n        {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\r\n    </div>\r\n);\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.number.isRequired,\r\n    value: PropTypes.number.isRequired,\r\n};\r\n\r\nconst AdminProjectManagement = () => {\r\n    const { user } = useAuth();\r\n    \r\n    const [tabValue, setTabValue] = useState(0);\r\n    const [projects, setProjects] = useState([]);\r\n    const [filteredProjects, setFilteredProjects] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [filterStatus, setFilterStatus] = useState('all');\r\n    const [filterType, setFilterType] = useState('all');\r\n    const [selectedProject, setSelectedProject] = useState(null);\r\n    const [openRejectDialog, setOpenRejectDialog] = useState(false);\r\n    const [openDeleteDialog, setOpenDeleteDialog] = useState(false);\r\n    const [rejectReason, setRejectReason] = useState('');\r\n    const [adminAnalytics, setAdminAnalytics] = useState(null);\r\n    const [snackbar, setSnackbar] = useState({\r\n        open: false,\r\n        message: '',\r\n        severity: 'success'\r\n    });\r\n\r\n    useEffect(() => {\r\n        loadProjects();\r\n        loadAdminAnalytics();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        filterProjects();\r\n    }, [projects, searchTerm, filterStatus, filterType]);\r\n\r\n    const loadProjects = async () => {\r\n        try {\r\n            setLoading(true);\r\n            const response = await projectService.getAllProjectsAdmin();\r\n            setProjects(response.data);\r\n        } catch (error) {\r\n            console.error('Error loading projects:', error);\r\n            setSnackbar({\r\n                open: true,\r\n                message: 'Failed to load projects',\r\n                severity: 'error'\r\n            });\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const loadAdminAnalytics = async () => {\r\n        try {\r\n            const response = await projectService.getAdminAnalytics();\r\n            setAdminAnalytics(response.data);\r\n        } catch (error) {\r\n            console.error('Error loading admin analytics:', error);\r\n        }\r\n    };\r\n\r\n    const filterProjects = () => {\r\n        let filtered = [...projects];\r\n\r\n        // Filter by search term\r\n        if (searchTerm) {\r\n            filtered = filtered.filter(project =>\r\n                project.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                project.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                project.owner.email.toLowerCase().includes(searchTerm.toLowerCase())\r\n            );\r\n        }\r\n\r\n        // Filter by status\r\n        if (filterStatus !== 'all') {\r\n            filtered = filtered.filter(project => project.status === filterStatus);\r\n        }\r\n\r\n        // Filter by type\r\n        if (filterType !== 'all') {\r\n            filtered = filtered.filter(project => project.project_type === filterType);\r\n        }\r\n\r\n        setFilteredProjects(filtered);\r\n    };\r\n\r\n    const handleApproveProject = async (projectId) => {\r\n        try {\r\n            await projectService.approveProject(projectId);\r\n            setProjects(projects.map(project => \r\n                project.id === projectId \r\n                    ? { ...project, status: 'approved', is_approved: true }\r\n                    : project\r\n            ));\r\n            setSnackbar({\r\n                open: true,\r\n                message: 'Project approved successfully!',\r\n                severity: 'success'\r\n            });\r\n            loadAdminAnalytics(); // Refresh analytics\r\n        } catch (error) {\r\n            console.error('Error approving project:', error);\r\n            setSnackbar({\r\n                open: true,\r\n                message: 'Failed to approve project',\r\n                severity: 'error'\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleRejectProject = async (projectId) => {\r\n        try {\r\n            await projectService.rejectProject(projectId, rejectReason);\r\n            setProjects(projects.map(project => \r\n                project.id === projectId \r\n                    ? { ...project, status: 'rejected' }\r\n                    : project\r\n            ));\r\n            setOpenRejectDialog(false);\r\n            setRejectReason('');\r\n            setSnackbar({\r\n                open: true,\r\n                message: 'Project rejected successfully!',\r\n                severity: 'success'\r\n            });\r\n            loadAdminAnalytics(); // Refresh analytics\r\n        } catch (error) {\r\n            console.error('Error rejecting project:', error);\r\n            setSnackbar({\r\n                open: true,\r\n                message: 'Failed to reject project',\r\n                severity: 'error'\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleDeleteProject = async (projectId) => {\r\n        try {\r\n            await projectService.deleteProject(projectId);\r\n            setProjects(projects.filter(project => project.id !== projectId));\r\n            setOpenDeleteDialog(false);\r\n            setSelectedProject(null);\r\n            setSnackbar({\r\n                open: true,\r\n                message: 'Project deleted successfully!',\r\n                severity: 'success'\r\n            });\r\n            loadAdminAnalytics(); // Refresh analytics\r\n        } catch (error) {\r\n            console.error('Error deleting project:', error);\r\n            setSnackbar({\r\n                open: true,\r\n                message: 'Failed to delete project',\r\n                severity: 'error'\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleConfirmDelete = () => {\r\n        if (selectedProject) {\r\n            handleDeleteProject(selectedProject.id);\r\n        }\r\n    };\r\n\r\n    const handleCancelDelete = () => {\r\n        setOpenDeleteDialog(false);\r\n        setSelectedProject(null);\r\n    };\r\n\r\n    const getStatusColor = (status) => {\r\n        switch (status) {\r\n            case 'approved':\r\n                return 'success';\r\n            case 'pending':\r\n                return 'warning';\r\n            case 'rejected':\r\n                return 'error';\r\n            case 'draft':\r\n                return 'default';\r\n            default:\r\n                return 'default';\r\n        }\r\n    };\r\n\r\n    const getProjectTypeIcon = (type) => {\r\n        switch (type) {\r\n            case 'code':\r\n                return <CodeIcon fontSize=\"small\" />;\r\n            case 'text':\r\n                return <DescriptionIcon fontSize=\"small\" />;\r\n            default:\r\n                return <DescriptionIcon fontSize=\"small\" />;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>Admin Project Management - OneDollarAI</title>\r\n            </Helmet>\r\n\r\n            <Container maxWidth=\"xl\">\r\n                <Box sx={{ mt: 3, mb: 4 }}>\r\n                    <Typography variant=\"h2\" component=\"h1\" gutterBottom sx={{ color: 'black' }}>\r\n                        Admin Project Management\r\n                    </Typography>\r\n                    <Typography variant=\"body1\" sx={{ color: 'black' }}>\r\n                        Comprehensive management and review system for all projects.\r\n                    </Typography>\r\n                </Box>\r\n\r\n                {/* Tabs */}\r\n                <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}>\r\n                    <Tabs \r\n                        value={tabValue} \r\n                        onChange={(e, newValue) => setTabValue(newValue)}\r\n                        sx={{\r\n                            '& .MuiTab-root': {\r\n                                color: 'black',\r\n                                '&.Mui-selected': {\r\n                                    color: 'black'\r\n                                }\r\n                            }\r\n                        }}\r\n                    >\r\n                        <Tab label=\"All Projects\" />\r\n                        <Tab label=\"Analytics Dashboard\" />\r\n                        <Tab label=\"Pending Reviews\" />\r\n                        <Tab label=\"Collaboration Management\" />\r\n                    </Tabs>\r\n                </Box>\r\n\r\n                {/* All Projects Tab */}\r\n                <TabPanel value={tabValue} index={0}>\r\n                    <Card sx={{ mb: 3 }}>\r\n                        <CardContent>\r\n                            <Grid container spacing={2} alignItems=\"center\">\r\n                                <Grid item xs={12} md={4}>\r\n                                    <TextField\r\n                                        fullWidth\r\n                                        placeholder=\"Search projects by title, description, or owner...\"\r\n                                        value={searchTerm}\r\n                                        onChange={(e) => setSearchTerm(e.target.value)}\r\n                                        InputProps={{\r\n                                            startAdornment: (\r\n                                                <InputAdornment position=\"start\">\r\n                                                    <SearchIcon sx={{ color: 'black' }} />\r\n                                                </InputAdornment>\r\n                                            ),\r\n                                        }}\r\n                                        sx={{\r\n                                            '& .MuiInputBase-root': {\r\n                                                color: 'black',\r\n                                                '& fieldset': { borderColor: 'black' },\r\n                                                '&:hover fieldset': { borderColor: 'black' },\r\n                                                '&.Mui-focused fieldset': { borderColor: 'black' }\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={12} md={2}>\r\n                                    <FormControl fullWidth sx={{\r\n                                        '& .MuiInputBase-root': {\r\n                                            color: 'black',\r\n                                            '& fieldset': { borderColor: 'black' }\r\n                                        }\r\n                                    }}>\r\n                                        <InputLabel>Status</InputLabel>\r\n                                        <Select\r\n                                            value={filterStatus}\r\n                                            onChange={(e) => setFilterStatus(e.target.value)}\r\n                                            label=\"Status\"\r\n                                        >\r\n                                            <MenuItem value=\"all\" sx={{ color: 'black' }}>All Statuses</MenuItem>\r\n                                            <MenuItem value=\"draft\" sx={{ color: 'black' }}>Draft</MenuItem>\r\n                                            <MenuItem value=\"pending\" sx={{ color: 'black' }}>Pending Review</MenuItem>\r\n                                            <MenuItem value=\"approved\" sx={{ color: 'black' }}>Approved</MenuItem>\r\n                                            <MenuItem value=\"rejected\" sx={{ color: 'black' }}>Rejected</MenuItem>\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                <Grid item xs={12} md={2}>\r\n                                    <FormControl fullWidth sx={{\r\n                                        '& .MuiInputBase-root': {\r\n                                            color: 'black',\r\n                                            '& fieldset': { borderColor: 'black' }\r\n                                        }\r\n                                    }}>\r\n                                        <InputLabel>Type</InputLabel>\r\n                                        <Select\r\n                                            value={filterType}\r\n                                            onChange={(e) => setFilterType(e.target.value)}\r\n                                            label=\"Type\"\r\n                                        >\r\n                                            <MenuItem value=\"all\" sx={{ color: 'black' }}>All Types</MenuItem>\r\n                                            <MenuItem value=\"code\" sx={{ color: 'black' }}>Code Projects</MenuItem>\r\n                                            <MenuItem value=\"text\" sx={{ color: 'black' }}>Text Projects</MenuItem>\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                <Grid item xs={12} md={4}>\r\n                                    <Typography variant=\"body2\" sx={{ color: 'black' }}>\r\n                                        Total: {filteredProjects.length} projects\r\n                                    </Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </CardContent>\r\n                    </Card>\r\n\r\n                    <TableContainer component={Paper} sx={{ \r\n                        backgroundColor: '#fff',\r\n                        '& .MuiTableHead-root .MuiTableCell-root': {\r\n                            backgroundColor: '#f5f5f5',\r\n                            color: 'black',\r\n                            fontWeight: 600\r\n                        },\r\n                        '& .MuiTableBody-root .MuiTableCell-root': {\r\n                            color: 'black'\r\n                        }\r\n                    }}>\r\n                        <Table>\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>Project</TableCell>\r\n                                    <TableCell>Owner</TableCell>\r\n                                    <TableCell>Type</TableCell>\r\n                                    <TableCell>Status</TableCell>\r\n                                    <TableCell>Price</TableCell>\r\n                                    <TableCell>Analytics</TableCell>\r\n                                    <TableCell>Created</TableCell>\r\n                                    <TableCell>Actions</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {filteredProjects.map((project) => (\r\n                                    <TableRow key={project.id} sx={{ '&:hover': { backgroundColor: '#f8f9fa' } }}>\r\n                                        <TableCell>\r\n                                            <Box>\r\n                                                <Typography variant=\"subtitle2\" noWrap sx={{ color: 'black' }}>\r\n                                                    {project.title}\r\n                                                </Typography>\r\n                                                <Typography \r\n                                                    variant=\"caption\" \r\n                                                    sx={{ color: 'black' }}\r\n                                                    noWrap\r\n                                                >\r\n                                                    {project.description.substring(0, 50)}...\r\n                                                </Typography>\r\n                                            </Box>\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                                                <Avatar sx={{ width: 32, height: 32 }}>\r\n                                                    {project.owner.avatar ? (\r\n                                                        <img \r\n                                                            src={project.owner.avatar} \r\n                                                            alt={project.owner.first_name} \r\n                                                        />\r\n                                                    ) : (\r\n                                                        <PersonIcon fontSize=\"small\" sx={{ color: 'black' }} />\r\n                                                    )}\r\n                                                </Avatar>\r\n                                                <Box>\r\n                                                    <Typography variant=\"body2\" sx={{ color: 'black' }}>\r\n                                                        {project.owner.first_name} {project.owner.last_name}\r\n                                                    </Typography>\r\n                                                    <Typography variant=\"caption\" sx={{ color: 'black' }}>\r\n                                                        {project.owner.email}\r\n                                                    </Typography>\r\n                                                </Box>\r\n                                            </Box>\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            <Chip\r\n                                                label={project.project_type}\r\n                                                size=\"small\"\r\n                                                icon={getProjectTypeIcon(project.project_type)}\r\n                                                sx={{ color: 'black' }}\r\n                                            />\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            <Chip\r\n                                                label={project.status}\r\n                                                color={getStatusColor(project.status)}\r\n                                                size=\"small\"\r\n                                            />\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            <Typography variant=\"body2\" sx={{ color: 'black' }}>\r\n                                                ${project.price}\r\n                                            </Typography>\r\n                                            <Typography variant=\"caption\" sx={{ color: 'black' }}>\r\n                                                ${project.price_per_use}/use\r\n                                            </Typography>\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 0.5 }}>\r\n                                                <Chip\r\n                                                    icon={<ViewIcon />}\r\n                                                    label={project.analytics?.total_views || 0}\r\n                                                    size=\"small\"\r\n                                                    variant=\"outlined\"\r\n                                                    sx={{ color: 'black' }}\r\n                                                />\r\n                                                <Chip\r\n                                                    icon={<RunIcon />}\r\n                                                    label={project.analytics?.total_runs || 0}\r\n                                                    size=\"small\"\r\n                                                    variant=\"outlined\"\r\n                                                    sx={{ color: 'black' }}\r\n                                                />\r\n                                                <Chip\r\n                                                    icon={<RevenueIcon />}\r\n                                                    label={`$${project.analytics?.total_revenue || 0}`}\r\n                                                    size=\"small\"\r\n                                                    variant=\"outlined\"\r\n                                                    color=\"success\"\r\n                                                />\r\n                                            </Box>\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            <Typography variant=\"body2\" sx={{ color: 'black' }}>\r\n                                                {formatDistanceToNow(\r\n                                                    new Date(project.created_at), \r\n                                                    { addSuffix: true }\r\n                                                )}\r\n                                            </Typography>\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            <Box sx={{ display: 'flex', gap: 0.5 }}>\r\n                                                <Tooltip title=\"View Project\">\r\n                                                    <IconButton \r\n                                                        size=\"small\"\r\n                                                        onClick={() => window.open(`/project/${project.id}`, '_blank')}\r\n                                                    >\r\n                                                        <ViewIcon fontSize=\"small\" sx={{ color: 'black' }} />\r\n                                                    </IconButton>\r\n                                                </Tooltip>\r\n                                                \r\n                                                {project.status === 'pending' && (\r\n                                                    <>\r\n                                                        <Tooltip title=\"Approve Project\">\r\n                                                            <IconButton\r\n                                                                size=\"small\"\r\n                                                                color=\"success\"\r\n                                                                onClick={() => handleApproveProject(project.id)}\r\n                                                            >\r\n                                                                <ApproveIcon fontSize=\"small\" />\r\n                                                            </IconButton>\r\n                                                        </Tooltip>\r\n                                                        <Tooltip title=\"Reject Project\">\r\n                                                            <IconButton\r\n                                                                size=\"small\"\r\n                                                                color=\"error\"\r\n                                                                onClick={() => {\r\n                                                                    setSelectedProject(project);\r\n                                                                    setOpenRejectDialog(true);\r\n                                                                }}\r\n                                                            >\r\n                                                                <RejectIcon fontSize=\"small\" />\r\n                                                            </IconButton>\r\n                                                        </Tooltip>\r\n                                                    </>\r\n                                                )}\r\n                                                \r\n                                                <Tooltip title=\"Delete Project\">\r\n                                                    <IconButton\r\n                                                        size=\"small\"\r\n                                                        color=\"error\"\r\n                                                        onClick={() => {\r\n                                                            setSelectedProject(project);\r\n                                                            setOpenDeleteDialog(true);\r\n                                                        }}\r\n                                                    >\r\n                                                        <DeleteIcon fontSize=\"small\" />\r\n                                                    </IconButton>\r\n                                                </Tooltip>\r\n                                            </Box>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </TabPanel>\r\n\r\n                {/* Analytics Dashboard Tab */}\r\n                <TabPanel value={tabValue} index={1}>\r\n                    {adminAnalytics ? (\r\n                        <Grid container spacing={3}>\r\n                            <Grid item xs={12} md={3}>\r\n                                <Card>\r\n                                    <CardContent>\r\n                                        <Typography variant=\"h6\" sx={{ color: 'black', mb: 2 }}>\r\n                                            Total Projects\r\n                                        </Typography>\r\n                                        <Typography variant=\"h3\" sx={{ color: 'black' }}>\r\n                                            {adminAnalytics.total_projects}\r\n                                        </Typography>\r\n                                    </CardContent>\r\n                                </Card>\r\n                            </Grid>\r\n                            <Grid item xs={12} md={3}>\r\n                                <Card>\r\n                                    <CardContent>\r\n                                        <Typography variant=\"h6\" sx={{ color: 'black', mb: 2 }}>\r\n                                            Approved Projects\r\n                                        </Typography>\r\n                                        <Typography variant=\"h3\" sx={{ color: 'green' }}>\r\n                                            {adminAnalytics.approved_projects}\r\n                                        </Typography>\r\n                                    </CardContent>\r\n                                </Card>\r\n                            </Grid>\r\n                            <Grid item xs={12} md={3}>\r\n                                <Card>\r\n                                    <CardContent>\r\n                                        <Typography variant=\"h6\" sx={{ color: 'black', mb: 2 }}>\r\n                                            Pending Review\r\n                                        </Typography>\r\n                                        <Typography variant=\"h3\" sx={{ color: 'orange' }}>\r\n                                            {adminAnalytics.pending_projects}\r\n                                        </Typography>\r\n                                    </CardContent>\r\n                                </Card>\r\n                            </Grid>\r\n                            <Grid item xs={12} md={3}>\r\n                                <Card>\r\n                                    <CardContent>\r\n                                        <Typography variant=\"h6\" sx={{ color: 'black', mb: 2 }}>\r\n                                            Total Revenue\r\n                                        </Typography>\r\n                                        <Typography variant=\"h3\" sx={{ color: 'green' }}>\r\n                                            ${adminAnalytics.total_revenue}\r\n                                        </Typography>\r\n                                    </CardContent>\r\n                                </Card>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12}>\r\n                                <Card>\r\n                                    <CardContent>\r\n                                        <Typography variant=\"h6\" sx={{ color: 'black', mb: 2 }}>\r\n                                            Top Performing Projects\r\n                                        </Typography>\r\n                                        <TableContainer>\r\n                                            <Table>\r\n                                                <TableHead>\r\n                                                    <TableRow>\r\n                                                        <TableCell>Project</TableCell>\r\n                                                        <TableCell>Owner</TableCell>\r\n                                                        <TableCell>Revenue</TableCell>\r\n                                                        <TableCell>Runs</TableCell>\r\n                                                        <TableCell>Views</TableCell>\r\n                                                    </TableRow>\r\n                                                </TableHead>\r\n                                                <TableBody>\r\n                                                    {adminAnalytics.top_projects.map((project) => (\r\n                                                        <TableRow key={project.id}>\r\n                                                            <TableCell>\r\n                                                                <Typography variant=\"body2\" sx={{ color: 'black' }}>\r\n                                                                    {project.title}\r\n                                                                </Typography>\r\n                                                            </TableCell>\r\n                                                            <TableCell>\r\n                                                                <Typography variant=\"body2\" sx={{ color: 'black' }}>\r\n                                                                    {project.owner.first_name} {project.owner.last_name}\r\n                                                                </Typography>\r\n                                                            </TableCell>\r\n                                                            <TableCell>\r\n                                                                <Typography variant=\"body2\" sx={{ color: 'green' }}>\r\n                                                                    ${project.analytics?.total_revenue || 0}\r\n                                                                </Typography>\r\n                                                            </TableCell>\r\n                                                            <TableCell>\r\n                                                                <Typography variant=\"body2\" sx={{ color: 'black' }}>\r\n                                                                    {project.analytics?.total_runs || 0}\r\n                                                                </Typography>\r\n                                                            </TableCell>\r\n                                                            <TableCell>\r\n                                                                <Typography variant=\"body2\" sx={{ color: 'black' }}>\r\n                                                                    {project.analytics?.total_views || 0}\r\n                                                                </Typography>\r\n                                                            </TableCell>\r\n                                                        </TableRow>\r\n                                                    ))}\r\n                                                </TableBody>\r\n                                            </Table>\r\n                                        </TableContainer>\r\n                                    </CardContent>\r\n                                </Card>\r\n                            </Grid>\r\n                        </Grid>\r\n                    ) : (\r\n                        <Box sx={{ textAlign: 'center', mt: 4 }}>\r\n                            <LinearProgress sx={{ mb: 2 }} />\r\n                            <Typography variant=\"h6\" sx={{ color: 'black' }}>\r\n                                Loading analytics...\r\n                            </Typography>\r\n                        </Box>\r\n                    )}\r\n                </TabPanel>\r\n\r\n                {/* Pending Reviews Tab */}\r\n                <TabPanel value={tabValue} index={2}>\r\n                    <Card>\r\n                        <CardContent>\r\n                            <Typography variant=\"h6\" sx={{ color: 'black', mb: 2 }}>\r\n                                Projects Pending Review\r\n                            </Typography>\r\n                            {filteredProjects.filter(p => p.status === 'pending').length > 0 ? (\r\n                                <List>\r\n                                    {filteredProjects\r\n                                        .filter(project => project.status === 'pending')\r\n                                        .map((project) => (\r\n                                            <ListItem key={project.id} divider>\r\n                                                <ListItemIcon>\r\n                                                    {getProjectTypeIcon(project.project_type)}\r\n                                                </ListItemIcon>\r\n                                                <ListItemText\r\n                                                    primary={project.title}\r\n                                                    secondary={\r\n                                                        <Box>\r\n                                                            <Typography variant=\"body2\" sx={{ color: 'black' }}>\r\n                                                                {project.description}\r\n                                                            </Typography>\r\n                                                            <Typography variant=\"caption\" sx={{ color: 'black' }}>\r\n                                                                by {project.owner.first_name} {project.owner.last_name} • \r\n                                                                Created {formatDistanceToNow(new Date(project.created_at), { addSuffix: true })}\r\n                                                            </Typography>\r\n                                                        </Box>\r\n                                                    }\r\n                                                    sx={{ '& .MuiListItemText-primary': { color: 'black' } }}\r\n                                                />\r\n                                                <Box sx={{ display: 'flex', gap: 1 }}>\r\n                                                    <Button\r\n                                                        size=\"small\"\r\n                                                        color=\"success\"\r\n                                                        startIcon={<ApproveIcon />}\r\n                                                        onClick={() => handleApproveProject(project.id)}\r\n                                                    >\r\n                                                        Approve\r\n                                                    </Button>\r\n                                                    <Button\r\n                                                        size=\"small\"\r\n                                                        color=\"error\"\r\n                                                        startIcon={<RejectIcon />}\r\n                                                        onClick={() => {\r\n                                                            setSelectedProject(project);\r\n                                                            setOpenRejectDialog(true);\r\n                                                        }}\r\n                                                    >\r\n                                                        Reject\r\n                                                    </Button>\r\n                                                </Box>\r\n                                            </ListItem>\r\n                                        ))}\r\n                                </List>\r\n                            ) : (\r\n                                <Typography variant=\"body1\" sx={{ color: 'black', textAlign: 'center' }}>\r\n                                    No projects pending review\r\n                                </Typography>\r\n                            )}\r\n                        </CardContent>\r\n                    </Card>\r\n                </TabPanel>\r\n\r\n                {/* Collaboration Management Tab */}\r\n                <TabPanel value={tabValue} index={3}>\r\n                    <Card>\r\n                        <CardContent>\r\n                            <Typography variant=\"h6\" sx={{ color: 'black', mb: 2 }}>\r\n                                Collaboration Management\r\n                            </Typography>\r\n                            <Typography variant=\"body2\" sx={{ color: 'black', mb: 3 }}>\r\n                                Monitor and manage project collaborations across the platform.\r\n                            </Typography>\r\n                            \r\n                            {filteredProjects.filter(p => p.collaborators?.length > 0).length > 0 ? (\r\n                                <List>\r\n                                    {filteredProjects\r\n                                        .filter(project => project.collaborators?.length > 0)\r\n                                        .map((project) => (\r\n                                            <ListItem key={project.id} divider>\r\n                                                <ListItemIcon>\r\n                                                    <CollaborationIcon sx={{ color: 'black' }} />\r\n                                                </ListItemIcon>\r\n                                                <ListItemText\r\n                                                    primary={project.title}\r\n                                                    secondary={\r\n                                                        <Box>\r\n                                                            <Typography variant=\"body2\" sx={{ color: 'black' }}>\r\n                                                                {project.collaborators.length} collaborators\r\n                                                            </Typography>\r\n                                                            <Typography variant=\"caption\" sx={{ color: 'black' }}>\r\n                                                                Owner: {project.owner.first_name} {project.owner.last_name}\r\n                                                            </Typography>\r\n                                                        </Box>\r\n                                                    }\r\n                                                    sx={{ '& .MuiListItemText-primary': { color: 'black' } }}\r\n                                                />\r\n                                                <Button\r\n                                                    size=\"small\"\r\n                                                    variant=\"outlined\"\r\n                                                    startIcon={<ViewIcon />}\r\n                                                    onClick={() => window.open(`/project/${project.id}`, '_blank')}\r\n                                                >\r\n                                                    View Details\r\n                                                </Button>\r\n                                            </ListItem>\r\n                                        ))}\r\n                                </List>\r\n                            ) : (\r\n                                <Typography variant=\"body1\" sx={{ color: 'black', textAlign: 'center' }}>\r\n                                    No collaborative projects found\r\n                                </Typography>\r\n                            )}\r\n                        </CardContent>\r\n                    </Card>\r\n                </TabPanel>\r\n\r\n                {/* Reject Dialog */}\r\n                <Dialog\r\n                    open={openRejectDialog}\r\n                    onClose={() => setOpenRejectDialog(false)}\r\n                    maxWidth=\"sm\"\r\n                    fullWidth\r\n                >\r\n                    <DialogTitle sx={{ color: 'black' }}>Reject Project</DialogTitle>\r\n                    <DialogContent>\r\n                        <Typography variant=\"body2\" sx={{ mb: 2, color: 'black' }}>\r\n                            Are you sure you want to reject \"{selectedProject?.title}\"?\r\n                        </Typography>\r\n                        <TextField\r\n                            fullWidth\r\n                            multiline\r\n                            rows={3}\r\n                            label=\"Reason for rejection (optional)\"\r\n                            value={rejectReason}\r\n                            onChange={(e) => setRejectReason(e.target.value)}\r\n                            placeholder=\"Please provide a reason for rejection...\"\r\n                            sx={{\r\n                                '& .MuiInputBase-root': {\r\n                                    color: 'black',\r\n                                    '& fieldset': { borderColor: 'black' }\r\n                                },\r\n                                '& .MuiInputLabel-root': {\r\n                                    color: 'black'\r\n                                }\r\n                            }}\r\n                        />\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={() => setOpenRejectDialog(false)} sx={{ color: 'black' }}>\r\n                            Cancel\r\n                        </Button>\r\n                        <Button\r\n                            onClick={() => handleRejectProject(selectedProject.id)}\r\n                            color=\"error\"\r\n                            variant=\"contained\"\r\n                        >\r\n                            Reject Project\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n\r\n                {/* Delete Confirmation Dialog */}\r\n                <Dialog\r\n                    open={openDeleteDialog}\r\n                    onClose={handleCancelDelete}\r\n                    maxWidth=\"sm\"\r\n                    fullWidth\r\n                >\r\n                    <DialogTitle sx={{ \r\n                        color: 'black', \r\n                        backgroundColor: '#fff3cd',\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        gap: 1\r\n                    }}>\r\n                        <DeleteIcon sx={{ color: '#856404' }} />\r\n                        Confirm Delete\r\n                    </DialogTitle>\r\n                    <DialogContent sx={{ backgroundColor: '#fff3cd', pt: 2 }}>\r\n                        <Typography variant=\"body1\" sx={{ color: 'black', mb: 2 }}>\r\n                            Are you sure you want to delete the project \"{selectedProject?.title}\"?\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" sx={{ color: '#856404' }}>\r\n                            This action cannot be undone. The project and all its data will be permanently removed.\r\n                        </Typography>\r\n                    </DialogContent>\r\n                    <DialogActions sx={{ backgroundColor: '#fff3cd', px: 3, pb: 2 }}>\r\n                        <Button \r\n                            onClick={handleCancelDelete}\r\n                            sx={{ \r\n                                color: 'black',\r\n                                borderColor: 'black',\r\n                                '&:hover': {\r\n                                    borderColor: 'black',\r\n                                    backgroundColor: 'rgba(0, 0, 0, 0.04)'\r\n                                }\r\n                            }}\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                        <Button \r\n                            onClick={handleConfirmDelete}\r\n                            variant=\"contained\"\r\n                            color=\"error\"\r\n                            startIcon={<DeleteIcon />}\r\n                            sx={{\r\n                                backgroundColor: '#dc3545',\r\n                                '&:hover': {\r\n                                    backgroundColor: '#c82333'\r\n                                }\r\n                            }}\r\n                        >\r\n                            Delete Project\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n\r\n                <Snackbar\r\n                    open={snackbar.open}\r\n                    autoHideDuration={6000}\r\n                    onClose={() => setSnackbar({ ...snackbar, open: false })}\r\n                >\r\n                    <Alert\r\n                        onClose={() => setSnackbar({ ...snackbar, open: false })}\r\n                        severity={snackbar.severity}\r\n                        sx={{ width: '100%' }}\r\n                    >\r\n                        {snackbar.message}\r\n                    </Alert>\r\n                </Snackbar>\r\n            </Container>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AdminProjectManagement; ","import axios from 'axios';\r\nimport Cookies from 'js-cookie';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\r\n\r\n// Function to fetch CSRF token if needed\r\nconst fetchCSRFToken = async () => {\r\n  try {\r\n    // Check if CSRF token already exists\r\n    if (!Cookies.get('csrftoken')) {\r\n      console.log('No CSRF token found, fetching a new one...');\r\n      const response = await axios.get(`${API_BASE_URL}/api/get_csrf_token/`, {\r\n        withCredentials: true\r\n      });\r\n      if (response.status === 200) {\r\n        const token = Cookies.get('csrftoken');\r\n        console.log('CSRF token fetched successfully:', token ? 'Token received' : 'No token set');\r\n      } else {\r\n        console.warn('Failed to fetch CSRF token:', response.status);\r\n      }\r\n    } else {\r\n      console.log('CSRF token already exists:', Cookies.get('csrftoken') ? 'Token exists' : 'No token found');\r\n    }\r\n  } catch (error) {\r\n    console.error('Error fetching CSRF token:', error);\r\n    // Continue without CSRF token - backend will handle exempt views\r\n  }\r\n};\r\n\r\n// Create axios instance with default config\r\nconst api = axios.create({\r\n  baseURL: `${API_BASE_URL}/api`,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n  withCredentials: true, // Enable sending cookies with requests\r\n});\r\n\r\n// Add request interceptor to include auth token and CSRF token\r\napi.interceptors.request.use(\r\n  async (config) => {\r\n    // Fetch CSRF token if needed\r\n    await fetchCSRFToken();\r\n    \r\n    const token = localStorage.getItem('accessToken');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    \r\n    // Add CSRF token to headers\r\n    const csrfToken = Cookies.get('csrftoken');\r\n    if (csrfToken) {\r\n      config.headers['X-CSRFToken'] = csrfToken;\r\n    }\r\n    \r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add response interceptor to handle errors\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      // Handle unauthorized access\r\n      localStorage.removeItem('accessToken');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const projectService = {\r\n  // Get all projects\r\n  getAllProjects: async (params = {}) => {\r\n    const response = await api.get('/projects/', { params });\r\n    return response;\r\n  },\r\n\r\n  // Get user's projects\r\n  getMyProjects: async (params = {}) => {\r\n    const response = await api.get('/projects/my_projects/', { params });\r\n    return response;\r\n  },\r\n\r\n  // Enhanced search projects\r\n  searchProjects: async (query, params = {}) => {\r\n    const response = await api.get('/projects/search/', {\r\n      params: { q: query, ...params }\r\n    });\r\n    return response;\r\n  },\r\n\r\n  // Get single project\r\n  getProject: async (projectId) => {\r\n    const response = await api.get(`/projects/${projectId}/`);\r\n    return response;\r\n  },\r\n\r\n  // Create new project\r\n  createProject: async (projectData) => {\r\n    const response = await api.post('/projects/', projectData);\r\n    return response;\r\n  },\r\n\r\n  // Update project\r\n  updateProject: async (projectId, projectData) => {\r\n    const response = await api.put(`/projects/${projectId}/`, projectData);\r\n    return response;\r\n  },\r\n\r\n  // Delete project\r\n  deleteProject: async (projectId) => {\r\n    const response = await api.delete(`/projects/${projectId}/`);\r\n    return response;\r\n  },\r\n\r\n  // Run project\r\n  runProject: async (projectId, inputData = {}) => {\r\n    const response = await api.post(`/projects/${projectId}/run/`, inputData);\r\n    return response;\r\n  },\r\n\r\n  // Buy project\r\n  buyProject: async (projectId, purchaseData = {}) => {\r\n    const response = await api.post(`/projects/${projectId}/buy/`, purchaseData);\r\n    return response;\r\n  },\r\n\r\n  // Track project view\r\n  trackProjectView: async (projectId) => {\r\n    const response = await api.post(`/projects/${projectId}/view/`);\r\n    return response;\r\n  },\r\n\r\n  // Get project analytics\r\n  getProjectAnalytics: async (projectId) => {\r\n    const response = await api.get(`/projects/${projectId}/analytics/`);\r\n    return response;\r\n  },\r\n\r\n  // Get collaborators\r\n  getCollaborators: async (projectId) => {\r\n    const response = await api.get(`/projects/${projectId}/collaborators/`);\r\n    return response;\r\n  },\r\n\r\n  // Add collaborator\r\n  addCollaborator: async (projectId, collaboratorData) => {\r\n    const response = await api.post(`/projects/${projectId}/add_collaborator/`, collaboratorData);\r\n    return response;\r\n  },\r\n\r\n  // Remove collaborator\r\n  removeCollaborator: async (projectId, userId) => {\r\n    const response = await api.post(`/projects/${projectId}/remove_collaborator/`, { user_id: userId });\r\n    return response;\r\n  },\r\n\r\n  // Submit version for review (for collaborators)\r\n  submitVersionForReview: async (projectId, versionData) => {\r\n    const response = await api.post(`/projects/${projectId}/submit_version_for_review/`, versionData);\r\n    return response;\r\n  },\r\n\r\n  // Get pending versions for review\r\n  getPendingVersions: async (projectId) => {\r\n    const response = await api.get(`/projects/${projectId}/pending_versions/`);\r\n    return response;\r\n  },\r\n\r\n  // Promote version to public\r\n  promoteVersionToPublic: async (projectId, versionId) => {\r\n    const response = await api.post(`/projects/${projectId}/versions/${versionId}/promote_to_public/`);\r\n    return response;\r\n  },\r\n\r\n  // Get project versions\r\n  getProjectVersions: async (projectId) => {\r\n    const response = await api.get(`/projects/${projectId}/versions/`);\r\n    return response;\r\n  },\r\n\r\n  // Create project version\r\n  createProjectVersion: async (projectId, versionData) => {\r\n    const response = await api.post(`/projects/${projectId}/versions/`, versionData);\r\n    return response;\r\n  },\r\n\r\n  // Update project version\r\n  updateProjectVersion: async (projectId, versionId, versionData) => {\r\n    const response = await api.put(`/projects/${projectId}/versions/${versionId}/`, versionData);\r\n    return response;\r\n  },\r\n\r\n  // Delete project version\r\n  deleteProjectVersion: async (projectId, versionId) => {\r\n    const response = await api.delete(`/projects/${projectId}/versions/${versionId}/`);\r\n    return response;\r\n  },\r\n\r\n  // Approve project version\r\n  approveProjectVersion: async (projectId, versionId) => {\r\n    const response = await api.post(`/projects/${projectId}/versions/${versionId}/approve/`);\r\n    return response;\r\n  },\r\n\r\n  // Reject project version\r\n  rejectProjectVersion: async (projectId, versionId, reason = '') => {\r\n    const response = await api.post(`/projects/${projectId}/versions/${versionId}/reject/`, { reason });\r\n    return response;\r\n  },\r\n\r\n  // Analyze computing resources\r\n  analyzeComputingResources: async (projectId, code) => {\r\n    const response = await api.post(`/projects/${projectId}/computing-resources/`, { code });\r\n    return response;\r\n  },\r\n\r\n  // Get computing resources\r\n  getComputingResources: async (projectId) => {\r\n    const response = await api.get(`/projects/${projectId}/computing-resources/`);\r\n    return response;\r\n  },\r\n\r\n  // Update computing resources\r\n  updateComputingResources: async (projectId, resourceId, resourceData) => {\r\n    const response = await api.put(`/projects/${projectId}/computing-resources/${resourceId}/`, resourceData);\r\n    return response;\r\n  },\r\n\r\n  // Admin functions\r\n  // Get all projects for admin\r\n  getAllProjectsAdmin: async (params = {}) => {\r\n    const response = await api.get('/projects/admin/projects/', { params });\r\n    return response;\r\n  },\r\n\r\n  // Get admin analytics\r\n  getAdminAnalytics: async () => {\r\n    const response = await api.get('/projects/admin/projects/analytics/');\r\n    return response;\r\n  },\r\n\r\n  // Approve project\r\n  approveProject: async (projectId) => {\r\n    const response = await api.post(`/projects/admin/projects/${projectId}/approve/`);\r\n    return response;\r\n  },\r\n\r\n  // Reject project\r\n  rejectProject: async (projectId, reason = '') => {\r\n    const response = await api.post(`/projects/admin/projects/${projectId}/reject/`, { reason });\r\n    return response;\r\n  },\r\n\r\n  // Get project usage statistics\r\n  getProjectUsage: async (projectId) => {\r\n    const response = await api.get(`/projects/${projectId}/usage/`);\r\n    return response;\r\n  },\r\n\r\n  // Get user's project usage\r\n  getUserProjectUsage: async (projectId) => {\r\n    const response = await api.get(`/projects/${projectId}/user_usage/`);\r\n    return response;\r\n  },\r\n\r\n  // Get user usage for a specific project\r\n  getUserUsage: async (projectId) => {\r\n    const response = await api.get(`/projects/${projectId}/user_usage/`);\r\n    return response;\r\n  },\r\n\r\n  // Get pending versions for review\r\n  getPendingVersions: async (projectId) => {\r\n    const response = await api.get(`/projects/${projectId}/pending_versions/`);\r\n    return response;\r\n  },\r\n\r\n  // Approve a version\r\n  approveVersion: async (projectId, versionId) => {\r\n    const response = await api.post(`/projects/${projectId}/versions/${versionId}/approve/`);\r\n    return response;\r\n  },\r\n\r\n  // Reject a version\r\n  rejectVersion: async (projectId, versionId, reason) => {\r\n    const response = await api.post(`/projects/${projectId}/versions/${versionId}/reject/`, { reason });\r\n    return response;\r\n  },\r\n\r\n  // Submit a new version for review\r\n  submitVersionForReview: async (projectId, versionData) => {\r\n    const response = await api.post(`/projects/${projectId}/submit_version_for_review/`, versionData);\r\n    return response;\r\n  },\r\n\r\n  // Submit project for review\r\n  submitForReview: async (projectId, reviewData) => {\r\n    const response = await api.post(`/projects/${projectId}/submit_for_review/`, reviewData);\r\n    return response;\r\n  },\r\n\r\n  // Get public project by ID\r\n  getPublicProject: async (projectId) => {\r\n    const response = await api.get(`/projects/public/${projectId}/`);\r\n    return response;\r\n  },\r\n\r\n  // Get private project by URL\r\n  getPrivateProject: async (privateUrl) => {\r\n    const response = await api.get(`/projects/private/${privateUrl}/`);\r\n    return response;\r\n  },\r\n\r\n  // Execute code using backend endpoint\r\n  executeCode: async (code, language) => {\r\n    const response = await api.post('/projects/execute-code/', {\r\n      code: code,\r\n      language: language\r\n    });\r\n    return response;\r\n  },\r\n\r\n  // Enhanced search with filters\r\n  advancedSearch: async (filters = {}) => {\r\n    const {\r\n      query = '',\r\n      projectType = '',\r\n      language = '',\r\n      minPrice = '',\r\n      maxPrice = '',\r\n      sortBy = 'created_at',\r\n      sortOrder = 'desc'\r\n    } = filters;\r\n\r\n    const params = {\r\n      q: query,\r\n      type: projectType,\r\n      language: language,\r\n      min_price: minPrice,\r\n      max_price: maxPrice,\r\n      sort_by: sortBy,\r\n      sort_order: sortOrder\r\n    };\r\n\r\n    const response = await api.get('/projects/search/', { params });\r\n    return response;\r\n  }\r\n};\r\n\r\nexport default projectService;"],"names":["TabPanel","_ref","children","value","index","other","_jsx","role","hidden","id","Box","sx","p","AdminProjectManagement","user","useAuth","tabValue","setTabValue","useState","projects","setProjects","filteredProjects","setFilteredProjects","loading","setLoading","searchTerm","setSearchTerm","filterStatus","setFilterStatus","filterType","setFilterType","selectedProject","setSelectedProject","openRejectDialog","setOpenRejectDialog","openDeleteDialog","setOpenDeleteDialog","rejectReason","setRejectReason","adminAnalytics","setAdminAnalytics","snackbar","setSnackbar","open","message","severity","useEffect","loadProjects","loadAdminAnalytics","filterProjects","async","response","projectService","getAllProjectsAdmin","data","error","console","getAdminAnalytics","filtered","filter","project","title","toLowerCase","includes","description","owner","email","status","project_type","handleApproveProject","approveProject","projectId","map","is_approved","handleCancelDelete","getStatusColor","getProjectTypeIcon","type","CodeIcon","fontSize","DescriptionIcon","_jsxs","_Fragment","Helmet","Container","maxWidth","mt","mb","Typography","variant","component","gutterBottom","color","borderBottom","borderColor","Tabs","onChange","e","newValue","Tab","label","Card","CardContent","Grid","container","spacing","alignItems","item","xs","md","TextField","fullWidth","placeholder","target","InputProps","startAdornment","InputAdornment","position","SearchIcon","FormControl","InputLabel","Select","MenuItem","length","TableContainer","Paper","backgroundColor","fontWeight","Table","TableHead","TableRow","TableCell","TableBody","_project$analytics","_project$analytics2","_project$analytics3","noWrap","substring","display","gap","Avatar","width","height","avatar","src","alt","first_name","PersonIcon","last_name","Chip","size","icon","price","price_per_use","flexDirection","ViewIcon","analytics","total_views","RunIcon","total_runs","RevenueIcon","total_revenue","formatDistanceToNow","Date","created_at","addSuffix","Tooltip","IconButton","onClick","window","ApproveIcon","RejectIcon","DeleteIcon","total_projects","approved_projects","pending_projects","top_projects","_project$analytics4","_project$analytics5","_project$analytics6","textAlign","LinearProgress","List","ListItem","divider","ListItemIcon","ListItemText","primary","secondary","Button","startIcon","_p$collaborators","collaborators","_project$collaborator","CollaborationIcon","Dialog","onClose","DialogTitle","DialogContent","multiline","rows","DialogActions","rejectProject","handleRejectProject","pt","px","pb","handleConfirmDelete","deleteProject","handleDeleteProject","Snackbar","autoHideDuration","Alert","API_BASE_URL","process","api","axios","create","baseURL","headers","withCredentials","interceptors","request","use","Cookies","get","log","token","warn","fetchCSRFToken","localStorage","getItem","config","Authorization","csrfToken","Promise","reject","_error$response","removeItem","location","href","getAllProjects","params","arguments","undefined","getMyProjects","searchProjects","query","q","getProject","createProject","post","projectData","updateProject","put","delete","runProject","inputData","buyProject","purchaseData","trackProjectView","getProjectAnalytics","getCollaborators","addCollaborator","collaboratorData","removeCollaborator","userId","user_id","submitVersionForReview","versionData","getPendingVersions","promoteVersionToPublic","versionId","getProjectVersions","createProjectVersion","updateProjectVersion","deleteProjectVersion","approveProjectVersion","rejectProjectVersion","reason","analyzeComputingResources","code","getComputingResources","updateComputingResources","resourceId","resourceData","getProjectUsage","getUserProjectUsage","getUserUsage","approveVersion","rejectVersion","submitForReview","reviewData","getPublicProject","getPrivateProject","privateUrl","executeCode","language","advancedSearch","filters","projectType","minPrice","maxPrice","sortBy","sortOrder","min_price","max_price","sort_by","sort_order"],"sourceRoot":""}